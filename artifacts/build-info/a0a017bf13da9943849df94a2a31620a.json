{"id":"a0a017bf13da9943849df94a2a31620a","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol":{"content":"// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"../shared/interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../vrf/VRFConsumerBaseV2.sol\";\nimport \"../shared/access/ConfirmedOwner.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\n  uint96 public immutable BASE_FEE;\n  uint96 public immutable GAS_PRICE_LINK;\n  uint16 public immutable MAX_CONSUMERS = 100;\n\n  error InvalidSubscription();\n  error InsufficientBalance();\n  error MustBeSubOwner(address owner);\n  error TooManyConsumers();\n  error InvalidConsumer();\n  error InvalidRandomWords();\n  error Reentrant();\n\n  event RandomWordsRequested(\n    bytes32 indexed keyHash,\n    uint256 requestId,\n    uint256 preSeed,\n    uint64 indexed subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    address indexed sender\n  );\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n  event SubscriptionCreated(uint64 indexed subId, address owner);\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n  event ConsumerAdded(uint64 indexed subId, address consumer);\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\n  event ConfigSet();\n\n  struct Config {\n    // Reentrancy protection.\n    bool reentrancyLock;\n  }\n  Config private s_config;\n  uint64 s_currentSubId;\n  uint256 s_nextRequestId = 1;\n  uint256 s_nextPreSeed = 100;\n  struct Subscription {\n    address owner;\n    uint96 balance;\n  }\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n  struct Request {\n    uint64 subId;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n  }\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) ConfirmedOwner(msg.sender) {\n    BASE_FEE = _baseFee;\n    GAS_PRICE_LINK = _gasPriceLink;\n    setConfig();\n  }\n\n  /**\n   * @notice Sets the configuration of the vrfv2 mock coordinator\n   */\n  function setConfig() public onlyOwner {\n    s_config = Config({reentrancyLock: false});\n    emit ConfigSet();\n  }\n\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n    address[] memory consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n    if (!consumerIsAdded(_subId, _consumer)) {\n      revert InvalidConsumer();\n    }\n    _;\n  }\n\n  /**\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n   * @notice consumer.\n   *\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n   * @dev against the real coordinator a small amount of additional LINK is required.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   */\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n  }\n\n  /**\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   * @param _words user-provided random words\n   */\n  function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\n    uint256 startGas = gasleft();\n    if (s_requests[_requestId].subId == 0) {\n      revert(\"nonexistent request\");\n    }\n    Request memory req = s_requests[_requestId];\n\n    if (_words.length == 0) {\n      _words = new uint256[](req.numWords);\n      for (uint256 i = 0; i < req.numWords; i++) {\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n      }\n    } else if (_words.length != req.numWords) {\n      revert InvalidRandomWords();\n    }\n\n    VRFConsumerBaseV2 v;\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n    s_config.reentrancyLock = true;\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n    s_config.reentrancyLock = false;\n\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n    if (s_subscriptions[req.subId].balance < payment) {\n      revert InsufficientBalance();\n    }\n    s_subscriptions[req.subId].balance -= payment;\n    delete (s_requests[_requestId]);\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n  }\n\n  /**\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n   *\n   * @param _subId the subscription to fund\n   * @param _amount the amount to fund\n   */\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    uint96 oldBalance = s_subscriptions[_subId].balance;\n    s_subscriptions[_subId].balance += _amount;\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n  }\n\n  function requestRandomWords(\n    bytes32 _keyHash,\n    uint64 _subId,\n    uint16 _minimumRequestConfirmations,\n    uint32 _callbackGasLimit,\n    uint32 _numWords\n  ) external override nonReentrant onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n\n    uint256 requestId = s_nextRequestId++;\n    uint256 preSeed = s_nextPreSeed++;\n\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n    emit RandomWordsRequested(\n      _keyHash,\n      requestId,\n      preSeed,\n      _subId,\n      _minimumRequestConfirmations,\n      _callbackGasLimit,\n      _numWords,\n      msg.sender\n    );\n    return requestId;\n  }\n\n  function createSubscription() external override returns (uint64 _subId) {\n    s_currentSubId++;\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\n    return s_currentSubId;\n  }\n\n  function getSubscription(\n    uint64 _subId\n  ) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n  }\n\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n    delete (s_subscriptions[_subId]);\n  }\n\n  modifier onlySubOwner(uint64 _subId) {\n    address owner = s_subscriptions[_subId].owner;\n    if (owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (msg.sender != owner) {\n      revert MustBeSubOwner(owner);\n    }\n    _;\n  }\n\n  function getRequestConfig() external pure override returns (uint16, uint32, bytes32[] memory) {\n    return (3, 2000000, new bytes32[](0));\n  }\n\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\n      revert TooManyConsumers();\n    }\n\n    if (consumerIsAdded(_subId, _consumer)) {\n      return;\n    }\n\n    s_consumers[_subId].push(_consumer);\n    emit ConsumerAdded(_subId, _consumer);\n  }\n\n  function removeConsumer(\n    uint64 _subId,\n    address _consumer\n  ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\n    address[] storage consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        address last = consumers[consumers.length - 1];\n        consumers[i] = last;\n        consumers.pop();\n        break;\n      }\n    }\n\n    emit ConsumerRemoved(_subId, _consumer);\n  }\n\n  function getConfig()\n    external\n    pure\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    )\n  {\n    return (4, 2_500_000, 2_700, 33285);\n  }\n\n  function getFeeConfig()\n    external\n    pure\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    )\n  {\n    return (\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      0,\n      0,\n      0,\n      0\n    );\n  }\n\n  modifier nonReentrant() {\n    if (s_config.reentrancyLock) {\n      revert Reentrant();\n    }\n    _;\n  }\n\n  function getFallbackWeiPerUnitLink() external pure returns (int256) {\n    return 4000000000000000; // 0.004 Ether\n  }\n\n  function requestSubscriptionOwnerTransfer(uint64 /*_subId*/, address /*_newOwner*/) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function acceptSubscriptionOwnerTransfer(uint64 /*_subId*/) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function pendingRequestExists(uint64 /*subId*/) public pure override returns (bool) {\n    revert(\"not implemented\");\n  }\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IOwnable.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\nimport {IERC721} from \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"},"@openzeppelin/contracts/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../token/ERC721/IERC721.sol\";\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {Strings} from \"../../../utils/Strings.sol\";\nimport {IERC4906} from \"../../../interfaces/IERC4906.sol\";\nimport {IERC165} from \"../../../interfaces/IERC165.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\n    // defines events and does not include any external function.\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\n\n    // Optional mapping for token URIs\n    mapping(uint256 tokenId => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\n        if (bytes(_tokenURI).length > 0) {\n            return string.concat(base, _tokenURI);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        _tokenURIs[tokenId] = _tokenURI;\n        emit MetadataUpdate(tokenId);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/BasicNft.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n\r\n\r\n\r\ncontract BasicNft is ERC721 {\r\n    string public constant TOKEN_URI =\r\n        \"ipfs://bafybeig37ioir76s7mg5oobetncojcm3c3hxasyd4rvid4jqhy4gkaheg4/?filename=0-PUG.json\";\r\n    uint256 private s_tokenCounter;\r\n\r\n    constructor() ERC721(\"Dogie\", \"DOG\") {\r\n        s_tokenCounter = 0;\r\n    }\r\n\r\n    function mintNft() public {\r\n        _safeMint(msg.sender, s_tokenCounter);\r\n        s_tokenCounter = s_tokenCounter + 1;\r\n    }\r\n\r\n    function tokenURI(uint256 /*tokenId*/) public view override returns (string memory) { \r\n        return TOKEN_URI;\r\n    }\r\n\r\n    function getTokenCounter() public view returns (uint256) {\r\n        return s_tokenCounter;\r\n    }\r\n}"},"contracts/RandomIpfs.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n//errors\r\nerror RandomIpfs__OUT_OF_RANGE();\r\nerror RandomIpfs__NOT_ENOUGH_ETH_ENTERED();\r\nerror RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT();\r\nerror RandomIpfs__OwnableUnauthorizedAccount();\r\n\r\n\r\ncontract RandomIpfs is VRFConsumerBaseV2, ERC721URIStorage{\r\n\r\n//vrf variables\r\nVRFCoordinatorV2Interface private immutable i_vrfCoordinatorV2;\r\nuint64 private immutable i_subscriptionId;\r\nbytes32 private immutable i_keyHash;\r\nuint32  private immutable i_callbackGasLimit;\r\nuint16 private constant REQUEST_CONFRIMATIONS = 3;\r\nuint32 private constant NUW_WORDS =  1;\r\n\r\n//vrf helpers\r\nmapping(uint256 => address) public s_requestIdToSender;\r\n\r\n//Nft variables\r\nuint256 internal constant MAX_VALUE = 100;\r\nuint256 private s_tokenCounter; \r\nstring[] internal s_dogTokenUris;\r\nuint256 private immutable i_mintFee;\r\naddress private owner;\r\n\r\n//enums\r\nenum Breed {Pug, Shiba_inu, St_benard }\r\n//events\r\nevent NftRequested(uint256 indexed requestId, address indexed requester);\r\nevent NftMinted(uint256 indexed tokenId , Breed indexed breed, address minter);\r\n\r\n\r\n\r\nconstructor (address vrfCoordinatorV2, uint64 subscriptionId, bytes32 keyHash, uint32 callBackGasLimit, string[3] memory dogTokenUris, uint256 mintFee) \r\nVRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\"RandomDogsNft\", \"DOGS\")  {\r\n    i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n    i_subscriptionId = subscriptionId;\r\n    i_keyHash = keyHash;\r\n    i_callbackGasLimit = callBackGasLimit;\r\n    s_tokenCounter = 0;\r\n    s_dogTokenUris = dogTokenUris;\r\n    i_mintFee = mintFee;\r\n}\r\n\r\n function requestNft() public payable returns (uint256 requestId) {\r\n   if (msg.value < i_mintFee) {\r\n      revert RandomIpfs__NOT_ENOUGH_ETH_ENTERED();\r\n   }\r\n    requestId = i_vrfCoordinatorV2.requestRandomWords(i_keyHash, i_subscriptionId, REQUEST_CONFRIMATIONS, i_callbackGasLimit,NUW_WORDS );\r\n    s_requestIdToSender[requestId]  = msg.sender;\r\n    emit NftRequested( requestId, msg.sender);\r\n }\r\n function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\r\n   address dogOwner  = s_requestIdToSender[requestId];\r\n   uint256 newTokenId  = s_tokenCounter;\r\n   s_tokenCounter++;\r\n   uint256 moddedRng = randomWords[0] % MAX_VALUE;\r\n   Breed dogBreed =  getBreedFromRandomNum(moddedRng);\r\n   _safeMint(dogOwner, newTokenId);\r\n   _setTokenURI(newTokenId,  s_dogTokenUris[uint256(dogBreed)]);\r\n   emit NftMinted(newTokenId, dogBreed, dogOwner);\r\n }\r\n\r\n function getChancesArray() public pure returns (uint256[3] memory ) {\r\n    return [10, 30, MAX_VALUE];\r\n }\r\n function getBreedFromRandomNum(uint256 moddedRng) public pure returns(Breed) {\r\n     uint256[3] memory chanceArray = getChancesArray();\r\n     uint256 cumSum  = 0;\r\n\r\n     for (uint256 i = 0; i < chanceArray.length; i++) {\r\n      if (moddedRng >= cumSum && moddedRng < chanceArray[i] ) {\r\n         \r\n         return Breed(i);\r\n\r\n      } \r\n      cumSum  =chanceArray[i];\r\n         \r\n\r\n     }\r\n     revert RandomIpfs__OUT_OF_RANGE();\r\n\r\n }\r\n function getOwner()public view returns (address) {\r\n   return owner;\r\n }\r\n \r\n function withdraw() public  {\r\n   if (getOwner() != msg.sender) {\r\n            revert RandomIpfs__OwnableUnauthorizedAccount();\r\n        }\r\n   uint256 amount = address(this).balance;\r\n   (bool success, ) = payable(msg.sender).call{value:amount}(\"\");\r\n\r\n   if (!success) {\r\n      revert  RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT();\r\n   } \r\n }\r\n function getMintFee() public view returns(uint256) {\r\n   return i_mintFee;\r\n }\r\n function getDogTokenUris(uint256 index)  public view returns(string memory){\r\n   return s_dogTokenUris[index];\r\n\r\n }\r\n function getTokenCounter( ) public view returns (uint256) {\r\n   return s_tokenCounter;\r\n }\r\n \r\n}"},"contracts/RandomIpfsNft.sol":{"content":"\r\n// // pragma solidity ^0.8.7;\r\n// // import \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n// // import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\r\n// // import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\n// // import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// //   error RandomIpfsNft__RangeOutOfBounds();\r\n// //   error RandomIpfsNft__NeedMoreETH();\r\n// //   error RandomIpfsNft__TransferFailed();\r\n\r\n// // contract RandomIpfsNft is VRFConsumerBaseV2, ERC721, Ownable {\r\n// //     //Types\r\n// //      enum Breed {\r\n// //         PUG,\r\n// //         SHIBA_INU,\r\n// //         ST_BERNARD\r\n// //     }\r\n// //     //\r\n// //     uint64 private immutable i_subscriptionId;\r\n// //     bytes32 private immutable i_gasLane;\r\n// //     uint32 private immutable i_callbackGasLimit;\r\n// //     uint16 private constant REQUEST_CONFRIMATIONS = 3;\r\n// //     uint32 private constant NUM_WORDS = 1;\r\n// //     //\r\n// //     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\r\n// //     //\r\n// //     //contract variables\r\n// //     mapping(uint256 => address) private s_requstToSender;\r\n// //     uint256 public tokenCounter;\r\n// //     uint256 public constant MAX_CHANCE_VALUE;\r\n// //     string[] internal s_dogTokenUris;\r\n// //     uint256 private immutable i_mintFee;\r\n// //     event NftRequested(uint256 indexed requestId, address indexed requester);\r\n// //     event NftMinted(uint256 indexed tokenId, Breed indexed breed, address indexed minter);\r\n// //     constructor(address vrfCoordinatorV2, uint64 subscriptionid, bytes32 gasLane, uint32 callbackGasLimit, string[3] memory dogTokenUris) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\"RandomIPFS\", \"RAN\"){\r\n// //             i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n// //             i_subscriptionId = subscriptionid;\r\n// //             i_gasLane = gasLane;\r\n// //             i_callbackGasLimit = callbackGasLimit;\r\n// //             s_dogTokenUris = dogTokenUris;\r\n// //     }\r\n// //     function requestNft ()public  payable returns (uint256 requestId) {\r\n// //         if (msg.value < i_mintFee) {\r\n// //             revert RandomIpfsNft__NeedMoreETH();\r\n// //         } \r\n// //         requestId = i_vrfCoordinator.requestRandomWords(i_gasLane, i_subscriptionId, REQUEST_CONFRIMATIONS, i_callbackGasLimit,NUM_WORDS );\r\n// //         s_requstToSender[requestId] = msg.sender;\r\n// //         emit NftRequested(requestId, msg.sender);\r\n// //     }\r\n// //     function fulfillRandomWords( uint256 requestId,\r\n// //         uint256[] memory _randomWords) internal override {\r\n// //         address dogOwner  = s_requstToSender[requestId];\r\n// //         uint256 newTokenId = tokenCounter;\r\n// //         uint256 modular  = _randomWords[0] % MAX_CHANCE_VALUE;\r\n// //         Breed dogBreed = getBreedFromModdedRng(modular);\r\n// //         _safeMint(dogOwner, newTokenId);\r\n// //         _setTokenURI(newTokenId, s_dogTokenUris[uint256(dogBreed)]);\r\n// //          emit NftMinted(newTokenId, dogBreed, dogOwner);\r\n// //     }\r\n\r\n// //     function getChanceArray( ) public pure returns (uint256[3] memory) {\r\n// //         return [10, 30, MAX_CHANCE_VALUE ];\r\n// //     }\r\n\r\n// //     function withdraw() public onlyOwner {\r\n// //         uint256 amount  = address(this).balance;\r\n// //         (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n// //         if(!success){\r\n// //             revert RandomIpfsNft__TransferFailed();\r\n// //         }\r\n// //     }\r\n// //     function getBreedFromModdedRng(uint256 moddedRng)public view returns (Breed){\r\n// //         uint256 cumulativeSum  = 0;\r\n// //         uint256[3] memory chanceArray = getChanceArray();\r\n// //         for (uint256 i = 0; i < chanceArray.length; i++) {\r\n// //          if (moddedRng >=  cumulativeSum && moddedRng < cumulativeSum + chanceArray[i]) {\r\n// //             return Breed[i];\r\n\r\n// //          } \r\n// //          cumulativeSum += chanceArray[i];\r\n\r\n// //         }\r\n// //         revert RandomIpfsNft__RangeOutOfBounds();\r\n// //     }\r\n// //     function getMintFee() public view returns(uint256){\r\n// //         return i_mintFee;\r\n// //     }\r\n// //     function getDogTokenUris()  public view returns (string memory) {\r\n// //         return s_dogTokenUris;\r\n// //     }\r\n// //     function getTokenCounter() public view returns(uint256) {\r\n// //         return tokenCounter;\r\n// //     }\r\n\r\n    \r\n// // }\r\n// // SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.7;\r\n\r\n// import \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\n//  import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\r\n//  import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\n//  import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// error RandomIpfsNft__AlreadyInitialized();\r\n// error RandomIpfsNft__NeedMoreETHSent();\r\n// error RandomIpfsNft__RangeOutOfBounds();\r\n// error RandomIpfsNft__TransferFailed();\r\n// contract RandomIpfsNft is ERC721URIStorage, VRFConsumerBaseV2, Ownable {\r\n//     // Types\r\n//     enum Breed {\r\n//         PUG,\r\n//         SHIBA_INU,\r\n//         ST_BERNARD\r\n//     }\r\n\r\n//     // Chainlink VRF Variables\r\n//     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\r\n//     uint64 private immutable i_subscriptionId;\r\n//     bytes32 private immutable i_gasLane;\r\n//     uint32 private immutable i_callbackGasLimit;\r\n//     uint16 private constant REQUEST_CONFIRMATIONS = 3;\r\n//     uint32 private constant NUM_WORDS = 1;\r\n\r\n//     // NFT Variables\r\n//     uint256 private immutable i_mintFee;\r\n//     uint256 private s_tokenCounter;\r\n//     uint256 internal constant MAX_CHANCE_VALUE = 100;\r\n//     string[] internal s_dogTokenUris;\r\n//     bool private s_initialized;\r\n\r\n//     // VRF Helpers\r\n//     mapping(uint256 => address) public s_requestIdToSender;\r\n\r\n//     // Events\r\n//     event NftRequested(uint256 indexed requestId, address indexed requester);\r\n//     event NftMinted(uint256 indexed tokenId, Breed indexed breed, address indexed minter);\r\n\r\n//     constructor(\r\n//         address vrfCoordinatorV2,\r\n//         uint64 subscriptionId,\r\n//         bytes32 gasLane, // keyHash\r\n//         uint256 mintFee,\r\n//         uint32 callbackGasLimit,\r\n//         string[3] memory dogTokenUris\r\n//     ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\"Random IPFS NFT\", \"RIN\") {\r\n//         i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\r\n//         i_gasLane = gasLane;\r\n//         i_subscriptionId = subscriptionId;\r\n//         i_mintFee = mintFee;\r\n//         i_callbackGasLimit = callbackGasLimit;\r\n//         _initializeContract(dogTokenUris);\r\n//         s_tokenCounter = 0;\r\n//     }\r\n\r\n//     function requestNft() public payable returns (uint256 requestId) {\r\n//         if (msg.value < i_mintFee) {\r\n//             revert RandomIpfsNft__NeedMoreETHSent();\r\n//         }\r\n//         requestId = i_vrfCoordinator.requestRandomWords(\r\n//             i_gasLane,\r\n//             i_subscriptionId,\r\n//             REQUEST_CONFIRMATIONS,\r\n//             i_callbackGasLimit,\r\n//             NUM_WORDS\r\n//         );\r\n\r\n//         s_requestIdToSender[requestId] = msg.sender;\r\n//         emit NftRequested(requestId, msg.sender);\r\n//     }\r\n\r\n//     function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\r\n//         address dogOwner = s_requestIdToSender[requestId];\r\n//         uint256 newItemId = s_tokenCounter;\r\n//         s_tokenCounter = s_tokenCounter + 1;\r\n//         uint256 moddedRng = randomWords[0] % MAX_CHANCE_VALUE;\r\n//         Breed dogBreed = getBreedFromModdedRng(moddedRng);\r\n//         _safeMint(dogOwner, newItemId);\r\n//         _setTokenURI(newItemId, s_dogTokenUris[uint256(dogBreed)]);\r\n//         emit NftMinted(newItemId, dogBreed, dogOwner);\r\n//     }\r\n\r\n//     function getChanceArray() public pure returns (uint256[3] memory) {\r\n//         return [10, 40, MAX_CHANCE_VALUE];\r\n//     }\r\n\r\n//     function _initializeContract(string[3] memory dogTokenUris) private {\r\n//         if (s_initialized) {\r\n//             revert RandomIpfsNft__AlreadyInitialized();\r\n//         }\r\n//         s_dogTokenUris = dogTokenUris;\r\n//         s_initialized = true;\r\n//     }\r\n\r\n//     function getBreedFromModdedRng(uint256 moddedRng) public pure returns (Breed) {\r\n//         uint256 cumulativeSum = 0;\r\n//         uint256[3] memory chanceArray = getChanceArray();\r\n//         for (uint256 i = 0; i < chanceArray.length; i++) {\r\n//                 // Pug = 0 - 9  (10%)\r\n//                 // Shiba-inu = 10 - 39  (30%)\r\n//                 // St. Bernard = 40 = 99 (60%)\r\n//             if (moddedRng >= cumulativeSum && moddedRng < chanceArray[i]) {\r\n//                 return Breed(i);\r\n//             }\r\n//             cumulativeSum = chanceArray[i];\r\n//         }\r\n//         revert RandomIpfsNft__RangeOutOfBounds();\r\n//     }\r\n\r\n//     function withdraw() public onlyOwner {\r\n//         uint256 amount = address(this).balance;\r\n//         (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n//         if (!success) {\r\n//             revert RandomIpfsNft__TransferFailed();\r\n//         }\r\n//     }\r\n\r\n//     function getMintFee() public view returns (uint256) {\r\n//         return i_mintFee;\r\n//     }\r\n\r\n//     function getDogTokenUris(uint256 index) public view returns (string memory) {\r\n//         return s_dogTokenUris[index];\r\n//     }\r\n\r\n//     function getInitialized() public view returns (bool) {\r\n//         return s_initialized;\r\n//     }\r\n\r\n//     function getTokenCounter() public view returns (uint256) {\r\n//         return s_tokenCounter;\r\n//     }\r\n// }"},"contracts/test/VRFCoordinatorV2Mock.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\";"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"\n--> contracts/RandomIpfsNft.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/RandomIpfsNft.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/BasicNft.sol:22:5:\n   |\n22 |     function tokenURI(uint256 /*tokenId*/) public view override returns (string memory) { \n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":677,"file":"contracts/BasicNft.sol","start":557},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[95]},"id":96,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":95,"linearizedBaseContracts":[95],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"97:267:0","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":12,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:0","nodeType":"FunctionDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"392:2:0"},"returnParameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12,"src":"418:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4,"name":"uint16","nodeType":"ElementaryTypeName","src":"418:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12,"src":"426:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6,"name":"uint32","nodeType":"ElementaryTypeName","src":"426:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":10,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12,"src":"434:16:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":8,"name":"bytes32","nodeType":"ElementaryTypeName","src":"434:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":9,"nodeType":"ArrayTypeName","src":"434:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"417:34:0"},"scope":95,"src":"367:85:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"456:1511:0","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":28,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"1979:18:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"keyHash","nameLocation":"2011:7:0","nodeType":"VariableDeclaration","scope":28,"src":"2003:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":14,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":17,"mutability":"mutable","name":"subId","nameLocation":"2031:5:0","nodeType":"VariableDeclaration","scope":28,"src":"2024:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":16,"name":"uint64","nodeType":"ElementaryTypeName","src":"2024:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2049:27:0","nodeType":"VariableDeclaration","scope":28,"src":"2042:34:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":18,"name":"uint16","nodeType":"ElementaryTypeName","src":"2042:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":21,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2089:16:0","nodeType":"VariableDeclaration","scope":28,"src":"2082:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":20,"name":"uint32","nodeType":"ElementaryTypeName","src":"2082:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"numWords","nameLocation":"2118:8:0","nodeType":"VariableDeclaration","scope":28,"src":"2111:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":22,"name":"uint32","nodeType":"ElementaryTypeName","src":"2111:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1997:133:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"requestId","nameLocation":"2157:9:0","nodeType":"VariableDeclaration","scope":28,"src":"2149:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2148:19:0"},"scope":95,"src":"1970:198:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"2172:384:0","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":34,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2568:18:0","nodeType":"FunctionDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"2586:2:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"subId","nameLocation":"2614:5:0","nodeType":"VariableDeclaration","scope":34,"src":"2607:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":31,"name":"uint64","nodeType":"ElementaryTypeName","src":"2607:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2606:14:0"},"scope":95,"src":"2559:62:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"2625:381:0","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":49,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3018:15:0","nodeType":"FunctionDefinition","parameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"subId","nameLocation":"3046:5:0","nodeType":"VariableDeclaration","scope":49,"src":"3039:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":36,"name":"uint64","nodeType":"ElementaryTypeName","src":"3039:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3033:22:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"balance","nameLocation":"3086:7:0","nodeType":"VariableDeclaration","scope":49,"src":"3079:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":39,"name":"uint96","nodeType":"ElementaryTypeName","src":"3079:6:0","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"reqCount","nameLocation":"3102:8:0","nodeType":"VariableDeclaration","scope":49,"src":"3095:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":41,"name":"uint64","nodeType":"ElementaryTypeName","src":"3095:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"owner","nameLocation":"3120:5:0","nodeType":"VariableDeclaration","scope":49,"src":"3112:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"3112:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":47,"mutability":"mutable","name":"consumers","nameLocation":"3144:9:0","nodeType":"VariableDeclaration","scope":49,"src":"3127:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"3127:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":46,"nodeType":"ArrayTypeName","src":"3127:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3078:76:0"},"scope":95,"src":"3009:146:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"3159:164:0","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":57,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3335:32:0","nodeType":"FunctionDefinition","parameters":{"id":55,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"subId","nameLocation":"3375:5:0","nodeType":"VariableDeclaration","scope":57,"src":"3368:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":51,"name":"uint64","nodeType":"ElementaryTypeName","src":"3368:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":54,"mutability":"mutable","name":"newOwner","nameLocation":"3390:8:0","nodeType":"VariableDeclaration","scope":57,"src":"3382:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"3382:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3367:32:0"},"returnParameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"3408:0:0"},"scope":95,"src":"3326:83:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"3413:212:0","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":63,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3637:31:0","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"subId","nameLocation":"3676:5:0","nodeType":"VariableDeclaration","scope":63,"src":"3669:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":59,"name":"uint64","nodeType":"ElementaryTypeName","src":"3669:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3668:14:0"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[],"src":"3691:0:0"},"scope":95,"src":"3628:64:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"3696:170:0","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":71,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3878:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"subId","nameLocation":"3897:5:0","nodeType":"VariableDeclaration","scope":71,"src":"3890:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":65,"name":"uint64","nodeType":"ElementaryTypeName","src":"3890:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"consumer","nameLocation":"3912:8:0","nodeType":"VariableDeclaration","scope":71,"src":"3904:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3889:32:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"3930:0:0"},"scope":95,"src":"3869:62:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":72,"nodeType":"StructuredDocumentation","src":"3935:172:0","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":79,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4119:14:0","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"subId","nameLocation":"4141:5:0","nodeType":"VariableDeclaration","scope":79,"src":"4134:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":73,"name":"uint64","nodeType":"ElementaryTypeName","src":"4134:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"consumer","nameLocation":"4156:8:0","nodeType":"VariableDeclaration","scope":79,"src":"4148:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"4148:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4133:32:0"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[],"src":"4174:0:0"},"scope":95,"src":"4110:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"4179:140:0","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":87,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4331:18:0","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"subId","nameLocation":"4357:5:0","nodeType":"VariableDeclaration","scope":87,"src":"4350:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":81,"name":"uint64","nodeType":"ElementaryTypeName","src":"4350:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"to","nameLocation":"4372:2:0","nodeType":"VariableDeclaration","scope":87,"src":"4364:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"4364:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4349:26:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"4384:0:0"},"scope":95,"src":"4322:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":94,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4690:20:0","nodeType":"FunctionDefinition","parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"subId","nameLocation":"4718:5:0","nodeType":"VariableDeclaration","scope":94,"src":"4711:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":88,"name":"uint64","nodeType":"ElementaryTypeName","src":"4711:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4710:14:0"},"returnParameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"4748:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":91,"name":"bool","nodeType":"ElementaryTypeName","src":"4748:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4747:6:0"},"scope":95,"src":"4681:73:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":96,"src":"57:4699:0","usedErrors":[],"usedEvents":[]}],"src":"32:4725:0"},"id":0},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol","exportedSymbols":{"ConfirmedOwner":[1045],"ConfirmedOwnerWithProposal":[1207],"IOwnable":[1223],"LinkTokenInterface":[1318],"VRFConsumerBaseV2":[1376],"VRFCoordinatorV2Interface":[95],"VRFCoordinatorV2Mock":[1025]},"id":1026,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":97,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"92:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","file":"../shared/interfaces/LinkTokenInterface.sol","id":98,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1026,"sourceUnit":1319,"src":"117:53:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"../interfaces/VRFCoordinatorV2Interface.sol","id":99,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1026,"sourceUnit":96,"src":"171:53:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"../vrf/VRFConsumerBaseV2.sol","id":100,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1026,"sourceUnit":1377,"src":"225:38:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","file":"../shared/access/ConfirmedOwner.sol","id":101,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1026,"sourceUnit":1046,"src":"264:45:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":102,"name":"VRFCoordinatorV2Interface","nameLocations":["344:25:1"],"nodeType":"IdentifierPath","referencedDeclaration":95,"src":"344:25:1"},"id":103,"nodeType":"InheritanceSpecifier","src":"344:25:1"},{"baseName":{"id":104,"name":"ConfirmedOwner","nameLocations":["371:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":1045,"src":"371:14:1"},"id":105,"nodeType":"InheritanceSpecifier","src":"371:14:1"}],"canonicalName":"VRFCoordinatorV2Mock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1025,"linearizedBaseContracts":[1025,1045,1207,1223,95],"name":"VRFCoordinatorV2Mock","nameLocation":"320:20:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"3d18651e","id":107,"mutability":"immutable","name":"BASE_FEE","nameLocation":"414:8:1","nodeType":"VariableDeclaration","scope":1025,"src":"390:32:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":106,"name":"uint96","nodeType":"ElementaryTypeName","src":"390:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"public"},{"constant":false,"functionSelector":"a410347f","id":109,"mutability":"immutable","name":"GAS_PRICE_LINK","nameLocation":"450:14:1","nodeType":"VariableDeclaration","scope":1025,"src":"426:38:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":108,"name":"uint96","nodeType":"ElementaryTypeName","src":"426:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"public"},{"constant":false,"functionSelector":"64d51a2a","id":112,"mutability":"immutable","name":"MAX_CONSUMERS","nameLocation":"492:13:1","nodeType":"VariableDeclaration","scope":1025,"src":"468:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":110,"name":"uint16","nodeType":"ElementaryTypeName","src":"468:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"313030","id":111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"508:3:1","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"errorSelector":"1f6a65b6","id":114,"name":"InvalidSubscription","nameLocation":"522:19:1","nodeType":"ErrorDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[],"src":"541:2:1"},"src":"516:28:1"},{"errorSelector":"f4d678b8","id":116,"name":"InsufficientBalance","nameLocation":"553:19:1","nodeType":"ErrorDefinition","parameters":{"id":115,"nodeType":"ParameterList","parameters":[],"src":"572:2:1"},"src":"547:28:1"},{"errorSelector":"d8a3fb52","id":120,"name":"MustBeSubOwner","nameLocation":"584:14:1","nodeType":"ErrorDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"owner","nameLocation":"607:5:1","nodeType":"VariableDeclaration","scope":120,"src":"599:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"599:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"598:15:1"},"src":"578:36:1"},{"errorSelector":"05a48e0f","id":122,"name":"TooManyConsumers","nameLocation":"623:16:1","nodeType":"ErrorDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"639:2:1"},"src":"617:25:1"},{"errorSelector":"71e83137","id":124,"name":"InvalidConsumer","nameLocation":"651:15:1","nodeType":"ErrorDefinition","parameters":{"id":123,"nodeType":"ParameterList","parameters":[],"src":"666:2:1"},"src":"645:24:1"},{"errorSelector":"3f3df5b6","id":126,"name":"InvalidRandomWords","nameLocation":"678:18:1","nodeType":"ErrorDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"696:2:1"},"src":"672:27:1"},{"errorSelector":"ed3ba6a6","id":128,"name":"Reentrant","nameLocation":"708:9:1","nodeType":"ErrorDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"717:2:1"},"src":"702:18:1"},{"anonymous":false,"eventSelector":"63373d1c4696214b898952999c9aaec57dac1ee2723cec59bea6888f489a9772","id":146,"name":"RandomWordsRequested","nameLocation":"730:20:1","nodeType":"EventDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"indexed":true,"mutability":"mutable","name":"keyHash","nameLocation":"772:7:1","nodeType":"VariableDeclaration","scope":146,"src":"756:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":129,"name":"bytes32","nodeType":"ElementaryTypeName","src":"756:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":132,"indexed":false,"mutability":"mutable","name":"requestId","nameLocation":"793:9:1","nodeType":"VariableDeclaration","scope":146,"src":"785:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":131,"name":"uint256","nodeType":"ElementaryTypeName","src":"785:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":134,"indexed":false,"mutability":"mutable","name":"preSeed","nameLocation":"816:7:1","nodeType":"VariableDeclaration","scope":146,"src":"808:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"808:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":136,"indexed":true,"mutability":"mutable","name":"subId","nameLocation":"844:5:1","nodeType":"VariableDeclaration","scope":146,"src":"829:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":135,"name":"uint64","nodeType":"ElementaryTypeName","src":"829:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":138,"indexed":false,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"862:27:1","nodeType":"VariableDeclaration","scope":146,"src":"855:34:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":137,"name":"uint16","nodeType":"ElementaryTypeName","src":"855:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":140,"indexed":false,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"902:16:1","nodeType":"VariableDeclaration","scope":146,"src":"895:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":139,"name":"uint32","nodeType":"ElementaryTypeName","src":"895:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":142,"indexed":false,"mutability":"mutable","name":"numWords","nameLocation":"931:8:1","nodeType":"VariableDeclaration","scope":146,"src":"924:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":141,"name":"uint32","nodeType":"ElementaryTypeName","src":"924:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":144,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"961:6:1","nodeType":"VariableDeclaration","scope":146,"src":"945:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":143,"name":"address","nodeType":"ElementaryTypeName","src":"945:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"750:221:1"},"src":"724:248:1"},{"anonymous":false,"eventSelector":"7dffc5ae5ee4e2e4df1651cf6ad329a73cebdb728f37ea0187b9b17e036756e4","id":156,"name":"RandomWordsFulfilled","nameLocation":"981:20:1","nodeType":"EventDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":148,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1018:9:1","nodeType":"VariableDeclaration","scope":156,"src":"1002:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":147,"name":"uint256","nodeType":"ElementaryTypeName","src":"1002:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":150,"indexed":false,"mutability":"mutable","name":"outputSeed","nameLocation":"1037:10:1","nodeType":"VariableDeclaration","scope":156,"src":"1029:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":149,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":152,"indexed":false,"mutability":"mutable","name":"payment","nameLocation":"1056:7:1","nodeType":"VariableDeclaration","scope":156,"src":"1049:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":151,"name":"uint96","nodeType":"ElementaryTypeName","src":"1049:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":154,"indexed":false,"mutability":"mutable","name":"success","nameLocation":"1070:7:1","nodeType":"VariableDeclaration","scope":156,"src":"1065:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":153,"name":"bool","nodeType":"ElementaryTypeName","src":"1065:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1001:77:1"},"src":"975:104:1"},{"anonymous":false,"eventSelector":"464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf","id":162,"name":"SubscriptionCreated","nameLocation":"1088:19:1","nodeType":"EventDefinition","parameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":158,"indexed":true,"mutability":"mutable","name":"subId","nameLocation":"1123:5:1","nodeType":"VariableDeclaration","scope":162,"src":"1108:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":157,"name":"uint64","nodeType":"ElementaryTypeName","src":"1108:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":160,"indexed":false,"mutability":"mutable","name":"owner","nameLocation":"1138:5:1","nodeType":"VariableDeclaration","scope":162,"src":"1130:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":159,"name":"address","nodeType":"ElementaryTypeName","src":"1130:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1107:37:1"},"src":"1082:63:1"},{"anonymous":false,"eventSelector":"d39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8","id":170,"name":"SubscriptionFunded","nameLocation":"1154:18:1","nodeType":"EventDefinition","parameters":{"id":169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"indexed":true,"mutability":"mutable","name":"subId","nameLocation":"1188:5:1","nodeType":"VariableDeclaration","scope":170,"src":"1173:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":163,"name":"uint64","nodeType":"ElementaryTypeName","src":"1173:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":166,"indexed":false,"mutability":"mutable","name":"oldBalance","nameLocation":"1203:10:1","nodeType":"VariableDeclaration","scope":170,"src":"1195:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint256","nodeType":"ElementaryTypeName","src":"1195:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":168,"indexed":false,"mutability":"mutable","name":"newBalance","nameLocation":"1223:10:1","nodeType":"VariableDeclaration","scope":170,"src":"1215:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint256","nodeType":"ElementaryTypeName","src":"1215:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1172:62:1"},"src":"1148:87:1"},{"anonymous":false,"eventSelector":"e8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd49815","id":178,"name":"SubscriptionCanceled","nameLocation":"1244:20:1","nodeType":"EventDefinition","parameters":{"id":177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"indexed":true,"mutability":"mutable","name":"subId","nameLocation":"1280:5:1","nodeType":"VariableDeclaration","scope":178,"src":"1265:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":171,"name":"uint64","nodeType":"ElementaryTypeName","src":"1265:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":174,"indexed":false,"mutability":"mutable","name":"to","nameLocation":"1295:2:1","nodeType":"VariableDeclaration","scope":178,"src":"1287:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"1287:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":176,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1307:6:1","nodeType":"VariableDeclaration","scope":178,"src":"1299:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":175,"name":"uint256","nodeType":"ElementaryTypeName","src":"1299:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1264:50:1"},"src":"1238:77:1"},{"anonymous":false,"eventSelector":"752ead9f4536ec1319ee3a5a604e1d65eded22e0924251552ba14ae4faa1bbc3","id":184,"name":"ConsumerAdded","nameLocation":"1324:13:1","nodeType":"EventDefinition","parameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":180,"indexed":true,"mutability":"mutable","name":"subId","nameLocation":"1353:5:1","nodeType":"VariableDeclaration","scope":184,"src":"1338:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":179,"name":"uint64","nodeType":"ElementaryTypeName","src":"1338:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":182,"indexed":false,"mutability":"mutable","name":"consumer","nameLocation":"1368:8:1","nodeType":"VariableDeclaration","scope":184,"src":"1360:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":181,"name":"address","nodeType":"ElementaryTypeName","src":"1360:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1337:40:1"},"src":"1318:60:1"},{"anonymous":false,"eventSelector":"f9bc9d5b5733d904409def43a5ecc888dbdac9a95687780d8fd489d3bb3813fc","id":190,"name":"ConsumerRemoved","nameLocation":"1387:15:1","nodeType":"EventDefinition","parameters":{"id":189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"indexed":true,"mutability":"mutable","name":"subId","nameLocation":"1418:5:1","nodeType":"VariableDeclaration","scope":190,"src":"1403:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":185,"name":"uint64","nodeType":"ElementaryTypeName","src":"1403:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":188,"indexed":false,"mutability":"mutable","name":"consumer","nameLocation":"1433:8:1","nodeType":"VariableDeclaration","scope":190,"src":"1425:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":187,"name":"address","nodeType":"ElementaryTypeName","src":"1425:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1402:40:1"},"src":"1381:62:1"},{"anonymous":false,"eventSelector":"4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be","id":192,"name":"ConfigSet","nameLocation":"1452:9:1","nodeType":"EventDefinition","parameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1461:2:1"},"src":"1446:18:1"},{"canonicalName":"VRFCoordinatorV2Mock.Config","id":195,"members":[{"constant":false,"id":194,"mutability":"mutable","name":"reentrancyLock","nameLocation":"1523:14:1","nodeType":"VariableDeclaration","scope":195,"src":"1518:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":193,"name":"bool","nodeType":"ElementaryTypeName","src":"1518:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Config","nameLocation":"1475:6:1","nodeType":"StructDefinition","scope":1025,"src":"1468:74:1","visibility":"public"},{"constant":false,"id":198,"mutability":"mutable","name":"s_config","nameLocation":"1560:8:1","nodeType":"VariableDeclaration","scope":1025,"src":"1545:23:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_storage","typeString":"struct VRFCoordinatorV2Mock.Config"},"typeName":{"id":197,"nodeType":"UserDefinedTypeName","pathNode":{"id":196,"name":"Config","nameLocations":["1545:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"1545:6:1"},"referencedDeclaration":195,"src":"1545:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_storage_ptr","typeString":"struct VRFCoordinatorV2Mock.Config"}},"visibility":"private"},{"constant":false,"id":200,"mutability":"mutable","name":"s_currentSubId","nameLocation":"1579:14:1","nodeType":"VariableDeclaration","scope":1025,"src":"1572:21:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":199,"name":"uint64","nodeType":"ElementaryTypeName","src":"1572:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":203,"mutability":"mutable","name":"s_nextRequestId","nameLocation":"1605:15:1","nodeType":"VariableDeclaration","scope":1025,"src":"1597:27:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":201,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1623:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"s_nextPreSeed","nameLocation":"1636:13:1","nodeType":"VariableDeclaration","scope":1025,"src":"1628:27:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":204,"name":"uint256","nodeType":"ElementaryTypeName","src":"1628:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1652:3:1","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"canonicalName":"VRFCoordinatorV2Mock.Subscription","id":211,"members":[{"constant":false,"id":208,"mutability":"mutable","name":"owner","nameLocation":"1693:5:1","nodeType":"VariableDeclaration","scope":211,"src":"1685:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"1685:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"balance","nameLocation":"1711:7:1","nodeType":"VariableDeclaration","scope":211,"src":"1704:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":209,"name":"uint96","nodeType":"ElementaryTypeName","src":"1704:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"name":"Subscription","nameLocation":"1666:12:1","nodeType":"StructDefinition","scope":1025,"src":"1659:64:1","visibility":"public"},{"constant":false,"id":216,"mutability":"mutable","name":"s_subscriptions","nameLocation":"1758:15:1","nodeType":"VariableDeclaration","scope":1025,"src":"1726:47:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription)"},"typeName":{"id":215,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":212,"name":"uint64","nodeType":"ElementaryTypeName","src":"1734:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"1726:31:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":214,"nodeType":"UserDefinedTypeName","pathNode":{"id":213,"name":"Subscription","nameLocations":["1744:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":211,"src":"1744:12:1"},"referencedDeclaration":211,"src":"1744:12:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage_ptr","typeString":"struct VRFCoordinatorV2Mock.Subscription"}}},"visibility":"internal"},{"constant":false,"id":221,"mutability":"mutable","name":"s_consumers","nameLocation":"1837:11:1","nodeType":"VariableDeclaration","scope":1025,"src":"1808:40:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint64 => address[])"},"typeName":{"id":220,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":217,"name":"uint64","nodeType":"ElementaryTypeName","src":"1816:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Mapping","src":"1808:28:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint64 => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":218,"name":"address","nodeType":"ElementaryTypeName","src":"1826:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":219,"nodeType":"ArrayTypeName","src":"1826:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"internal"},{"canonicalName":"VRFCoordinatorV2Mock.Request","id":228,"members":[{"constant":false,"id":223,"mutability":"mutable","name":"subId","nameLocation":"1909:5:1","nodeType":"VariableDeclaration","scope":228,"src":"1902:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":222,"name":"uint64","nodeType":"ElementaryTypeName","src":"1902:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":225,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1927:16:1","nodeType":"VariableDeclaration","scope":228,"src":"1920:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":224,"name":"uint32","nodeType":"ElementaryTypeName","src":"1920:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":227,"mutability":"mutable","name":"numWords","nameLocation":"1956:8:1","nodeType":"VariableDeclaration","scope":228,"src":"1949:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":226,"name":"uint32","nodeType":"ElementaryTypeName","src":"1949:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"name":"Request","nameLocation":"1888:7:1","nodeType":"StructDefinition","scope":1025,"src":"1881:88:1","visibility":"public"},{"constant":false,"id":233,"mutability":"mutable","name":"s_requests","nameLocation":"2000:10:1","nodeType":"VariableDeclaration","scope":1025,"src":"1972:38:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Request_$228_storage_$","typeString":"mapping(uint256 => struct VRFCoordinatorV2Mock.Request)"},"typeName":{"id":232,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":229,"name":"uint256","nodeType":"ElementaryTypeName","src":"1980:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1972:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Request_$228_storage_$","typeString":"mapping(uint256 => struct VRFCoordinatorV2Mock.Request)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":231,"nodeType":"UserDefinedTypeName","pathNode":{"id":230,"name":"Request","nameLocations":["1991:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":228,"src":"1991:7:1"},"referencedDeclaration":228,"src":"1991:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage_ptr","typeString":"struct VRFCoordinatorV2Mock.Request"}}},"visibility":"internal"},{"body":{"id":255,"nodeType":"Block","src":"2123:83:1","statements":[{"expression":{"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":244,"name":"BASE_FEE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"2129:8:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":245,"name":"_baseFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2140:8:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"2129:19:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":247,"nodeType":"ExpressionStatement","src":"2129:19:1"},{"expression":{"id":250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":248,"name":"GAS_PRICE_LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"2154:14:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":249,"name":"_gasPriceLink","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":237,"src":"2171:13:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"2154:30:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":251,"nodeType":"ExpressionStatement","src":"2154:30:1"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":252,"name":"setConfig","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"2190:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2190:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":254,"nodeType":"ExpressionStatement","src":"2190:11:1"}]},"id":256,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":240,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2111:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2115:6:1","memberName":"sender","nodeType":"MemberAccess","src":"2111:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":242,"kind":"baseConstructorSpecifier","modifierName":{"id":239,"name":"ConfirmedOwner","nameLocations":["2096:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":1045,"src":"2096:14:1"},"nodeType":"ModifierInvocation","src":"2096:26:1"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":235,"mutability":"mutable","name":"_baseFee","nameLocation":"2064:8:1","nodeType":"VariableDeclaration","scope":256,"src":"2057:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":234,"name":"uint96","nodeType":"ElementaryTypeName","src":"2057:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":237,"mutability":"mutable","name":"_gasPriceLink","nameLocation":"2081:13:1","nodeType":"VariableDeclaration","scope":256,"src":"2074:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":236,"name":"uint96","nodeType":"ElementaryTypeName","src":"2074:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"2056:39:1"},"returnParameters":{"id":243,"nodeType":"ParameterList","parameters":[],"src":"2123:0:1"},"scope":1025,"src":"2045:161:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":271,"nodeType":"Block","src":"2326:75:1","statements":[{"expression":{"id":266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":262,"name":"s_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"2332:8:1","typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_storage","typeString":"struct VRFCoordinatorV2Mock.Config storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"66616c7365","id":264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2367:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":263,"name":"Config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2343:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Config_$195_storage_ptr_$","typeString":"type(struct VRFCoordinatorV2Mock.Config storage pointer)"}},"id":265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2351:14:1"],"names":["reentrancyLock"],"nodeType":"FunctionCall","src":"2343:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Config memory"}},"src":"2332:42:1","typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_storage","typeString":"struct VRFCoordinatorV2Mock.Config storage ref"}},"id":267,"nodeType":"ExpressionStatement","src":"2332:42:1"},{"eventCall":{"arguments":[],"expression":{"argumentTypes":[],"id":268,"name":"ConfigSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2385:9:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$__$returns$__$","typeString":"function ()"}},"id":269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2385:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":270,"nodeType":"EmitStatement","src":"2380:16:1"}]},"documentation":{"id":257,"nodeType":"StructuredDocumentation","src":"2210:75:1","text":" @notice Sets the configuration of the vrfv2 mock coordinator"},"functionSelector":"8b673e7a","id":272,"implemented":true,"kind":"function","modifiers":[{"id":260,"kind":"modifierInvocation","modifierName":{"id":259,"name":"onlyOwner","nameLocations":["2316:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":1206,"src":"2316:9:1"},"nodeType":"ModifierInvocation","src":"2316:9:1"}],"name":"setConfig","nameLocation":"2297:9:1","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"2306:2:1"},"returnParameters":{"id":261,"nodeType":"ParameterList","parameters":[],"src":"2326:0:1"},"scope":1025,"src":"2288:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":314,"nodeType":"Block","src":"2491:204:1","statements":[{"assignments":[285],"declarations":[{"constant":false,"id":285,"mutability":"mutable","name":"consumers","nameLocation":"2514:9:1","nodeType":"VariableDeclaration","scope":314,"src":"2497:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"2497:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":284,"nodeType":"ArrayTypeName","src":"2497:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":289,"initialValue":{"baseExpression":{"id":286,"name":"s_consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"2526:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint64 => address[] storage ref)"}},"id":288,"indexExpression":{"id":287,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"2538:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2526:19:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2497:48:1"},{"body":{"id":310,"nodeType":"Block","src":"2598:75:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":301,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"2610:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":303,"indexExpression":{"id":302,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"2620:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2610:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":304,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":276,"src":"2626:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2610:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":309,"nodeType":"IfStatement","src":"2606:61:1","trueBody":{"id":308,"nodeType":"Block","src":"2637:30:1","statements":[{"expression":{"hexValue":"74727565","id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2654:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":280,"id":307,"nodeType":"Return","src":"2647:11:1"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":294,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"2571:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":295,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"2575:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2585:6:1","memberName":"length","nodeType":"MemberAccess","src":"2575:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2571:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":311,"initializationExpression":{"assignments":[291],"declarations":[{"constant":false,"id":291,"mutability":"mutable","name":"i","nameLocation":"2564:1:1","nodeType":"VariableDeclaration","scope":311,"src":"2556:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":290,"name":"uint256","nodeType":"ElementaryTypeName","src":"2556:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":293,"initialValue":{"hexValue":"30","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2568:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2556:13:1"},"loopExpression":{"expression":{"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2593:3:1","subExpression":{"id":298,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"2593:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":300,"nodeType":"ExpressionStatement","src":"2593:3:1"},"nodeType":"ForStatement","src":"2551:122:1"},{"expression":{"hexValue":"66616c7365","id":312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2685:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":280,"id":313,"nodeType":"Return","src":"2678:12:1"}]},"functionSelector":"ed5eb06d","id":315,"implemented":true,"kind":"function","modifiers":[],"name":"consumerIsAdded","nameLocation":"2414:15:1","nodeType":"FunctionDefinition","parameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"_subId","nameLocation":"2437:6:1","nodeType":"VariableDeclaration","scope":315,"src":"2430:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":273,"name":"uint64","nodeType":"ElementaryTypeName","src":"2430:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":276,"mutability":"mutable","name":"_consumer","nameLocation":"2453:9:1","nodeType":"VariableDeclaration","scope":315,"src":"2445:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":275,"name":"address","nodeType":"ElementaryTypeName","src":"2445:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2429:34:1"},"returnParameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":315,"src":"2485:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":278,"name":"bool","nodeType":"ElementaryTypeName","src":"2485:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2484:6:1"},"scope":1025,"src":"2405:290:1","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":332,"nodeType":"Block","src":"2760:97:1","statements":[{"condition":{"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2770:35:1","subExpression":{"arguments":[{"id":322,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"2787:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":323,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"2795:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":321,"name":"consumerIsAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"2771:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_bool_$","typeString":"function (uint64,address) view returns (bool)"}},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2771:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":330,"nodeType":"IfStatement","src":"2766:80:1","trueBody":{"id":329,"nodeType":"Block","src":"2807:39:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":326,"name":"InvalidConsumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":124,"src":"2822:15:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2822:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":328,"nodeType":"RevertStatement","src":"2815:24:1"}]}},{"id":331,"nodeType":"PlaceholderStatement","src":"2851:1:1"}]},"id":333,"name":"onlyValidConsumer","nameLocation":"2708:17:1","nodeType":"ModifierDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"_subId","nameLocation":"2733:6:1","nodeType":"VariableDeclaration","scope":333,"src":"2726:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":316,"name":"uint64","nodeType":"ElementaryTypeName","src":"2726:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"_consumer","nameLocation":"2749:9:1","nodeType":"VariableDeclaration","scope":333,"src":"2741:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"2741:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2725:34:1"},"src":"2699:158:1","virtual":false,"visibility":"internal"},{"body":{"id":353,"nodeType":"Block","src":"3500:82:1","statements":[{"expression":{"arguments":[{"id":344,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"3537:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":345,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"3549:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3574:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3560:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"3564:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":347,"nodeType":"ArrayTypeName","src":"3564:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3560:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":343,"name":"fulfillRandomWordsWithOverride","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"3506:30:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,address,uint256[] memory)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3506:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":352,"nodeType":"ExpressionStatement","src":"3506:71:1"}]},"documentation":{"id":334,"nodeType":"StructuredDocumentation","src":"2861:547:1","text":" @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n @notice consumer.\n @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n @dev against the real coordinator a small amount of additional LINK is required.\n @param _requestId the request to fulfill\n @param _consumer the VRF randomness consumer to send the result to"},"functionSelector":"808974ff","id":354,"implemented":true,"kind":"function","modifiers":[{"id":341,"kind":"modifierInvocation","modifierName":{"id":340,"name":"nonReentrant","nameLocations":["3487:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":979,"src":"3487:12:1"},"nodeType":"ModifierInvocation","src":"3487:12:1"}],"name":"fulfillRandomWords","nameLocation":"3420:18:1","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"_requestId","nameLocation":"3447:10:1","nodeType":"VariableDeclaration","scope":354,"src":"3439:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"3439:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"_consumer","nameLocation":"3467:9:1","nodeType":"VariableDeclaration","scope":354,"src":"3459:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"3459:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3438:39:1"},"returnParameters":{"id":342,"nodeType":"ParameterList","parameters":[],"src":"3500:0:1"},"scope":1025,"src":"3411:171:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":528,"nodeType":"Block","src":"3973:1088:1","statements":[{"assignments":[366],"declarations":[{"constant":false,"id":366,"mutability":"mutable","name":"startGas","nameLocation":"3987:8:1","nodeType":"VariableDeclaration","scope":528,"src":"3979:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":365,"name":"uint256","nodeType":"ElementaryTypeName","src":"3979:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":369,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":367,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"3998:7:1","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3998:9:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3979:28:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint64","typeString":"uint64"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":370,"name":"s_requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"4017:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Request_$228_storage_$","typeString":"mapping(uint256 => struct VRFCoordinatorV2Mock.Request storage ref)"}},"id":372,"indexExpression":{"id":371,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"4028:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4017:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage","typeString":"struct VRFCoordinatorV2Mock.Request storage ref"}},"id":373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4040:5:1","memberName":"subId","nodeType":"MemberAccess","referencedDeclaration":223,"src":"4017:28:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4049:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4017:33:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":381,"nodeType":"IfStatement","src":"4013:83:1","trueBody":{"id":380,"nodeType":"Block","src":"4052:44:1","statements":[{"expression":{"arguments":[{"hexValue":"6e6f6e6578697374656e742072657175657374","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4067:21:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0","typeString":"literal_string \"nonexistent request\""},"value":"nonexistent request"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0","typeString":"literal_string \"nonexistent request\""}],"id":376,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"4060:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4060:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":379,"nodeType":"ExpressionStatement","src":"4060:29:1"}]}},{"assignments":[384],"declarations":[{"constant":false,"id":384,"mutability":"mutable","name":"req","nameLocation":"4116:3:1","nodeType":"VariableDeclaration","scope":528,"src":"4101:18:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request"},"typeName":{"id":383,"nodeType":"UserDefinedTypeName","pathNode":{"id":382,"name":"Request","nameLocations":["4101:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":228,"src":"4101:7:1"},"referencedDeclaration":228,"src":"4101:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage_ptr","typeString":"struct VRFCoordinatorV2Mock.Request"}},"visibility":"internal"}],"id":388,"initialValue":{"baseExpression":{"id":385,"name":"s_requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"4122:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Request_$228_storage_$","typeString":"mapping(uint256 => struct VRFCoordinatorV2Mock.Request storage ref)"}},"id":387,"indexExpression":{"id":386,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"4133:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4122:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage","typeString":"struct VRFCoordinatorV2Mock.Request storage ref"}},"nodeType":"VariableDeclarationStatement","src":"4101:43:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":389,"name":"_words","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4155:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4162:6:1","memberName":"length","nodeType":"MemberAccess","src":"4155:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4172:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4155:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":431,"name":"_words","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4362:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4369:6:1","memberName":"length","nodeType":"MemberAccess","src":"4362:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":433,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4379:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request memory"}},"id":434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4383:8:1","memberName":"numWords","nodeType":"MemberAccess","referencedDeclaration":227,"src":"4379:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4362:29:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":440,"nodeType":"IfStatement","src":"4358:77:1","trueBody":{"id":439,"nodeType":"Block","src":"4393:42:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":436,"name":"InvalidRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4408:18:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4408:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":438,"nodeType":"RevertStatement","src":"4401:27:1"}]}},"id":441,"nodeType":"IfStatement","src":"4151:284:1","trueBody":{"id":430,"nodeType":"Block","src":"4175:177:1","statements":[{"expression":{"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":393,"name":"_words","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4183:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":397,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4206:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request memory"}},"id":398,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4210:8:1","memberName":"numWords","nodeType":"MemberAccess","referencedDeclaration":227,"src":"4206:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4192:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":394,"name":"uint256","nodeType":"ElementaryTypeName","src":"4196:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":395,"nodeType":"ArrayTypeName","src":"4196:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"4183:36:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":401,"nodeType":"ExpressionStatement","src":"4183:36:1"},{"body":{"id":428,"nodeType":"Block","src":"4270:76:1","statements":[{"expression":{"id":426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":413,"name":"_words","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4280:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":415,"indexExpression":{"id":414,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"4287:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4280:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":421,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"4321:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":422,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"4333:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":419,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4310:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":420,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4314:6:1","memberName":"encode","nodeType":"MemberAccess","src":"4310:10:1","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4310:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":418,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4300:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4300:36:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4292:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":416,"name":"uint256","nodeType":"ElementaryTypeName","src":"4292:7:1","typeDescriptions":{}}},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4292:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4280:57:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":427,"nodeType":"ExpressionStatement","src":"4280:57:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":406,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"4247:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":407,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4251:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request memory"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4255:8:1","memberName":"numWords","nodeType":"MemberAccess","referencedDeclaration":227,"src":"4251:12:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"4247:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":429,"initializationExpression":{"assignments":[403],"declarations":[{"constant":false,"id":403,"mutability":"mutable","name":"i","nameLocation":"4240:1:1","nodeType":"VariableDeclaration","scope":429,"src":"4232:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":405,"initialValue":{"hexValue":"30","id":404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4244:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4232:13:1"},"loopExpression":{"expression":{"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4265:3:1","subExpression":{"id":410,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"4265:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":412,"nodeType":"ExpressionStatement","src":"4265:3:1"},"nodeType":"ForStatement","src":"4227:119:1"}]}},{"assignments":[444],"declarations":[{"constant":false,"id":444,"mutability":"mutable","name":"v","nameLocation":"4459:1:1","nodeType":"VariableDeclaration","scope":528,"src":"4441:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBaseV2_$1376","typeString":"contract VRFConsumerBaseV2"},"typeName":{"id":443,"nodeType":"UserDefinedTypeName","pathNode":{"id":442,"name":"VRFConsumerBaseV2","nameLocations":["4441:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":1376,"src":"4441:17:1"},"referencedDeclaration":1376,"src":"4441:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBaseV2_$1376","typeString":"contract VRFConsumerBaseV2"}},"visibility":"internal"}],"id":445,"nodeType":"VariableDeclarationStatement","src":"4441:19:1"},{"assignments":[447],"declarations":[{"constant":false,"id":447,"mutability":"mutable","name":"callReq","nameLocation":"4479:7:1","nodeType":"VariableDeclaration","scope":528,"src":"4466:20:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":446,"name":"bytes","nodeType":"ElementaryTypeName","src":"4466:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":456,"initialValue":{"arguments":[{"expression":{"expression":{"id":450,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"4512:1:1","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBaseV2_$1376","typeString":"contract VRFConsumerBaseV2"}},"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4514:21:1","memberName":"rawFulfillRandomWords","nodeType":"MemberAccess","referencedDeclaration":1375,"src":"4512:23:1","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory) external"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4536:8:1","memberName":"selector","nodeType":"MemberAccess","src":"4512:32:1","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":453,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"4546:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":454,"name":"_words","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":362,"src":"4558:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"id":448,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4489:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4493:18:1","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4489:22:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4489:76:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4466:99:1"},{"expression":{"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":457,"name":"s_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"4571:8:1","typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_storage","typeString":"struct VRFCoordinatorV2Mock.Config storage ref"}},"id":459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4580:14:1","memberName":"reentrancyLock","nodeType":"MemberAccess","referencedDeclaration":194,"src":"4571:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4597:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4571:30:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":462,"nodeType":"ExpressionStatement","src":"4571:30:1"},{"assignments":[464,null],"declarations":[{"constant":false,"id":464,"mutability":"mutable","name":"success","nameLocation":"4613:7:1","nodeType":"VariableDeclaration","scope":528,"src":"4608:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":463,"name":"bool","nodeType":"ElementaryTypeName","src":"4608:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":472,"initialValue":{"arguments":[{"id":470,"name":"callReq","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":447,"src":"4668:7:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":465,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"4626:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4636:4:1","memberName":"call","nodeType":"MemberAccess","src":"4626:14:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["gas"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":467,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4646:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request memory"}},"id":468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4650:16:1","memberName":"callbackGasLimit","nodeType":"MemberAccess","referencedDeclaration":225,"src":"4646:20:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"src":"4626:41:1","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$gas","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4626:50:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4607:69:1"},{"expression":{"id":477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":473,"name":"s_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"4682:8:1","typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_storage","typeString":"struct VRFCoordinatorV2Mock.Config storage ref"}},"id":475,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4691:14:1","memberName":"reentrancyLock","nodeType":"MemberAccess","referencedDeclaration":194,"src":"4682:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4708:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4682:31:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":478,"nodeType":"ExpressionStatement","src":"4682:31:1"},{"assignments":[480],"declarations":[{"constant":false,"id":480,"mutability":"mutable","name":"payment","nameLocation":"4727:7:1","nodeType":"VariableDeclaration","scope":528,"src":"4720:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":479,"name":"uint96","nodeType":"ElementaryTypeName","src":"4720:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":494,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":483,"name":"BASE_FEE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":107,"src":"4744:8:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":484,"name":"startGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4757:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":485,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"4768:7:1","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4768:9:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4757:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":488,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4756:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":489,"name":"GAS_PRICE_LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"4781:14:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"4756:39:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":491,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4755:41:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4744:52:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4737:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint96_$","typeString":"type(uint96)"},"typeName":{"id":481,"name":"uint96","nodeType":"ElementaryTypeName","src":"4737:6:1","typeDescriptions":{}}},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4737:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"4720:77:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":495,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"4807:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":498,"indexExpression":{"expression":{"id":496,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4823:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request memory"}},"id":497,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4827:5:1","memberName":"subId","nodeType":"MemberAccess","referencedDeclaration":223,"src":"4823:9:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4807:26:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":499,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4834:7:1","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":210,"src":"4807:34:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":500,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"4844:7:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"4807:44:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":506,"nodeType":"IfStatement","src":"4803:93:1","trueBody":{"id":505,"nodeType":"Block","src":"4853:43:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":502,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"4868:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4868:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":504,"nodeType":"RevertStatement","src":"4861:28:1"}]}},{"expression":{"id":513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":507,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"4901:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":510,"indexExpression":{"expression":{"id":508,"name":"req","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4917:3:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request memory"}},"id":509,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4921:5:1","memberName":"subId","nodeType":"MemberAccess","referencedDeclaration":223,"src":"4917:9:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4901:26:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":511,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4928:7:1","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":210,"src":"4901:34:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":512,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"4939:7:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"4901:45:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":514,"nodeType":"ExpressionStatement","src":"4901:45:1"},{"expression":{"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4952:31:1","subExpression":{"components":[{"baseExpression":{"id":515,"name":"s_requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"4960:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Request_$228_storage_$","typeString":"mapping(uint256 => struct VRFCoordinatorV2Mock.Request storage ref)"}},"id":517,"indexExpression":{"id":516,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"4971:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4960:22:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage","typeString":"struct VRFCoordinatorV2Mock.Request storage ref"}}],"id":518,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"4959:24:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage","typeString":"struct VRFCoordinatorV2Mock.Request storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":520,"nodeType":"ExpressionStatement","src":"4952:31:1"},{"eventCall":{"arguments":[{"id":522,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"5015:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":523,"name":"_requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"5027:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":524,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":480,"src":"5039:7:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"id":525,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"5048:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":521,"name":"RandomWordsFulfilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"4994:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint96_$_t_bool_$returns$__$","typeString":"function (uint256,uint256,uint96,bool)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4994:62:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":527,"nodeType":"EmitStatement","src":"4989:67:1"}]},"documentation":{"id":355,"nodeType":"StructuredDocumentation","src":"3586:273:1","text":" @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n @param _requestId the request to fulfill\n @param _consumer the VRF randomness consumer to send the result to\n @param _words user-provided random words"},"functionSelector":"08e3898e","id":529,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWordsWithOverride","nameLocation":"3871:30:1","nodeType":"FunctionDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"_requestId","nameLocation":"3910:10:1","nodeType":"VariableDeclaration","scope":529,"src":"3902:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"3902:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"_consumer","nameLocation":"3930:9:1","nodeType":"VariableDeclaration","scope":529,"src":"3922:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":358,"name":"address","nodeType":"ElementaryTypeName","src":"3922:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":362,"mutability":"mutable","name":"_words","nameLocation":"3958:6:1","nodeType":"VariableDeclaration","scope":529,"src":"3941:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":360,"name":"uint256","nodeType":"ElementaryTypeName","src":"3941:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":361,"nodeType":"ArrayTypeName","src":"3941:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3901:64:1"},"returnParameters":{"id":364,"nodeType":"ParameterList","parameters":[],"src":"3973:0:1"},"scope":1025,"src":"3862:1199:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":573,"nodeType":"Block","src":"5327:278:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":537,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"5337:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":539,"indexExpression":{"id":538,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"5353:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5337:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":540,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5361:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":208,"src":"5337:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":542,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5370:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"5370:7:1","typeDescriptions":{}}},"id":544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5370:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5337:43:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":550,"nodeType":"IfStatement","src":"5333:92:1","trueBody":{"id":549,"nodeType":"Block","src":"5382:43:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":546,"name":"InvalidSubscription","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"5397:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5397:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":548,"nodeType":"RevertStatement","src":"5390:28:1"}]}},{"assignments":[552],"declarations":[{"constant":false,"id":552,"mutability":"mutable","name":"oldBalance","nameLocation":"5437:10:1","nodeType":"VariableDeclaration","scope":573,"src":"5430:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":551,"name":"uint96","nodeType":"ElementaryTypeName","src":"5430:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"id":557,"initialValue":{"expression":{"baseExpression":{"id":553,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"5450:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":555,"indexExpression":{"id":554,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"5466:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5450:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":556,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5474:7:1","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":210,"src":"5450:31:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"VariableDeclarationStatement","src":"5430:51:1"},{"expression":{"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":558,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"5487:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":560,"indexExpression":{"id":559,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"5503:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5487:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5511:7:1","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":210,"src":"5487:31:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":562,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"5522:7:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"5487:42:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"id":564,"nodeType":"ExpressionStatement","src":"5487:42:1"},{"eventCall":{"arguments":[{"id":566,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"5559:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":567,"name":"oldBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"5567:10:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"commonType":{"typeIdentifier":"t_uint96","typeString":"uint96"},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":568,"name":"oldBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"5579:10:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":569,"name":"_amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":534,"src":"5592:7:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"src":"5579:20:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint96","typeString":"uint96"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":565,"name":"SubscriptionFunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"5540:18:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint64,uint256,uint256)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5540:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":572,"nodeType":"EmitStatement","src":"5535:65:1"}]},"documentation":{"id":530,"nodeType":"StructuredDocumentation","src":"5065:195:1","text":" @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n @param _subId the subscription to fund\n @param _amount the amount to fund"},"functionSelector":"afc69b53","id":574,"implemented":true,"kind":"function","modifiers":[],"name":"fundSubscription","nameLocation":"5272:16:1","nodeType":"FunctionDefinition","parameters":{"id":535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":532,"mutability":"mutable","name":"_subId","nameLocation":"5296:6:1","nodeType":"VariableDeclaration","scope":574,"src":"5289:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":531,"name":"uint64","nodeType":"ElementaryTypeName","src":"5289:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":534,"mutability":"mutable","name":"_amount","nameLocation":"5311:7:1","nodeType":"VariableDeclaration","scope":574,"src":"5304:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":533,"name":"uint96","nodeType":"ElementaryTypeName","src":"5304:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"}],"src":"5288:31:1"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[],"src":"5327:0:1"},"scope":1025,"src":"5263:342:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[28],"body":{"id":645,"nodeType":"Block","src":"5862:516:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":597,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"5872:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":599,"indexExpression":{"id":598,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"5888:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5872:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":600,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5896:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":208,"src":"5872:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5913:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":602,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5905:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":601,"name":"address","nodeType":"ElementaryTypeName","src":"5905:7:1","typeDescriptions":{}}},"id":604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5872:43:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":610,"nodeType":"IfStatement","src":"5868:92:1","trueBody":{"id":609,"nodeType":"Block","src":"5917:43:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":606,"name":"InvalidSubscription","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"5932:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5932:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":608,"nodeType":"RevertStatement","src":"5925:28:1"}]}},{"assignments":[612],"declarations":[{"constant":false,"id":612,"mutability":"mutable","name":"requestId","nameLocation":"5974:9:1","nodeType":"VariableDeclaration","scope":645,"src":"5966:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":611,"name":"uint256","nodeType":"ElementaryTypeName","src":"5966:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":615,"initialValue":{"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5986:17:1","subExpression":{"id":613,"name":"s_nextRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":203,"src":"5986:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5966:37:1"},{"assignments":[617],"declarations":[{"constant":false,"id":617,"mutability":"mutable","name":"preSeed","nameLocation":"6017:7:1","nodeType":"VariableDeclaration","scope":645,"src":"6009:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"6009:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":620,"initialValue":{"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6027:15:1","subExpression":{"id":618,"name":"s_nextPreSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"6027:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6009:33:1"},{"expression":{"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":621,"name":"s_requests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"6049:10:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Request_$228_storage_$","typeString":"mapping(uint256 => struct VRFCoordinatorV2Mock.Request storage ref)"}},"id":623,"indexExpression":{"id":622,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"6060:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6049:21:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage","typeString":"struct VRFCoordinatorV2Mock.Request storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":625,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"6089:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":626,"name":"_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"6115:17:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":627,"name":"_numWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"6144:9:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":624,"name":"Request","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"6073:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Request_$228_storage_ptr_$","typeString":"type(struct VRFCoordinatorV2Mock.Request storage pointer)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["6082:5:1","6097:16:1","6134:8:1"],"names":["subId","callbackGasLimit","numWords"],"nodeType":"FunctionCall","src":"6073:82:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Request memory"}},"src":"6049:106:1","typeDescriptions":{"typeIdentifier":"t_struct$_Request_$228_storage","typeString":"struct VRFCoordinatorV2Mock.Request storage ref"}},"id":630,"nodeType":"ExpressionStatement","src":"6049:106:1"},{"eventCall":{"arguments":[{"id":632,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"6195:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":633,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"6211:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":634,"name":"preSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"6228:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":635,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"6243:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":636,"name":"_minimumRequestConfirmations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"6257:28:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":637,"name":"_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"6293:17:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":638,"name":"_numWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"6318:9:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"expression":{"id":639,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6335:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6339:6:1","memberName":"sender","nodeType":"MemberAccess","src":"6335:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":631,"name":"RandomWordsRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"6167:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$_t_address_$returns$__$","typeString":"function (bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6167:184:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":642,"nodeType":"EmitStatement","src":"6162:189:1"},{"expression":{"id":643,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"6364:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":596,"id":644,"nodeType":"Return","src":"6357:16:1"}]},"functionSelector":"5d3b1d30","id":646,"implemented":true,"kind":"function","modifiers":[{"id":588,"kind":"modifierInvocation","modifierName":{"id":587,"name":"nonReentrant","nameLocations":["5793:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":979,"src":"5793:12:1"},"nodeType":"ModifierInvocation","src":"5793:12:1"},{"arguments":[{"id":590,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":578,"src":"5824:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"expression":{"id":591,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5832:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5836:6:1","memberName":"sender","nodeType":"MemberAccess","src":"5832:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":593,"kind":"modifierInvocation","modifierName":{"id":589,"name":"onlyValidConsumer","nameLocations":["5806:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":333,"src":"5806:17:1"},"nodeType":"ModifierInvocation","src":"5806:37:1"}],"name":"requestRandomWords","nameLocation":"5618:18:1","nodeType":"FunctionDefinition","overrides":{"id":586,"nodeType":"OverrideSpecifier","overrides":[],"src":"5784:8:1"},"parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":576,"mutability":"mutable","name":"_keyHash","nameLocation":"5650:8:1","nodeType":"VariableDeclaration","scope":646,"src":"5642:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5642:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"_subId","nameLocation":"5671:6:1","nodeType":"VariableDeclaration","scope":646,"src":"5664:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":577,"name":"uint64","nodeType":"ElementaryTypeName","src":"5664:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":580,"mutability":"mutable","name":"_minimumRequestConfirmations","nameLocation":"5690:28:1","nodeType":"VariableDeclaration","scope":646,"src":"5683:35:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":579,"name":"uint16","nodeType":"ElementaryTypeName","src":"5683:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"_callbackGasLimit","nameLocation":"5731:17:1","nodeType":"VariableDeclaration","scope":646,"src":"5724:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":581,"name":"uint32","nodeType":"ElementaryTypeName","src":"5724:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"_numWords","nameLocation":"5761:9:1","nodeType":"VariableDeclaration","scope":646,"src":"5754:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":583,"name":"uint32","nodeType":"ElementaryTypeName","src":"5754:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"5636:138:1"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"5853:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":594,"name":"uint256","nodeType":"ElementaryTypeName","src":"5853:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5852:9:1"},"scope":1025,"src":"5609:769:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[34],"body":{"id":673,"nodeType":"Block","src":"6454:197:1","statements":[{"expression":{"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6460:16:1","subExpression":{"id":652,"name":"s_currentSubId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"6460:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":654,"nodeType":"ExpressionStatement","src":"6460:16:1"},{"expression":{"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":655,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6482:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":657,"indexExpression":{"id":656,"name":"s_currentSubId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"6498:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6482:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":659,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6537:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6541:6:1","memberName":"sender","nodeType":"MemberAccess","src":"6537:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6558:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":658,"name":"Subscription","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"6516:12:1","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Subscription_$211_storage_ptr_$","typeString":"type(struct VRFCoordinatorV2Mock.Subscription storage pointer)"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["6530:5:1","6549:7:1"],"names":["owner","balance"],"nodeType":"FunctionCall","src":"6516:45:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_memory_ptr","typeString":"struct VRFCoordinatorV2Mock.Subscription memory"}},"src":"6482:79:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":664,"nodeType":"ExpressionStatement","src":"6482:79:1"},{"eventCall":{"arguments":[{"id":666,"name":"s_currentSubId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"6592:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"expression":{"id":667,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6608:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6612:6:1","memberName":"sender","nodeType":"MemberAccess","src":"6608:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":665,"name":"SubscriptionCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"6572:19:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_address_$returns$__$","typeString":"function (uint64,address)"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:47:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":670,"nodeType":"EmitStatement","src":"6567:52:1"},{"expression":{"id":671,"name":"s_currentSubId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"6632:14:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"functionReturnParameters":651,"id":672,"nodeType":"Return","src":"6625:21:1"}]},"functionSelector":"a21a23e4","id":674,"implemented":true,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"6391:18:1","nodeType":"FunctionDefinition","overrides":{"id":648,"nodeType":"OverrideSpecifier","overrides":[],"src":"6421:8:1"},"parameters":{"id":647,"nodeType":"ParameterList","parameters":[],"src":"6409:2:1"},"returnParameters":{"id":651,"nodeType":"ParameterList","parameters":[{"constant":false,"id":650,"mutability":"mutable","name":"_subId","nameLocation":"6446:6:1","nodeType":"VariableDeclaration","scope":674,"src":"6439:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":649,"name":"uint64","nodeType":"ElementaryTypeName","src":"6439:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6438:15:1"},"scope":1025,"src":"6382:269:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[49],"body":{"id":717,"nodeType":"Block","src":"6811:203:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":689,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6821:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":691,"indexExpression":{"id":690,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6837:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6821:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":692,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6845:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":208,"src":"6821:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6862:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6854:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":693,"name":"address","nodeType":"ElementaryTypeName","src":"6854:7:1","typeDescriptions":{}}},"id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6854:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6821:43:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":702,"nodeType":"IfStatement","src":"6817:92:1","trueBody":{"id":701,"nodeType":"Block","src":"6866:43:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":698,"name":"InvalidSubscription","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"6881:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6881:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":700,"nodeType":"RevertStatement","src":"6874:28:1"}]}},{"expression":{"components":[{"expression":{"baseExpression":{"id":703,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6922:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":705,"indexExpression":{"id":704,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6938:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6922:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6946:7:1","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":210,"src":"6922:31:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},{"hexValue":"30","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6955:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"baseExpression":{"id":708,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6958:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":710,"indexExpression":{"id":709,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"6974:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6958:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":711,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6982:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":208,"src":"6958:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":712,"name":"s_consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"6989:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint64 => address[] storage ref)"}},"id":714,"indexExpression":{"id":713,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"7001:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6989:19:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}}],"id":715,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6921:88:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint96_$_t_rational_0_by_1_$_t_address_$_t_array$_t_address_$dyn_storage_$","typeString":"tuple(uint96,int_const 0,address,address[] storage ref)"}},"functionReturnParameters":688,"id":716,"nodeType":"Return","src":"6914:95:1"}]},"functionSelector":"a47c7696","id":718,"implemented":true,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"6664:15:1","nodeType":"FunctionDefinition","overrides":{"id":678,"nodeType":"OverrideSpecifier","overrides":[],"src":"6717:8:1"},"parameters":{"id":677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":676,"mutability":"mutable","name":"_subId","nameLocation":"6692:6:1","nodeType":"VariableDeclaration","scope":718,"src":"6685:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":675,"name":"uint64","nodeType":"ElementaryTypeName","src":"6685:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"6679:23:1"},"returnParameters":{"id":688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":680,"mutability":"mutable","name":"balance","nameLocation":"6742:7:1","nodeType":"VariableDeclaration","scope":718,"src":"6735:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":679,"name":"uint96","nodeType":"ElementaryTypeName","src":"6735:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"reqCount","nameLocation":"6758:8:1","nodeType":"VariableDeclaration","scope":718,"src":"6751:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":681,"name":"uint64","nodeType":"ElementaryTypeName","src":"6751:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"owner","nameLocation":"6776:5:1","nodeType":"VariableDeclaration","scope":718,"src":"6768:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":683,"name":"address","nodeType":"ElementaryTypeName","src":"6768:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":687,"mutability":"mutable","name":"consumers","nameLocation":"6800:9:1","nodeType":"VariableDeclaration","scope":718,"src":"6783:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":685,"name":"address","nodeType":"ElementaryTypeName","src":"6783:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":686,"nodeType":"ArrayTypeName","src":"6783:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6734:76:1"},"scope":1025,"src":"6655:359:1","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[87],"body":{"id":746,"nodeType":"Block","src":"7126:120:1","statements":[{"eventCall":{"arguments":[{"id":732,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"7158:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":733,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"7166:3:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":734,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"7171:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":736,"indexExpression":{"id":735,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"7187:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7171:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":737,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7195:7:1","memberName":"balance","nodeType":"MemberAccess","referencedDeclaration":210,"src":"7171:31:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint96","typeString":"uint96"}],"id":731,"name":"SubscriptionCanceled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":178,"src":"7137:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_address_$_t_uint256_$returns$__$","typeString":"function (uint64,address,uint256)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7137:66:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":739,"nodeType":"EmitStatement","src":"7132:71:1"},{"expression":{"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7209:32:1","subExpression":{"components":[{"baseExpression":{"id":740,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"7217:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":742,"indexExpression":{"id":741,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"7233:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7217:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}}],"id":743,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"7216:25:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":745,"nodeType":"ExpressionStatement","src":"7209:32:1"}]},"functionSelector":"d7ae1d30","id":747,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":726,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"7105:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":727,"kind":"modifierInvocation","modifierName":{"id":725,"name":"onlySubOwner","nameLocations":["7092:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":781,"src":"7092:12:1"},"nodeType":"ModifierInvocation","src":"7092:20:1"},{"id":729,"kind":"modifierInvocation","modifierName":{"id":728,"name":"nonReentrant","nameLocations":["7113:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":979,"src":"7113:12:1"},"nodeType":"ModifierInvocation","src":"7113:12:1"}],"name":"cancelSubscription","nameLocation":"7027:18:1","nodeType":"FunctionDefinition","overrides":{"id":724,"nodeType":"OverrideSpecifier","overrides":[],"src":"7083:8:1"},"parameters":{"id":723,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"_subId","nameLocation":"7053:6:1","nodeType":"VariableDeclaration","scope":747,"src":"7046:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":719,"name":"uint64","nodeType":"ElementaryTypeName","src":"7046:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":722,"mutability":"mutable","name":"_to","nameLocation":"7069:3:1","nodeType":"VariableDeclaration","scope":747,"src":"7061:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":721,"name":"address","nodeType":"ElementaryTypeName","src":"7061:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7045:28:1"},"returnParameters":{"id":730,"nodeType":"ParameterList","parameters":[],"src":"7126:0:1"},"scope":1025,"src":"7018:228:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":780,"nodeType":"Block","src":"7287:209:1","statements":[{"assignments":[752],"declarations":[{"constant":false,"id":752,"mutability":"mutable","name":"owner","nameLocation":"7301:5:1","nodeType":"VariableDeclaration","scope":780,"src":"7293:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"7293:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":757,"initialValue":{"expression":{"baseExpression":{"id":753,"name":"s_subscriptions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"7309:15:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_struct$_Subscription_$211_storage_$","typeString":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription storage ref)"}},"id":755,"indexExpression":{"id":754,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":749,"src":"7325:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7309:23:1","typeDescriptions":{"typeIdentifier":"t_struct$_Subscription_$211_storage","typeString":"struct VRFCoordinatorV2Mock.Subscription storage ref"}},"id":756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7333:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":208,"src":"7309:29:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7293:45:1"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":758,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"7348:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7365:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7357:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":759,"name":"address","nodeType":"ElementaryTypeName","src":"7357:7:1","typeDescriptions":{}}},"id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7357:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7348:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":768,"nodeType":"IfStatement","src":"7344:68:1","trueBody":{"id":767,"nodeType":"Block","src":"7369:43:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":764,"name":"InvalidSubscription","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"7384:19:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7384:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":766,"nodeType":"RevertStatement","src":"7377:28:1"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":769,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7421:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7425:6:1","memberName":"sender","nodeType":"MemberAccess","src":"7421:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":771,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"7435:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7421:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":778,"nodeType":"IfStatement","src":"7417:68:1","trueBody":{"id":777,"nodeType":"Block","src":"7442:43:1","statements":[{"errorCall":{"arguments":[{"id":774,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"7472:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":773,"name":"MustBeSubOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":120,"src":"7457:14:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7457:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":776,"nodeType":"RevertStatement","src":"7450:28:1"}]}},{"id":779,"nodeType":"PlaceholderStatement","src":"7490:1:1"}]},"id":781,"name":"onlySubOwner","nameLocation":"7259:12:1","nodeType":"ModifierDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"_subId","nameLocation":"7279:6:1","nodeType":"VariableDeclaration","scope":781,"src":"7272:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":748,"name":"uint64","nodeType":"ElementaryTypeName","src":"7272:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"7271:15:1"},"src":"7250:246:1","virtual":false,"visibility":"internal"},{"baseFunctions":[12],"body":{"id":801,"nodeType":"Block","src":"7594:48:1","statements":[{"expression":{"components":[{"hexValue":"33","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7608:1:1","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},{"hexValue":"32303030303030","id":793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7611:7:1","typeDescriptions":{"typeIdentifier":"t_rational_2000000_by_1","typeString":"int_const 2000000"},"value":"2000000"},{"arguments":[{"hexValue":"30","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7634:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7620:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7624:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":795,"nodeType":"ArrayTypeName","src":"7624:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7620:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"id":799,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7607:30:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_3_by_1_$_t_rational_2000000_by_1_$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"tuple(int_const 3,int_const 2000000,bytes32[] memory)"}},"functionReturnParameters":791,"id":800,"nodeType":"Return","src":"7600:37:1"}]},"functionSelector":"00012291","id":802,"implemented":true,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"7509:16:1","nodeType":"FunctionDefinition","overrides":{"id":783,"nodeType":"OverrideSpecifier","overrides":[],"src":"7542:8:1"},"parameters":{"id":782,"nodeType":"ParameterList","parameters":[],"src":"7525:2:1"},"returnParameters":{"id":791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":802,"src":"7560:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":784,"name":"uint16","nodeType":"ElementaryTypeName","src":"7560:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":802,"src":"7568:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":786,"name":"uint32","nodeType":"ElementaryTypeName","src":"7568:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":790,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":802,"src":"7576:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7576:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":789,"nodeType":"ArrayTypeName","src":"7576:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7559:34:1"},"scope":1025,"src":"7500:142:1","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[71],"body":{"id":843,"nodeType":"Block","src":"7740:251:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":813,"name":"s_consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"7750:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint64 => address[] storage ref)"}},"id":815,"indexExpression":{"id":814,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"7762:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7750:19:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7770:6:1","memberName":"length","nodeType":"MemberAccess","src":"7750:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":817,"name":"MAX_CONSUMERS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"7780:13:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"src":"7750:43:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":823,"nodeType":"IfStatement","src":"7746:89:1","trueBody":{"id":822,"nodeType":"Block","src":"7795:40:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":819,"name":"TooManyConsumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"7810:16:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7810:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":821,"nodeType":"RevertStatement","src":"7803:25:1"}]}},{"condition":{"arguments":[{"id":825,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"7861:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":826,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"7869:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":824,"name":"consumerIsAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"7845:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint64_$_t_address_$returns$_t_bool_$","typeString":"function (uint64,address) view returns (bool)"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7845:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":830,"nodeType":"IfStatement","src":"7841:61:1","trueBody":{"id":829,"nodeType":"Block","src":"7881:21:1","statements":[{"functionReturnParameters":812,"id":828,"nodeType":"Return","src":"7889:7:1"}]}},{"expression":{"arguments":[{"id":835,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"7933:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":831,"name":"s_consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"7908:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint64 => address[] storage ref)"}},"id":833,"indexExpression":{"id":832,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"7920:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7908:19:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:4:1","memberName":"push","nodeType":"MemberAccess","src":"7908:24:1","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:35:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":837,"nodeType":"ExpressionStatement","src":"7908:35:1"},{"eventCall":{"arguments":[{"id":839,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"7968:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":840,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"7976:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":838,"name":"ConsumerAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"7954:13:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_address_$returns$__$","typeString":"function (uint64,address)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7954:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":842,"nodeType":"EmitStatement","src":"7949:37:1"}]},"functionSelector":"7341c10c","id":844,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":810,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"7732:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":811,"kind":"modifierInvocation","modifierName":{"id":809,"name":"onlySubOwner","nameLocations":["7719:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":781,"src":"7719:12:1"},"nodeType":"ModifierInvocation","src":"7719:20:1"}],"name":"addConsumer","nameLocation":"7655:11:1","nodeType":"FunctionDefinition","overrides":{"id":808,"nodeType":"OverrideSpecifier","overrides":[],"src":"7710:8:1"},"parameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"_subId","nameLocation":"7674:6:1","nodeType":"VariableDeclaration","scope":844,"src":"7667:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":803,"name":"uint64","nodeType":"ElementaryTypeName","src":"7667:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"_consumer","nameLocation":"7690:9:1","nodeType":"VariableDeclaration","scope":844,"src":"7682:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"7682:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7666:34:1"},"returnParameters":{"id":812,"nodeType":"ParameterList","parameters":[],"src":"7740:0:1"},"scope":1025,"src":"7646:345:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[79],"body":{"id":916,"nodeType":"Block","src":"8154:337:1","statements":[{"assignments":[865],"declarations":[{"constant":false,"id":865,"mutability":"mutable","name":"consumers","nameLocation":"8178:9:1","nodeType":"VariableDeclaration","scope":916,"src":"8160:27:1","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"8160:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":864,"nodeType":"ArrayTypeName","src":"8160:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":869,"initialValue":{"baseExpression":{"id":866,"name":"s_consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"8190:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint64_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint64 => address[] storage ref)"}},"id":868,"indexExpression":{"id":867,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"8202:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8190:19:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8160:49:1"},{"body":{"id":909,"nodeType":"Block","src":"8262:179:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":881,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8274:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":883,"indexExpression":{"id":882,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"8284:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8274:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":884,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"8290:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8274:25:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":908,"nodeType":"IfStatement","src":"8270:165:1","trueBody":{"id":907,"nodeType":"Block","src":"8301:134:1","statements":[{"assignments":[887],"declarations":[{"constant":false,"id":887,"mutability":"mutable","name":"last","nameLocation":"8319:4:1","nodeType":"VariableDeclaration","scope":907,"src":"8311:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":886,"name":"address","nodeType":"ElementaryTypeName","src":"8311:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":894,"initialValue":{"baseExpression":{"id":888,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8326:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":893,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":889,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8336:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8346:6:1","memberName":"length","nodeType":"MemberAccess","src":"8336:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8355:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8336:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8326:31:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8311:46:1"},{"expression":{"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":895,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8367:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":897,"indexExpression":{"id":896,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"8377:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8367:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":898,"name":"last","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"8382:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8367:19:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":900,"nodeType":"ExpressionStatement","src":"8367:19:1"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":901,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8396:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8406:3:1","memberName":"pop","nodeType":"MemberAccess","src":"8396:13:1","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer)"}},"id":904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8396:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":905,"nodeType":"ExpressionStatement","src":"8396:15:1"},{"id":906,"nodeType":"Break","src":"8421:5:1"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":874,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"8235:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":875,"name":"consumers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":865,"src":"8239:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[] storage pointer"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8249:6:1","memberName":"length","nodeType":"MemberAccess","src":"8239:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8235:20:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":910,"initializationExpression":{"assignments":[871],"declarations":[{"constant":false,"id":871,"mutability":"mutable","name":"i","nameLocation":"8228:1:1","nodeType":"VariableDeclaration","scope":910,"src":"8220:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":870,"name":"uint256","nodeType":"ElementaryTypeName","src":"8220:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":873,"initialValue":{"hexValue":"30","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8232:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8220:13:1"},"loopExpression":{"expression":{"id":879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8257:3:1","subExpression":{"id":878,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":871,"src":"8257:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":880,"nodeType":"ExpressionStatement","src":"8257:3:1"},"nodeType":"ForStatement","src":"8215:226:1"},{"eventCall":{"arguments":[{"id":912,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"8468:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":913,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"8476:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_address","typeString":"address"}],"id":911,"name":"ConsumerRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"8452:15:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint64_$_t_address_$returns$__$","typeString":"function (uint64,address)"}},"id":914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8452:34:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":915,"nodeType":"EmitStatement","src":"8447:39:1"}]},"functionSelector":"9f87fad7","id":917,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":852,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"8096:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}}],"id":853,"kind":"modifierInvocation","modifierName":{"id":851,"name":"onlySubOwner","nameLocations":["8083:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":781,"src":"8083:12:1"},"nodeType":"ModifierInvocation","src":"8083:20:1"},{"arguments":[{"id":855,"name":"_subId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":846,"src":"8122:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":856,"name":"_consumer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"8130:9:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":857,"kind":"modifierInvocation","modifierName":{"id":854,"name":"onlyValidConsumer","nameLocations":["8104:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":333,"src":"8104:17:1"},"nodeType":"ModifierInvocation","src":"8104:36:1"},{"id":859,"kind":"modifierInvocation","modifierName":{"id":858,"name":"nonReentrant","nameLocations":["8141:12:1"],"nodeType":"IdentifierPath","referencedDeclaration":979,"src":"8141:12:1"},"nodeType":"ModifierInvocation","src":"8141:12:1"}],"name":"removeConsumer","nameLocation":"8004:14:1","nodeType":"FunctionDefinition","overrides":{"id":850,"nodeType":"OverrideSpecifier","overrides":[],"src":"8074:8:1"},"parameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"mutability":"mutable","name":"_subId","nameLocation":"8031:6:1","nodeType":"VariableDeclaration","scope":917,"src":"8024:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":845,"name":"uint64","nodeType":"ElementaryTypeName","src":"8024:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":848,"mutability":"mutable","name":"_consumer","nameLocation":"8051:9:1","nodeType":"VariableDeclaration","scope":917,"src":"8043:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"8043:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8018:46:1"},"returnParameters":{"id":860,"nodeType":"ParameterList","parameters":[],"src":"8154:0:1"},"scope":1025,"src":"7995:496:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":934,"nodeType":"Block","src":"8699:46:1","statements":[{"expression":{"components":[{"hexValue":"34","id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8713:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},{"hexValue":"325f3530305f303030","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8716:9:1","typeDescriptions":{"typeIdentifier":"t_rational_2500000_by_1","typeString":"int_const 2500000"},"value":"2_500_000"},{"hexValue":"325f373030","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8727:5:1","typeDescriptions":{"typeIdentifier":"t_rational_2700_by_1","typeString":"int_const 2700"},"value":"2_700"},{"hexValue":"3333323835","id":931,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8734:5:1","typeDescriptions":{"typeIdentifier":"t_rational_33285_by_1","typeString":"int_const 33285"},"value":"33285"}],"id":932,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8712:28:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_4_by_1_$_t_rational_2500000_by_1_$_t_rational_2700_by_1_$_t_rational_33285_by_1_$","typeString":"tuple(int_const 4,int_const 2500000,int_const 2700,int_const 33285)"}},"functionReturnParameters":927,"id":933,"nodeType":"Return","src":"8705:35:1"}]},"functionSelector":"c3f909d4","id":935,"implemented":true,"kind":"function","modifiers":[],"name":"getConfig","nameLocation":"8504:9:1","nodeType":"FunctionDefinition","parameters":{"id":918,"nodeType":"ParameterList","parameters":[],"src":"8513:2:1"},"returnParameters":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":920,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"8565:27:1","nodeType":"VariableDeclaration","scope":935,"src":"8558:34:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":919,"name":"uint16","nodeType":"ElementaryTypeName","src":"8558:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":922,"mutability":"mutable","name":"maxGasLimit","nameLocation":"8607:11:1","nodeType":"VariableDeclaration","scope":935,"src":"8600:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":921,"name":"uint32","nodeType":"ElementaryTypeName","src":"8600:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"stalenessSeconds","nameLocation":"8633:16:1","nodeType":"VariableDeclaration","scope":935,"src":"8626:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":923,"name":"uint32","nodeType":"ElementaryTypeName","src":"8626:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":926,"mutability":"mutable","name":"gasAfterPaymentCalculation","nameLocation":"8664:26:1","nodeType":"VariableDeclaration","scope":935,"src":"8657:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":925,"name":"uint32","nodeType":"ElementaryTypeName","src":"8657:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8550:146:1"},"scope":1025,"src":"8495:250:1","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":967,"nodeType":"Block","src":"9149:190:1","statements":[{"expression":{"components":[{"hexValue":"313030303030","id":956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:6:1","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},{"hexValue":"313030303030","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9196:6:1","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},{"hexValue":"313030303030","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9222:6:1","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},{"hexValue":"313030303030","id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9248:6:1","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},{"hexValue":"313030303030","id":960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9274:6:1","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},{"hexValue":"30","id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9300:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9309:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9327:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":965,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"9162:172:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_100000_by_1_$_t_rational_100000_by_1_$_t_rational_100000_by_1_$_t_rational_100000_by_1_$_t_rational_100000_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(int_const 100000,int_const 100000,int_const 100000,int_const 100000,int_const 100000,int_const 0,int_const 0,int_const 0,int_const 0)"}},"functionReturnParameters":955,"id":966,"nodeType":"Return","src":"9155:179:1"}]},"functionSelector":"5fbbc0d2","id":968,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeConfig","nameLocation":"8758:12:1","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"8770:2:1"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"fulfillmentFlatFeeLinkPPMTier1","nameLocation":"8822:30:1","nodeType":"VariableDeclaration","scope":968,"src":"8815:37:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":937,"name":"uint32","nodeType":"ElementaryTypeName","src":"8815:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"fulfillmentFlatFeeLinkPPMTier2","nameLocation":"8867:30:1","nodeType":"VariableDeclaration","scope":968,"src":"8860:37:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":939,"name":"uint32","nodeType":"ElementaryTypeName","src":"8860:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":942,"mutability":"mutable","name":"fulfillmentFlatFeeLinkPPMTier3","nameLocation":"8912:30:1","nodeType":"VariableDeclaration","scope":968,"src":"8905:37:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":941,"name":"uint32","nodeType":"ElementaryTypeName","src":"8905:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"fulfillmentFlatFeeLinkPPMTier4","nameLocation":"8957:30:1","nodeType":"VariableDeclaration","scope":968,"src":"8950:37:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":943,"name":"uint32","nodeType":"ElementaryTypeName","src":"8950:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":946,"mutability":"mutable","name":"fulfillmentFlatFeeLinkPPMTier5","nameLocation":"9002:30:1","nodeType":"VariableDeclaration","scope":968,"src":"8995:37:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":945,"name":"uint32","nodeType":"ElementaryTypeName","src":"8995:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"reqsForTier2","nameLocation":"9047:12:1","nodeType":"VariableDeclaration","scope":968,"src":"9040:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":947,"name":"uint24","nodeType":"ElementaryTypeName","src":"9040:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":950,"mutability":"mutable","name":"reqsForTier3","nameLocation":"9074:12:1","nodeType":"VariableDeclaration","scope":968,"src":"9067:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":949,"name":"uint24","nodeType":"ElementaryTypeName","src":"9067:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":952,"mutability":"mutable","name":"reqsForTier4","nameLocation":"9101:12:1","nodeType":"VariableDeclaration","scope":968,"src":"9094:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":951,"name":"uint24","nodeType":"ElementaryTypeName","src":"9094:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":954,"mutability":"mutable","name":"reqsForTier5","nameLocation":"9128:12:1","nodeType":"VariableDeclaration","scope":968,"src":"9121:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":953,"name":"uint24","nodeType":"ElementaryTypeName","src":"9121:6:1","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"8807:339:1"},"scope":1025,"src":"8749:590:1","stateMutability":"pure","virtual":false,"visibility":"external"},{"body":{"id":978,"nodeType":"Block","src":"9367:79:1","statements":[{"condition":{"expression":{"id":970,"name":"s_config","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"9377:8:1","typeDescriptions":{"typeIdentifier":"t_struct$_Config_$195_storage","typeString":"struct VRFCoordinatorV2Mock.Config storage ref"}},"id":971,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9386:14:1","memberName":"reentrancyLock","nodeType":"MemberAccess","referencedDeclaration":194,"src":"9377:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"IfStatement","src":"9373:62:1","trueBody":{"id":975,"nodeType":"Block","src":"9402:33:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":972,"name":"Reentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"9417:9:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9417:11:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"RevertStatement","src":"9410:18:1"}]}},{"id":977,"nodeType":"PlaceholderStatement","src":"9440:1:1"}]},"id":979,"name":"nonReentrant","nameLocation":"9352:12:1","nodeType":"ModifierDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[],"src":"9364:2:1"},"src":"9343:103:1","virtual":false,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"9518:49:1","statements":[{"expression":{"hexValue":"34303030303030303030303030303030","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9531:16:1","typeDescriptions":{"typeIdentifier":"t_rational_4000000000000000_by_1","typeString":"int_const 4000000000000000"},"value":"4000000000000000"},"functionReturnParameters":983,"id":985,"nodeType":"Return","src":"9524:23:1"}]},"functionSelector":"356dac71","id":987,"implemented":true,"kind":"function","modifiers":[],"name":"getFallbackWeiPerUnitLink","nameLocation":"9459:25:1","nodeType":"FunctionDefinition","parameters":{"id":980,"nodeType":"ParameterList","parameters":[],"src":"9484:2:1"},"returnParameters":{"id":983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":987,"src":"9510:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":981,"name":"int256","nodeType":"ElementaryTypeName","src":"9510:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"9509:8:1"},"scope":1025,"src":"9450:117:1","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[57],"body":{"id":999,"nodeType":"Block","src":"9678:36:1","statements":[{"expression":{"arguments":[{"hexValue":"6e6f7420696d706c656d656e746564","id":996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9691:17:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","typeString":"literal_string \"not implemented\""},"value":"not implemented"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","typeString":"literal_string \"not implemented\""}],"id":995,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9684:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9684:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":998,"nodeType":"ExpressionStatement","src":"9684:25:1"}]},"functionSelector":"04c357cb","id":1000,"implemented":true,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"9580:32:1","nodeType":"FunctionDefinition","overrides":{"id":993,"nodeType":"OverrideSpecifier","overrides":[],"src":"9669:8:1"},"parameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":989,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1000,"src":"9613:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":988,"name":"uint64","nodeType":"ElementaryTypeName","src":"9613:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1000,"src":"9632:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":990,"name":"address","nodeType":"ElementaryTypeName","src":"9632:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9612:42:1"},"returnParameters":{"id":994,"nodeType":"ParameterList","parameters":[],"src":"9678:0:1"},"scope":1025,"src":"9571:143:1","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[63],"body":{"id":1010,"nodeType":"Block","src":"9801:36:1","statements":[{"expression":{"arguments":[{"hexValue":"6e6f7420696d706c656d656e746564","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9814:17:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","typeString":"literal_string \"not implemented\""},"value":"not implemented"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","typeString":"literal_string \"not implemented\""}],"id":1006,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9807:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9807:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1009,"nodeType":"ExpressionStatement","src":"9807:25:1"}]},"functionSelector":"82359740","id":1011,"implemented":true,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"9727:31:1","nodeType":"FunctionDefinition","overrides":{"id":1004,"nodeType":"OverrideSpecifier","overrides":[],"src":"9792:8:1"},"parameters":{"id":1003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1002,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1011,"src":"9759:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1001,"name":"uint64","nodeType":"ElementaryTypeName","src":"9759:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"9758:19:1"},"returnParameters":{"id":1005,"nodeType":"ParameterList","parameters":[],"src":"9801:0:1"},"scope":1025,"src":"9718:119:1","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[94],"body":{"id":1023,"nodeType":"Block","src":"9925:36:1","statements":[{"expression":{"arguments":[{"hexValue":"6e6f7420696d706c656d656e746564","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9938:17:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","typeString":"literal_string \"not implemented\""},"value":"not implemented"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","typeString":"literal_string \"not implemented\""}],"id":1019,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9931:6:1","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9931:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1022,"nodeType":"ExpressionStatement","src":"9931:25:1"}]},"functionSelector":"e82ad7d4","id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"9850:20:1","nodeType":"FunctionDefinition","overrides":{"id":1015,"nodeType":"OverrideSpecifier","overrides":[],"src":"9901:8:1"},"parameters":{"id":1014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1013,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1024,"src":"9871:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1012,"name":"uint64","nodeType":"ElementaryTypeName","src":"9871:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"9870:18:1"},"returnParameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1024,"src":"9919:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1016,"name":"bool","nodeType":"ElementaryTypeName","src":"9919:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9918:6:1"},"scope":1025,"src":"9841:120:1","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":1026,"src":"311:9652:1","usedErrors":[114,116,120,122,124,126,128],"usedEvents":[146,156,162,170,178,184,190,192,1061,1067]}],"src":"92:9872:1"},"id":1},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol","exportedSymbols":{"ConfirmedOwner":[1045],"ConfirmedOwnerWithProposal":[1207],"IOwnable":[1223]},"id":1046,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1027,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","file":"./ConfirmedOwnerWithProposal.sol","id":1028,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1046,"sourceUnit":1208,"src":"57:42:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1030,"name":"ConfirmedOwnerWithProposal","nameLocations":["239:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":1207,"src":"239:26:2"},"id":1031,"nodeType":"InheritanceSpecifier","src":"239:26:2"}],"canonicalName":"ConfirmedOwner","contractDependencies":[],"contractKind":"contract","documentation":{"id":1029,"nodeType":"StructuredDocumentation","src":"101:110:2","text":" @title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":1045,"linearizedBaseContracts":[1045,1207,1223],"name":"ConfirmedOwner","nameLocation":"221:14:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":1043,"nodeType":"Block","src":"349:2:2","statements":[]},"id":1044,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1036,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"327:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"345:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"337:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1037,"name":"address","nodeType":"ElementaryTypeName","src":"337:7:2","typeDescriptions":{}}},"id":1040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"337:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1041,"kind":"baseConstructorSpecifier","modifierName":{"id":1035,"name":"ConfirmedOwnerWithProposal","nameLocations":["300:26:2"],"nodeType":"IdentifierPath","referencedDeclaration":1207,"src":"300:26:2"},"nodeType":"ModifierInvocation","src":"300:48:2"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1033,"mutability":"mutable","name":"newOwner","nameLocation":"290:8:2","nodeType":"VariableDeclaration","scope":1044,"src":"282:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1032,"name":"address","nodeType":"ElementaryTypeName","src":"282:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"281:18:2"},"returnParameters":{"id":1042,"nodeType":"ParameterList","parameters":[],"src":"349:0:2"},"scope":1045,"src":"270:81:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1046,"src":"212:141:2","usedErrors":[],"usedEvents":[1061,1067]}],"src":"32:322:2"},"id":2},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol","exportedSymbols":{"ConfirmedOwnerWithProposal":[1207],"IOwnable":[1223]},"id":1208,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1047,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","file":"../interfaces/IOwnable.sol","id":1048,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1208,"sourceUnit":1224,"src":"57:36:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1050,"name":"IOwnable","nameLocations":["245:8:3"],"nodeType":"IdentifierPath","referencedDeclaration":1223,"src":"245:8:3"},"id":1051,"nodeType":"InheritanceSpecifier","src":"245:8:3"}],"canonicalName":"ConfirmedOwnerWithProposal","contractDependencies":[],"contractKind":"contract","documentation":{"id":1049,"nodeType":"StructuredDocumentation","src":"95:110:3","text":" @title The ConfirmedOwner contract\n @notice A contract with helpers for basic contract ownership."},"fullyImplemented":true,"id":1207,"linearizedBaseContracts":[1207,1223],"name":"ConfirmedOwnerWithProposal","nameLocation":"215:26:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1053,"mutability":"mutable","name":"s_owner","nameLocation":"274:7:3","nodeType":"VariableDeclaration","scope":1207,"src":"258:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1052,"name":"address","nodeType":"ElementaryTypeName","src":"258:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":1055,"mutability":"mutable","name":"s_pendingOwner","nameLocation":"301:14:3","nodeType":"VariableDeclaration","scope":1207,"src":"285:30:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"285:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"ed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278","id":1061,"name":"OwnershipTransferRequested","nameLocation":"326:26:3","nodeType":"EventDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1057,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"369:4:3","nodeType":"VariableDeclaration","scope":1061,"src":"353:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1056,"name":"address","nodeType":"ElementaryTypeName","src":"353:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1059,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"391:2:3","nodeType":"VariableDeclaration","scope":1061,"src":"375:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1058,"name":"address","nodeType":"ElementaryTypeName","src":"375:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"352:42:3"},"src":"320:75:3"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":1067,"name":"OwnershipTransferred","nameLocation":"404:20:3","nodeType":"EventDefinition","parameters":{"id":1066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"441:4:3","nodeType":"VariableDeclaration","scope":1067,"src":"425:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1062,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1065,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"463:2:3","nodeType":"VariableDeclaration","scope":1067,"src":"447:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1064,"name":"address","nodeType":"ElementaryTypeName","src":"447:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"424:42:3"},"src":"398:69:3"},{"body":{"id":1100,"nodeType":"Block","src":"523:179:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1075,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"537:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"549:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1076,"name":"address","nodeType":"ElementaryTypeName","src":"549:7:3","typeDescriptions":{}}},"id":1079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"549:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"537:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"561:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""},"value":"Cannot set owner to zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","typeString":"literal_string \"Cannot set owner to zero\""}],"id":1074,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"529:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"529:59:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1083,"nodeType":"ExpressionStatement","src":"529:59:3"},{"expression":{"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1084,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"595:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1085,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1069,"src":"605:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"595:18:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1087,"nodeType":"ExpressionStatement","src":"595:18:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"623:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"647:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"639:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1089,"name":"address","nodeType":"ElementaryTypeName","src":"639:7:3","typeDescriptions":{}}},"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"639:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"623:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1099,"nodeType":"IfStatement","src":"619:79:3","trueBody":{"id":1098,"nodeType":"Block","src":"651:47:3","statements":[{"expression":{"arguments":[{"id":1095,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1071,"src":"678:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1094,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"659:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:32:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1097,"nodeType":"ExpressionStatement","src":"659:32:3"}]}}]},"id":1101,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1069,"mutability":"mutable","name":"newOwner","nameLocation":"491:8:3","nodeType":"VariableDeclaration","scope":1101,"src":"483:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"483:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1071,"mutability":"mutable","name":"pendingOwner","nameLocation":"509:12:3","nodeType":"VariableDeclaration","scope":1101,"src":"501:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1070,"name":"address","nodeType":"ElementaryTypeName","src":"501:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"482:40:3"},"returnParameters":{"id":1073,"nodeType":"ParameterList","parameters":[],"src":"523:0:3"},"scope":1207,"src":"471:231:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1219],"body":{"id":1114,"nodeType":"Block","src":"876:33:3","statements":[{"expression":{"arguments":[{"id":1111,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1104,"src":"901:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1110,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"882:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"882:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1113,"nodeType":"ExpressionStatement","src":"882:22:3"}]},"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"706:102:3","text":" @notice Allows an owner to begin transferring ownership to a new address,\n pending."},"functionSelector":"f2fde38b","id":1115,"implemented":true,"kind":"function","modifiers":[{"id":1108,"kind":"modifierInvocation","modifierName":{"id":1107,"name":"onlyOwner","nameLocations":["866:9:3"],"nodeType":"IdentifierPath","referencedDeclaration":1206,"src":"866:9:3"},"nodeType":"ModifierInvocation","src":"866:9:3"}],"name":"transferOwnership","nameLocation":"820:17:3","nodeType":"FunctionDefinition","overrides":{"id":1106,"nodeType":"OverrideSpecifier","overrides":[],"src":"857:8:3"},"parameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"to","nameLocation":"846:2:3","nodeType":"VariableDeclaration","scope":1115,"src":"838:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"838:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"837:12:3"},"returnParameters":{"id":1109,"nodeType":"ParameterList","parameters":[],"src":"876:0:3"},"scope":1207,"src":"811:98:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1222],"body":{"id":1150,"nodeType":"Block","src":"1046:220:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1121,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1060:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1060:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1123,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"1074:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1060:28:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1090:24:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""},"value":"Must be proposed owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","typeString":"literal_string \"Must be proposed owner\""}],"id":1120,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1052:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1052:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1127,"nodeType":"ExpressionStatement","src":"1052:63:3"},{"assignments":[1129],"declarations":[{"constant":false,"id":1129,"mutability":"mutable","name":"oldOwner","nameLocation":"1130:8:3","nodeType":"VariableDeclaration","scope":1150,"src":"1122:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"1122:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1131,"initialValue":{"id":1130,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"1141:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1122:26:3"},{"expression":{"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1132,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"1154:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1133,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1164:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1168:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1164:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1154:20:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1136,"nodeType":"ExpressionStatement","src":"1154:20:3"},{"expression":{"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1137,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"1180:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1205:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1197:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"1197:7:3","typeDescriptions":{}}},"id":1141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1197:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1180:27:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1143,"nodeType":"ExpressionStatement","src":"1180:27:3"},{"eventCall":{"arguments":[{"id":1145,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"1240:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1146,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1250:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1254:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1250:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1144,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1067,"src":"1219:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:42:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1149,"nodeType":"EmitStatement","src":"1214:47:3"}]},"documentation":{"id":1116,"nodeType":"StructuredDocumentation","src":"913:85:3","text":" @notice Allows an ownership transfer to be completed by the recipient."},"functionSelector":"79ba5097","id":1151,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"1010:15:3","nodeType":"FunctionDefinition","overrides":{"id":1118,"nodeType":"OverrideSpecifier","overrides":[],"src":"1037:8:3"},"parameters":{"id":1117,"nodeType":"ParameterList","parameters":[],"src":"1025:2:3"},"returnParameters":{"id":1119,"nodeType":"ParameterList","parameters":[],"src":"1046:0:3"},"scope":1207,"src":"1001:265:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1214],"body":{"id":1160,"nodeType":"Block","src":"1373:25:3","statements":[{"expression":{"id":1158,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"1386:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1157,"id":1159,"nodeType":"Return","src":"1379:14:3"}]},"documentation":{"id":1152,"nodeType":"StructuredDocumentation","src":"1270:44:3","text":" @notice Get the current owner"},"functionSelector":"8da5cb5b","id":1161,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1326:5:3","nodeType":"FunctionDefinition","overrides":{"id":1154,"nodeType":"OverrideSpecifier","overrides":[],"src":"1346:8:3"},"parameters":{"id":1153,"nodeType":"ParameterList","parameters":[],"src":"1331:2:3"},"returnParameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1161,"src":"1364:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1363:9:3"},"scope":1207,"src":"1317:81:3","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1184,"nodeType":"Block","src":"1530:140:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1168,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"1544:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1169,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1550:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1554:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1550:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1544:16:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","id":1172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1562:25:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""},"value":"Cannot transfer to self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","typeString":"literal_string \"Cannot transfer to self\""}],"id":1167,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1536:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1536:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1174,"nodeType":"ExpressionStatement","src":"1536:52:3"},{"expression":{"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1175,"name":"s_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"1595:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1176,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"1612:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1595:19:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1178,"nodeType":"ExpressionStatement","src":"1595:19:3"},{"eventCall":{"arguments":[{"id":1180,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"1653:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1181,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"1662:2:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1179,"name":"OwnershipTransferRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"1626:26:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1626:39:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1183,"nodeType":"EmitStatement","src":"1621:44:3"}]},"documentation":{"id":1162,"nodeType":"StructuredDocumentation","src":"1402:77:3","text":" @notice validate, transfer ownership, and emit relevant events"},"id":1185,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1491:18:3","nodeType":"FunctionDefinition","parameters":{"id":1165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1164,"mutability":"mutable","name":"to","nameLocation":"1518:2:3","nodeType":"VariableDeclaration","scope":1185,"src":"1510:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1163,"name":"address","nodeType":"ElementaryTypeName","src":"1510:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1509:12:3"},"returnParameters":{"id":1166,"nodeType":"ParameterList","parameters":[],"src":"1530:0:3"},"scope":1207,"src":"1482:188:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1197,"nodeType":"Block","src":"1759:67:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1190,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1773:3:3","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1777:6:3","memberName":"sender","nodeType":"MemberAccess","src":"1773:10:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1192,"name":"s_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"1787:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1773:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1796:24:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""},"value":"Only callable by owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","typeString":"literal_string \"Only callable by owner\""}],"id":1189,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1765:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1765:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1196,"nodeType":"ExpressionStatement","src":"1765:56:3"}]},"documentation":{"id":1186,"nodeType":"StructuredDocumentation","src":"1674:38:3","text":" @notice validate access"},"id":1198,"implemented":true,"kind":"function","modifiers":[],"name":"_validateOwnership","nameLocation":"1724:18:3","nodeType":"FunctionDefinition","parameters":{"id":1187,"nodeType":"ParameterList","parameters":[],"src":"1742:2:3"},"returnParameters":{"id":1188,"nodeType":"ParameterList","parameters":[],"src":"1759:0:3"},"scope":1207,"src":"1715:111:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1205,"nodeType":"Block","src":"1935:38:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1201,"name":"_validateOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"1941:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1941:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1203,"nodeType":"ExpressionStatement","src":"1941:20:3"},{"id":1204,"nodeType":"PlaceholderStatement","src":"1967:1:3"}]},"documentation":{"id":1199,"nodeType":"StructuredDocumentation","src":"1830:81:3","text":" @notice Reverts if called by anyone other than the contract owner."},"id":1206,"name":"onlyOwner","nameLocation":"1923:9:3","nodeType":"ModifierDefinition","parameters":{"id":1200,"nodeType":"ParameterList","parameters":[],"src":"1932:2:3"},"src":"1914:59:3","virtual":false,"visibility":"internal"}],"scope":1208,"src":"206:1769:3","usedErrors":[],"usedEvents":[1061,1067]}],"src":"32:1944:3"},"id":3},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol","exportedSymbols":{"IOwnable":[1223]},"id":1224,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1209,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IOwnable","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1223,"linearizedBaseContracts":[1223],"name":"IOwnable","nameLocation":"67:8:4","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":1214,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"89:5:4","nodeType":"FunctionDefinition","parameters":{"id":1210,"nodeType":"ParameterList","parameters":[],"src":"94:2:4"},"returnParameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1214,"src":"115:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"115:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"114:9:4"},"scope":1223,"src":"80:44:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"f2fde38b","id":1219,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"137:17:4","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1216,"mutability":"mutable","name":"recipient","nameLocation":"163:9:4","nodeType":"VariableDeclaration","scope":1219,"src":"155:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1215,"name":"address","nodeType":"ElementaryTypeName","src":"155:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"154:19:4"},"returnParameters":{"id":1218,"nodeType":"ParameterList","parameters":[],"src":"182:0:4"},"scope":1223,"src":"128:55:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"79ba5097","id":1222,"implemented":false,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"196:15:4","nodeType":"FunctionDefinition","parameters":{"id":1220,"nodeType":"ParameterList","parameters":[],"src":"211:2:4"},"returnParameters":{"id":1221,"nodeType":"ParameterList","parameters":[],"src":"222:0:4"},"scope":1223,"src":"187:36:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1224,"src":"57:168:4","usedErrors":[],"usedEvents":[]}],"src":"32:194:4"},"id":4},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[1318]},"id":1319,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1225,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"LinkTokenInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1318,"linearizedBaseContracts":[1318],"name":"LinkTokenInterface","nameLocation":"67:18:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"dd62ed3e","id":1234,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"99:9:5","nodeType":"FunctionDefinition","parameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"owner","nameLocation":"117:5:5","nodeType":"VariableDeclaration","scope":1234,"src":"109:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1226,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"spender","nameLocation":"132:7:5","nodeType":"VariableDeclaration","scope":1234,"src":"124:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1228,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"108:32:5"},"returnParameters":{"id":1233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1232,"mutability":"mutable","name":"remaining","nameLocation":"172:9:5","nodeType":"VariableDeclaration","scope":1234,"src":"164:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1231,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:19:5"},"scope":1318,"src":"90:93:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":1243,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"196:7:5","nodeType":"FunctionDefinition","parameters":{"id":1239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"spender","nameLocation":"212:7:5","nodeType":"VariableDeclaration","scope":1243,"src":"204:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1235,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1238,"mutability":"mutable","name":"value","nameLocation":"229:5:5","nodeType":"VariableDeclaration","scope":1243,"src":"221:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"203:32:5"},"returnParameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"success","nameLocation":"259:7:5","nodeType":"VariableDeclaration","scope":1243,"src":"254:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1240,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:14:5"},"scope":1318,"src":"187:81:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":1250,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"281:9:5","nodeType":"FunctionDefinition","parameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1245,"mutability":"mutable","name":"owner","nameLocation":"299:5:5","nodeType":"VariableDeclaration","scope":1250,"src":"291:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1244,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:5"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"balance","nameLocation":"337:7:5","nodeType":"VariableDeclaration","scope":1250,"src":"329:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1247,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:17:5"},"scope":1318,"src":"272:74:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":1255,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"359:8:5","nodeType":"FunctionDefinition","parameters":{"id":1251,"nodeType":"ParameterList","parameters":[],"src":"367:2:5"},"returnParameters":{"id":1254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1253,"mutability":"mutable","name":"decimalPlaces","nameLocation":"399:13:5","nodeType":"VariableDeclaration","scope":1255,"src":"393:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1252,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:21:5"},"scope":1318,"src":"350:64:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"66188463","id":1264,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nameLocation":"427:16:5","nodeType":"FunctionDefinition","parameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"mutability":"mutable","name":"spender","nameLocation":"452:7:5","nodeType":"VariableDeclaration","scope":1264,"src":"444:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1259,"mutability":"mutable","name":"addedValue","nameLocation":"469:10:5","nodeType":"VariableDeclaration","scope":1264,"src":"461:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"443:37:5"},"returnParameters":{"id":1263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"success","nameLocation":"504:7:5","nodeType":"VariableDeclaration","scope":1264,"src":"499:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1261,"name":"bool","nodeType":"ElementaryTypeName","src":"499:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"498:14:5"},"scope":1318,"src":"418:95:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d73dd623","id":1271,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nameLocation":"526:16:5","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1266,"mutability":"mutable","name":"spender","nameLocation":"551:7:5","nodeType":"VariableDeclaration","scope":1271,"src":"543:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"subtractedValue","nameLocation":"568:15:5","nodeType":"VariableDeclaration","scope":1271,"src":"560:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1267,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"542:42:5"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[],"src":"593:0:5"},"scope":1318,"src":"517:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":1276,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"607:4:5","nodeType":"FunctionDefinition","parameters":{"id":1272,"nodeType":"ParameterList","parameters":[],"src":"611:2:5"},"returnParameters":{"id":1275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1274,"mutability":"mutable","name":"tokenName","nameLocation":"651:9:5","nodeType":"VariableDeclaration","scope":1276,"src":"637:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1273,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"636:25:5"},"scope":1318,"src":"598:64:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":1281,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"675:6:5","nodeType":"FunctionDefinition","parameters":{"id":1277,"nodeType":"ParameterList","parameters":[],"src":"681:2:5"},"returnParameters":{"id":1280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1279,"mutability":"mutable","name":"tokenSymbol","nameLocation":"721:11:5","nodeType":"VariableDeclaration","scope":1281,"src":"707:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1278,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"706:27:5"},"scope":1318,"src":"666:68:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":1286,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"747:11:5","nodeType":"FunctionDefinition","parameters":{"id":1282,"nodeType":"ParameterList","parameters":[],"src":"758:2:5"},"returnParameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1284,"mutability":"mutable","name":"totalTokensIssued","nameLocation":"792:17:5","nodeType":"VariableDeclaration","scope":1286,"src":"784:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1283,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:27:5"},"scope":1318,"src":"738:73:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":1295,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"824:8:5","nodeType":"FunctionDefinition","parameters":{"id":1291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"to","nameLocation":"841:2:5","nodeType":"VariableDeclaration","scope":1295,"src":"833:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"833:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1290,"mutability":"mutable","name":"value","nameLocation":"853:5:5","nodeType":"VariableDeclaration","scope":1295,"src":"845:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1289,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:27:5"},"returnParameters":{"id":1294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"success","nameLocation":"883:7:5","nodeType":"VariableDeclaration","scope":1295,"src":"878:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1292,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"877:14:5"},"scope":1318,"src":"815:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4000aea0","id":1306,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"905:15:5","nodeType":"FunctionDefinition","parameters":{"id":1302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1297,"mutability":"mutable","name":"to","nameLocation":"929:2:5","nodeType":"VariableDeclaration","scope":1306,"src":"921:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1296,"name":"address","nodeType":"ElementaryTypeName","src":"921:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1299,"mutability":"mutable","name":"value","nameLocation":"941:5:5","nodeType":"VariableDeclaration","scope":1306,"src":"933:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1301,"mutability":"mutable","name":"data","nameLocation":"963:4:5","nodeType":"VariableDeclaration","scope":1306,"src":"948:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1300,"name":"bytes","nodeType":"ElementaryTypeName","src":"948:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"920:48:5"},"returnParameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"success","nameLocation":"992:7:5","nodeType":"VariableDeclaration","scope":1306,"src":"987:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1303,"name":"bool","nodeType":"ElementaryTypeName","src":"987:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"986:14:5"},"scope":1318,"src":"896:105:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":1317,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1014:12:5","nodeType":"FunctionDefinition","parameters":{"id":1313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"from","nameLocation":"1035:4:5","nodeType":"VariableDeclaration","scope":1317,"src":"1027:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1307,"name":"address","nodeType":"ElementaryTypeName","src":"1027:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"to","nameLocation":"1049:2:5","nodeType":"VariableDeclaration","scope":1317,"src":"1041:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1309,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1312,"mutability":"mutable","name":"value","nameLocation":"1061:5:5","nodeType":"VariableDeclaration","scope":1317,"src":"1053:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1311,"name":"uint256","nodeType":"ElementaryTypeName","src":"1053:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:41:5"},"returnParameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1315,"mutability":"mutable","name":"success","nameLocation":"1091:7:5","nodeType":"VariableDeclaration","scope":1317,"src":"1086:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1314,"name":"bool","nodeType":"ElementaryTypeName","src":"1086:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1085:14:5"},"scope":1318,"src":"1005:95:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1319,"src":"57:1045:5","usedErrors":[],"usedEvents":[]}],"src":"32:1071:5"},"id":5},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[1376]},"id":1377,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1320,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"57:5275:6","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":1376,"linearizedBaseContracts":[1376],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:6","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":1327,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:6","nodeType":"ErrorDefinition","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"have","nameLocation":"5413:4:6","nodeType":"VariableDeclaration","scope":1327,"src":"5405:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1325,"mutability":"mutable","name":"want","nameLocation":"5427:4:6","nodeType":"VariableDeclaration","scope":1327,"src":"5419:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1324,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:6"},"src":"5373:60:6"},{"constant":false,"id":1329,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:6","nodeType":"VariableDeclaration","scope":1376,"src":"5436:40:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1328,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":1339,"nodeType":"Block","src":"5593:43:6","statements":[{"expression":{"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1335,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"5599:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1336,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"5616:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1338,"nodeType":"ExpressionStatement","src":"5599:32:6"}]},"documentation":{"id":1330,"nodeType":"StructuredDocumentation","src":"5481:72:6","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":1340,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:6","nodeType":"VariableDeclaration","scope":1340,"src":"5568:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:6"},"returnParameters":{"id":1334,"nodeType":"ParameterList","parameters":[],"src":"5593:0:6"},"scope":1376,"src":"5556:80:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":1341,"nodeType":"StructuredDocumentation","src":"5640:686:6","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":1349,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:6","nodeType":"FunctionDefinition","parameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1343,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:6","nodeType":"VariableDeclaration","scope":1349,"src":"6357:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1346,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:6","nodeType":"VariableDeclaration","scope":1349,"src":"6376:28:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1344,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1345,"nodeType":"ArrayTypeName","src":"6376:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:6"},"returnParameters":{"id":1348,"nodeType":"ParameterList","parameters":[],"src":"6422:0:6"},"scope":1376,"src":"6329:94:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"6707:167:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1357,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6721:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6717:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1359,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"6731:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1368,"nodeType":"IfStatement","src":"6713:109:6","trueBody":{"id":1367,"nodeType":"Block","src":"6747:75:6","statements":[{"errorCall":{"arguments":[{"expression":{"id":1362,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:6","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6792:6:6","memberName":"sender","nodeType":"MemberAccess","src":"6788:10:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1364,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"6800:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1361,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"6762:25:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6762:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1366,"nodeType":"RevertStatement","src":"6755:60:6"}]}},{"expression":{"arguments":[{"id":1370,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"6846:9:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1371,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"6857:11:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":1369,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"6827:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6827:42:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1373,"nodeType":"ExpressionStatement","src":"6827:42:6"}]},"functionSelector":"1fe543e3","id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:6","nodeType":"FunctionDefinition","parameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:6","nodeType":"VariableDeclaration","scope":1375,"src":"6649:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1350,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1354,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:6","nodeType":"VariableDeclaration","scope":1375,"src":"6668:28:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1353,"nodeType":"ArrayTypeName","src":"6668:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:6"},"returnParameters":{"id":1356,"nodeType":"ParameterList","parameters":[],"src":"6707:0:6"},"scope":1376,"src":"6618:256:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1377,"src":"5333:1543:6","usedErrors":[1327],"usedEvents":[]}],"src":"32:6845:6"},"id":6},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[3021],"Ownable":[1524]},"id":1525,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1378,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:7"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":1380,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1525,"sourceUnit":3022,"src":"128:45:7","symbolAliases":[{"foreign":{"id":1379,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"136:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1382,"name":"Context","nameLocations":["692:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":3021,"src":"692:7:7"},"id":1383,"nodeType":"InheritanceSpecifier","src":"692:7:7"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1381,"nodeType":"StructuredDocumentation","src":"175:487:7","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":1524,"linearizedBaseContracts":[1524,3021],"name":"Ownable","nameLocation":"681:7:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1385,"mutability":"mutable","name":"_owner","nameLocation":"722:6:7","nodeType":"VariableDeclaration","scope":1524,"src":"706:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":1386,"nodeType":"StructuredDocumentation","src":"735:85:7","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":1390,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:7","nodeType":"ErrorDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1388,"mutability":"mutable","name":"account","nameLocation":"866:7:7","nodeType":"VariableDeclaration","scope":1390,"src":"858:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1387,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:7"},"src":"825:50:7"},{"documentation":{"id":1391,"nodeType":"StructuredDocumentation","src":"881:82:7","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":1395,"name":"OwnableInvalidOwner","nameLocation":"974:19:7","nodeType":"ErrorDefinition","parameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1393,"mutability":"mutable","name":"owner","nameLocation":"1002:5:7","nodeType":"VariableDeclaration","scope":1395,"src":"994:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1392,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:7"},"src":"968:41:7"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":1401,"name":"OwnershipTransferred","nameLocation":"1021:20:7","nodeType":"EventDefinition","parameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:7","nodeType":"VariableDeclaration","scope":1401,"src":"1042:29:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1399,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:7","nodeType":"VariableDeclaration","scope":1401,"src":"1073:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1398,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:7"},"src":"1015:84:7"},{"body":{"id":1426,"nodeType":"Block","src":"1259:153:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1407,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"1273:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1409,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1408,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:7","typeDescriptions":{}}},"id":1411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1421,"nodeType":"IfStatement","src":"1269:95:7","trueBody":{"id":1420,"nodeType":"Block","src":"1301:63:7","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:7","typeDescriptions":{}}},"id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1413,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"1322:19:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1419,"nodeType":"RevertStatement","src":"1315:38:7"}]}},{"expression":{"arguments":[{"id":1423,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"1392:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1422,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"1373:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1425,"nodeType":"ExpressionStatement","src":"1373:32:7"}]},"documentation":{"id":1402,"nodeType":"StructuredDocumentation","src":"1105:115:7","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":1427,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1404,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:7","nodeType":"VariableDeclaration","scope":1427,"src":"1237:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1403,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:7"},"returnParameters":{"id":1406,"nodeType":"ParameterList","parameters":[],"src":"1259:0:7"},"scope":1524,"src":"1225:187:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1434,"nodeType":"Block","src":"1521:41:7","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1430,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"1531:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1432,"nodeType":"ExpressionStatement","src":"1531:13:7"},{"id":1433,"nodeType":"PlaceholderStatement","src":"1554:1:7"}]},"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"1418:77:7","text":" @dev Throws if called by any account other than the owner."},"id":1435,"name":"onlyOwner","nameLocation":"1509:9:7","nodeType":"ModifierDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[],"src":"1518:2:7"},"src":"1500:62:7","virtual":false,"visibility":"internal"},{"body":{"id":1443,"nodeType":"Block","src":"1693:30:7","statements":[{"expression":{"id":1441,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"1710:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1440,"id":1442,"nodeType":"Return","src":"1703:13:7"}]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"1568:65:7","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":1444,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:7","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"1652:2:7"},"returnParameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1444,"src":"1684:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1438,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:7"},"scope":1524,"src":"1638:85:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1460,"nodeType":"Block","src":"1841:117:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1448,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"1855:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1450,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"1866:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1459,"nodeType":"IfStatement","src":"1851:101:7","trueBody":{"id":1458,"nodeType":"Block","src":"1880:72:7","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1454,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"1928:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1453,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"1901:26:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1457,"nodeType":"RevertStatement","src":"1894:47:7"}]}}]},"documentation":{"id":1445,"nodeType":"StructuredDocumentation","src":"1729:62:7","text":" @dev Throws if the sender is not the owner."},"id":1461,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:7","nodeType":"FunctionDefinition","parameters":{"id":1446,"nodeType":"ParameterList","parameters":[],"src":"1816:2:7"},"returnParameters":{"id":1447,"nodeType":"ParameterList","parameters":[],"src":"1841:0:7"},"scope":1524,"src":"1796:162:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1474,"nodeType":"Block","src":"2347:47:7","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1469,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1468,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:7","typeDescriptions":{}}},"id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1467,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"2357:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1473,"nodeType":"ExpressionStatement","src":"2357:30:7"}]},"documentation":{"id":1462,"nodeType":"StructuredDocumentation","src":"1964:324:7","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":1475,"implemented":true,"kind":"function","modifiers":[{"id":1465,"kind":"modifierInvocation","modifierName":{"id":1464,"name":"onlyOwner","nameLocations":["2337:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":1435,"src":"2337:9:7"},"nodeType":"ModifierInvocation","src":"2337:9:7"}],"name":"renounceOwnership","nameLocation":"2302:17:7","nodeType":"FunctionDefinition","parameters":{"id":1463,"nodeType":"ParameterList","parameters":[],"src":"2319:2:7"},"returnParameters":{"id":1466,"nodeType":"ParameterList","parameters":[],"src":"2347:0:7"},"scope":1524,"src":"2293:101:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1502,"nodeType":"Block","src":"2613:145:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1483,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2627:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1484,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:7","typeDescriptions":{}}},"id":1487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1497,"nodeType":"IfStatement","src":"2623:91:7","trueBody":{"id":1496,"nodeType":"Block","src":"2651:63:7","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1490,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:7","typeDescriptions":{}}},"id":1493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1489,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"2672:19:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1495,"nodeType":"RevertStatement","src":"2665:38:7"}]}},{"expression":{"arguments":[{"id":1499,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"2742:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1498,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"2723:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1501,"nodeType":"ExpressionStatement","src":"2723:28:7"}]},"documentation":{"id":1476,"nodeType":"StructuredDocumentation","src":"2400:138:7","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":1503,"implemented":true,"kind":"function","modifiers":[{"id":1481,"kind":"modifierInvocation","modifierName":{"id":1480,"name":"onlyOwner","nameLocations":["2603:9:7"],"nodeType":"IdentifierPath","referencedDeclaration":1435,"src":"2603:9:7"},"nodeType":"ModifierInvocation","src":"2603:9:7"}],"name":"transferOwnership","nameLocation":"2552:17:7","nodeType":"FunctionDefinition","parameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1478,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:7","nodeType":"VariableDeclaration","scope":1503,"src":"2570:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1477,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:7"},"returnParameters":{"id":1482,"nodeType":"ParameterList","parameters":[],"src":"2613:0:7"},"scope":1524,"src":"2543:215:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1522,"nodeType":"Block","src":"2975:124:7","statements":[{"assignments":[1510],"declarations":[{"constant":false,"id":1510,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:7","nodeType":"VariableDeclaration","scope":1522,"src":"2985:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1509,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1512,"initialValue":{"id":1511,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"3004:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:7"},{"expression":{"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1513,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"3020:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1514,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"3029:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1516,"nodeType":"ExpressionStatement","src":"3020:17:7"},{"eventCall":{"arguments":[{"id":1518,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"3073:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1519,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"3083:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1517,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1401,"src":"3052:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1521,"nodeType":"EmitStatement","src":"3047:45:7"}]},"documentation":{"id":1504,"nodeType":"StructuredDocumentation","src":"2764:143:7","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:7","nodeType":"FunctionDefinition","parameters":{"id":1507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:7","nodeType":"VariableDeclaration","scope":1523,"src":"2940:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1505,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:7"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[],"src":"2975:0:7"},"scope":1524,"src":"2912:187:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1525,"src":"663:2438:7","usedErrors":[1390,1395],"usedEvents":[1401]}],"src":"102:3000:7"},"id":7},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[3312]},"id":1529,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1526,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":1528,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1529,"sourceUnit":3313,"src":"132:59:8","symbolAliases":[{"foreign":{"id":1527,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"140:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:8"},"id":8},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","exportedSymbols":{"IERC165":[3312],"IERC4906":[1552],"IERC721":[2819]},"id":1553,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1530,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:9"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":1532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1553,"sourceUnit":1529,"src":"133:38:9","symbolAliases":[{"foreign":{"id":1531,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"141:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","file":"./IERC721.sol","id":1534,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1553,"sourceUnit":1557,"src":"172:38:9","symbolAliases":[{"foreign":{"id":1533,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"180:7:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1536,"name":"IERC165","nameLocations":["279:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"279:7:9"},"id":1537,"nodeType":"InheritanceSpecifier","src":"279:7:9"},{"baseName":{"id":1538,"name":"IERC721","nameLocations":["288:7:9"],"nodeType":"IdentifierPath","referencedDeclaration":2819,"src":"288:7:9"},"id":1539,"nodeType":"InheritanceSpecifier","src":"288:7:9"}],"canonicalName":"IERC4906","contractDependencies":[],"contractKind":"interface","documentation":{"id":1535,"nodeType":"StructuredDocumentation","src":"212:45:9","text":"@title EIP-721 Metadata Update Extension"},"fullyImplemented":false,"id":1552,"linearizedBaseContracts":[1552,2819,3312],"name":"IERC4906","nameLocation":"267:8:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1540,"nodeType":"StructuredDocumentation","src":"302:201:9","text":"@dev This event emits when the metadata of a token is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFT."},"eventSelector":"f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7","id":1544,"name":"MetadataUpdate","nameLocation":"514:14:9","nodeType":"EventDefinition","parameters":{"id":1543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1542,"indexed":false,"mutability":"mutable","name":"_tokenId","nameLocation":"537:8:9","nodeType":"VariableDeclaration","scope":1544,"src":"529:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1541,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"528:18:9"},"src":"508:39:9"},{"anonymous":false,"documentation":{"id":1545,"nodeType":"StructuredDocumentation","src":"553:212:9","text":"@dev This event emits when the metadata of a range of tokens is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFTs."},"eventSelector":"6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c","id":1551,"name":"BatchMetadataUpdate","nameLocation":"776:19:9","nodeType":"EventDefinition","parameters":{"id":1550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1547,"indexed":false,"mutability":"mutable","name":"_fromTokenId","nameLocation":"804:12:9","nodeType":"VariableDeclaration","scope":1551,"src":"796:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1546,"name":"uint256","nodeType":"ElementaryTypeName","src":"796:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1549,"indexed":false,"mutability":"mutable","name":"_toTokenId","nameLocation":"826:10:9","nodeType":"VariableDeclaration","scope":1551,"src":"818:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1548,"name":"uint256","nodeType":"ElementaryTypeName","src":"818:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"795:42:9"},"src":"770:68:9"}],"scope":1553,"src":"257:583:9","usedErrors":[],"usedEvents":[1544,1551,2718,2727,2736]}],"src":"107:734:9"},"id":9},"@openzeppelin/contracts/interfaces/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[2819]},"id":1557,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1554,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../token/ERC721/IERC721.sol","id":1556,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1557,"sourceUnit":2820,"src":"132:52:10","symbolAliases":[{"foreign":{"id":1555,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"140:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:79:10"},"id":10},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[1693],"IERC20Errors":[1598],"IERC721Errors":[1646]},"id":1694,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1558,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"112:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1559,"nodeType":"StructuredDocumentation","src":"138:139:11","text":" @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."},"fullyImplemented":true,"id":1598,"linearizedBaseContracts":[1598],"name":"IERC20Errors","nameLocation":"288:12:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1560,"nodeType":"StructuredDocumentation","src":"307:309:11","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":1568,"name":"ERC20InsufficientBalance","nameLocation":"627:24:11","nodeType":"ErrorDefinition","parameters":{"id":1567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1562,"mutability":"mutable","name":"sender","nameLocation":"660:6:11","nodeType":"VariableDeclaration","scope":1568,"src":"652:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1564,"mutability":"mutable","name":"balance","nameLocation":"676:7:11","nodeType":"VariableDeclaration","scope":1568,"src":"668:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1563,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1566,"mutability":"mutable","name":"needed","nameLocation":"693:6:11","nodeType":"VariableDeclaration","scope":1568,"src":"685:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1565,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"651:49:11"},"src":"621:80:11"},{"documentation":{"id":1569,"nodeType":"StructuredDocumentation","src":"707:152:11","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":1573,"name":"ERC20InvalidSender","nameLocation":"870:18:11","nodeType":"ErrorDefinition","parameters":{"id":1572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1571,"mutability":"mutable","name":"sender","nameLocation":"897:6:11","nodeType":"VariableDeclaration","scope":1573,"src":"889:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1570,"name":"address","nodeType":"ElementaryTypeName","src":"889:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"888:16:11"},"src":"864:41:11"},{"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"911:159:11","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":1578,"name":"ERC20InvalidReceiver","nameLocation":"1081:20:11","nodeType":"ErrorDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1576,"mutability":"mutable","name":"receiver","nameLocation":"1110:8:11","nodeType":"VariableDeclaration","scope":1578,"src":"1102:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1575,"name":"address","nodeType":"ElementaryTypeName","src":"1102:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1101:18:11"},"src":"1075:45:11"},{"documentation":{"id":1579,"nodeType":"StructuredDocumentation","src":"1126:345:11","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":1587,"name":"ERC20InsufficientAllowance","nameLocation":"1482:26:11","nodeType":"ErrorDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"spender","nameLocation":"1517:7:11","nodeType":"VariableDeclaration","scope":1587,"src":"1509:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1580,"name":"address","nodeType":"ElementaryTypeName","src":"1509:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"allowance","nameLocation":"1534:9:11","nodeType":"VariableDeclaration","scope":1587,"src":"1526:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"1526:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1585,"mutability":"mutable","name":"needed","nameLocation":"1553:6:11","nodeType":"VariableDeclaration","scope":1587,"src":"1545:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1584,"name":"uint256","nodeType":"ElementaryTypeName","src":"1545:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1508:52:11"},"src":"1476:85:11"},{"documentation":{"id":1588,"nodeType":"StructuredDocumentation","src":"1567:174:11","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":1592,"name":"ERC20InvalidApprover","nameLocation":"1752:20:11","nodeType":"ErrorDefinition","parameters":{"id":1591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1590,"mutability":"mutable","name":"approver","nameLocation":"1781:8:11","nodeType":"VariableDeclaration","scope":1592,"src":"1773:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1589,"name":"address","nodeType":"ElementaryTypeName","src":"1773:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1772:18:11"},"src":"1746:45:11"},{"documentation":{"id":1593,"nodeType":"StructuredDocumentation","src":"1797:195:11","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":1597,"name":"ERC20InvalidSpender","nameLocation":"2003:19:11","nodeType":"ErrorDefinition","parameters":{"id":1596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1595,"mutability":"mutable","name":"spender","nameLocation":"2031:7:11","nodeType":"VariableDeclaration","scope":1597,"src":"2023:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1594,"name":"address","nodeType":"ElementaryTypeName","src":"2023:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2022:17:11"},"src":"1997:43:11"}],"scope":1694,"src":"278:1764:11","usedErrors":[1568,1573,1578,1587,1592,1597],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1599,"nodeType":"StructuredDocumentation","src":"2044:141:11","text":" @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."},"fullyImplemented":true,"id":1646,"linearizedBaseContracts":[1646],"name":"IERC721Errors","nameLocation":"2196:13:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1600,"nodeType":"StructuredDocumentation","src":"2216:219:11","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":1604,"name":"ERC721InvalidOwner","nameLocation":"2446:18:11","nodeType":"ErrorDefinition","parameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"owner","nameLocation":"2473:5:11","nodeType":"VariableDeclaration","scope":1604,"src":"2465:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1601,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2464:15:11"},"src":"2440:40:11"},{"documentation":{"id":1605,"nodeType":"StructuredDocumentation","src":"2486:132:11","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":1609,"name":"ERC721NonexistentToken","nameLocation":"2629:22:11","nodeType":"ErrorDefinition","parameters":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1607,"mutability":"mutable","name":"tokenId","nameLocation":"2660:7:11","nodeType":"VariableDeclaration","scope":1609,"src":"2652:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1606,"name":"uint256","nodeType":"ElementaryTypeName","src":"2652:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2651:17:11"},"src":"2623:46:11"},{"documentation":{"id":1610,"nodeType":"StructuredDocumentation","src":"2675:289:11","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":1618,"name":"ERC721IncorrectOwner","nameLocation":"2975:20:11","nodeType":"ErrorDefinition","parameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1612,"mutability":"mutable","name":"sender","nameLocation":"3004:6:11","nodeType":"VariableDeclaration","scope":1618,"src":"2996:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1611,"name":"address","nodeType":"ElementaryTypeName","src":"2996:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1614,"mutability":"mutable","name":"tokenId","nameLocation":"3020:7:11","nodeType":"VariableDeclaration","scope":1618,"src":"3012:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1613,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"owner","nameLocation":"3037:5:11","nodeType":"VariableDeclaration","scope":1618,"src":"3029:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1615,"name":"address","nodeType":"ElementaryTypeName","src":"3029:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2995:48:11"},"src":"2969:75:11"},{"documentation":{"id":1619,"nodeType":"StructuredDocumentation","src":"3050:152:11","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":1623,"name":"ERC721InvalidSender","nameLocation":"3213:19:11","nodeType":"ErrorDefinition","parameters":{"id":1622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"sender","nameLocation":"3241:6:11","nodeType":"VariableDeclaration","scope":1623,"src":"3233:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1620,"name":"address","nodeType":"ElementaryTypeName","src":"3233:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3232:16:11"},"src":"3207:42:11"},{"documentation":{"id":1624,"nodeType":"StructuredDocumentation","src":"3255:159:11","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":1628,"name":"ERC721InvalidReceiver","nameLocation":"3425:21:11","nodeType":"ErrorDefinition","parameters":{"id":1627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1626,"mutability":"mutable","name":"receiver","nameLocation":"3455:8:11","nodeType":"VariableDeclaration","scope":1628,"src":"3447:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1625,"name":"address","nodeType":"ElementaryTypeName","src":"3447:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3446:18:11"},"src":"3419:46:11"},{"documentation":{"id":1629,"nodeType":"StructuredDocumentation","src":"3471:247:11","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":1635,"name":"ERC721InsufficientApproval","nameLocation":"3729:26:11","nodeType":"ErrorDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"operator","nameLocation":"3764:8:11","nodeType":"VariableDeclaration","scope":1635,"src":"3756:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1630,"name":"address","nodeType":"ElementaryTypeName","src":"3756:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1633,"mutability":"mutable","name":"tokenId","nameLocation":"3782:7:11","nodeType":"VariableDeclaration","scope":1635,"src":"3774:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint256","nodeType":"ElementaryTypeName","src":"3774:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3755:35:11"},"src":"3723:68:11"},{"documentation":{"id":1636,"nodeType":"StructuredDocumentation","src":"3797:174:11","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":1640,"name":"ERC721InvalidApprover","nameLocation":"3982:21:11","nodeType":"ErrorDefinition","parameters":{"id":1639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1638,"mutability":"mutable","name":"approver","nameLocation":"4012:8:11","nodeType":"VariableDeclaration","scope":1640,"src":"4004:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1637,"name":"address","nodeType":"ElementaryTypeName","src":"4004:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4003:18:11"},"src":"3976:46:11"},{"documentation":{"id":1641,"nodeType":"StructuredDocumentation","src":"4028:197:11","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":1645,"name":"ERC721InvalidOperator","nameLocation":"4236:21:11","nodeType":"ErrorDefinition","parameters":{"id":1644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1643,"mutability":"mutable","name":"operator","nameLocation":"4266:8:11","nodeType":"VariableDeclaration","scope":1645,"src":"4258:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1642,"name":"address","nodeType":"ElementaryTypeName","src":"4258:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4257:18:11"},"src":"4230:46:11"}],"scope":1694,"src":"2186:2092:11","usedErrors":[1604,1609,1618,1623,1628,1635,1640,1645],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":1647,"nodeType":"StructuredDocumentation","src":"4280:143:11","text":" @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."},"fullyImplemented":true,"id":1693,"linearizedBaseContracts":[1693],"name":"IERC1155Errors","nameLocation":"4434:14:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"4455:361:11","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":1658,"name":"ERC1155InsufficientBalance","nameLocation":"4827:26:11","nodeType":"ErrorDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1650,"mutability":"mutable","name":"sender","nameLocation":"4862:6:11","nodeType":"VariableDeclaration","scope":1658,"src":"4854:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1649,"name":"address","nodeType":"ElementaryTypeName","src":"4854:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1652,"mutability":"mutable","name":"balance","nameLocation":"4878:7:11","nodeType":"VariableDeclaration","scope":1658,"src":"4870:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1651,"name":"uint256","nodeType":"ElementaryTypeName","src":"4870:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1654,"mutability":"mutable","name":"needed","nameLocation":"4895:6:11","nodeType":"VariableDeclaration","scope":1658,"src":"4887:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1656,"mutability":"mutable","name":"tokenId","nameLocation":"4911:7:11","nodeType":"VariableDeclaration","scope":1658,"src":"4903:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1655,"name":"uint256","nodeType":"ElementaryTypeName","src":"4903:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4853:66:11"},"src":"4821:99:11"},{"documentation":{"id":1659,"nodeType":"StructuredDocumentation","src":"4926:152:11","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":1663,"name":"ERC1155InvalidSender","nameLocation":"5089:20:11","nodeType":"ErrorDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"sender","nameLocation":"5118:6:11","nodeType":"VariableDeclaration","scope":1663,"src":"5110:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1660,"name":"address","nodeType":"ElementaryTypeName","src":"5110:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5109:16:11"},"src":"5083:43:11"},{"documentation":{"id":1664,"nodeType":"StructuredDocumentation","src":"5132:159:11","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":1668,"name":"ERC1155InvalidReceiver","nameLocation":"5302:22:11","nodeType":"ErrorDefinition","parameters":{"id":1667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1666,"mutability":"mutable","name":"receiver","nameLocation":"5333:8:11","nodeType":"VariableDeclaration","scope":1668,"src":"5325:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1665,"name":"address","nodeType":"ElementaryTypeName","src":"5325:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5324:18:11"},"src":"5296:47:11"},{"documentation":{"id":1669,"nodeType":"StructuredDocumentation","src":"5349:256:11","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":1675,"name":"ERC1155MissingApprovalForAll","nameLocation":"5616:28:11","nodeType":"ErrorDefinition","parameters":{"id":1674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1671,"mutability":"mutable","name":"operator","nameLocation":"5653:8:11","nodeType":"VariableDeclaration","scope":1675,"src":"5645:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"5645:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1673,"mutability":"mutable","name":"owner","nameLocation":"5671:5:11","nodeType":"VariableDeclaration","scope":1675,"src":"5663:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1672,"name":"address","nodeType":"ElementaryTypeName","src":"5663:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5644:33:11"},"src":"5610:68:11"},{"documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"5684:174:11","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":1680,"name":"ERC1155InvalidApprover","nameLocation":"5869:22:11","nodeType":"ErrorDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"approver","nameLocation":"5900:8:11","nodeType":"VariableDeclaration","scope":1680,"src":"5892:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1677,"name":"address","nodeType":"ElementaryTypeName","src":"5892:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5891:18:11"},"src":"5863:47:11"},{"documentation":{"id":1681,"nodeType":"StructuredDocumentation","src":"5916:197:11","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":1685,"name":"ERC1155InvalidOperator","nameLocation":"6124:22:11","nodeType":"ErrorDefinition","parameters":{"id":1684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1683,"mutability":"mutable","name":"operator","nameLocation":"6155:8:11","nodeType":"VariableDeclaration","scope":1685,"src":"6147:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1682,"name":"address","nodeType":"ElementaryTypeName","src":"6147:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6146:18:11"},"src":"6118:47:11"},{"documentation":{"id":1686,"nodeType":"StructuredDocumentation","src":"6171:280:11","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":1692,"name":"ERC1155InvalidArrayLength","nameLocation":"6462:25:11","nodeType":"ErrorDefinition","parameters":{"id":1691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"idsLength","nameLocation":"6496:9:11","nodeType":"VariableDeclaration","scope":1692,"src":"6488:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"6488:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1690,"mutability":"mutable","name":"valuesLength","nameLocation":"6515:12:11","nodeType":"VariableDeclaration","scope":1692,"src":"6507:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1689,"name":"uint256","nodeType":"ElementaryTypeName","src":"6507:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6487:41:11"},"src":"6456:73:11"}],"scope":1694,"src":"4424:2107:11","usedErrors":[1658,1663,1668,1675,1680,1685,1692],"usedEvents":[]}],"src":"112:6420:11"},"id":11},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Context":[3021],"ERC165":[3300],"ERC721":[2702],"IERC165":[3312],"IERC721":[2819],"IERC721Errors":[1646],"IERC721Metadata":[2991],"IERC721Receiver":[2837],"Strings":[3276]},"id":2703,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1695,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":1697,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":2820,"src":"133:38:12","symbolAliases":[{"foreign":{"id":1696,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"141:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":1699,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":2838,"src":"172:54:12","symbolAliases":[{"foreign":{"id":1698,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"180:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":1701,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":2992,"src":"227:65:12","symbolAliases":[{"foreign":{"id":1700,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"235:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":1703,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":3022,"src":"293:48:12","symbolAliases":[{"foreign":{"id":1702,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3021,"src":"301:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":1705,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":3277,"src":"342:48:12","symbolAliases":[{"foreign":{"id":1704,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"350:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":1708,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":3301,"src":"391:69:12","symbolAliases":[{"foreign":{"id":1706,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"399:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1707,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"408:6:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":1710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2703,"sourceUnit":1694,"src":"461:66:12","symbolAliases":[{"foreign":{"id":1709,"name":"IERC721Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"469:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1712,"name":"Context","nameLocations":["804:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3021,"src":"804:7:12"},"id":1713,"nodeType":"InheritanceSpecifier","src":"804:7:12"},{"baseName":{"id":1714,"name":"ERC165","nameLocations":["813:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3300,"src":"813:6:12"},"id":1715,"nodeType":"InheritanceSpecifier","src":"813:6:12"},{"baseName":{"id":1716,"name":"IERC721","nameLocations":["821:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2819,"src":"821:7:12"},"id":1717,"nodeType":"InheritanceSpecifier","src":"821:7:12"},{"baseName":{"id":1718,"name":"IERC721Metadata","nameLocations":["830:15:12"],"nodeType":"IdentifierPath","referencedDeclaration":2991,"src":"830:15:12"},"id":1719,"nodeType":"InheritanceSpecifier","src":"830:15:12"},{"baseName":{"id":1720,"name":"IERC721Errors","nameLocations":["847:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":1646,"src":"847:13:12"},"id":1721,"nodeType":"InheritanceSpecifier","src":"847:13:12"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":1711,"nodeType":"StructuredDocumentation","src":"529:246:12","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":2702,"linearizedBaseContracts":[2702,1646,2991,2819,3300,3312,3021],"name":"ERC721","nameLocation":"794:6:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1724,"libraryName":{"id":1722,"name":"Strings","nameLocations":["873:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3276,"src":"873:7:12"},"nodeType":"UsingForDirective","src":"867:26:12","typeName":{"id":1723,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1726,"mutability":"mutable","name":"_name","nameLocation":"932:5:12","nodeType":"VariableDeclaration","scope":2702,"src":"917:20:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1725,"name":"string","nodeType":"ElementaryTypeName","src":"917:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1728,"mutability":"mutable","name":"_symbol","nameLocation":"979:7:12","nodeType":"VariableDeclaration","scope":2702,"src":"964:22:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1727,"name":"string","nodeType":"ElementaryTypeName","src":"964:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1732,"mutability":"mutable","name":"_owners","nameLocation":"1037:7:12","nodeType":"VariableDeclaration","scope":2702,"src":"993:51:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1731,"keyName":"tokenId","keyNameLocation":"1009:7:12","keyType":{"id":1729,"name":"uint256","nodeType":"ElementaryTypeName","src":"1001:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"993:35:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1730,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1736,"mutability":"mutable","name":"_balances","nameLocation":"1093:9:12","nodeType":"VariableDeclaration","scope":2702,"src":"1051:51:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1735,"keyName":"owner","keyNameLocation":"1067:5:12","keyType":{"id":1733,"name":"address","nodeType":"ElementaryTypeName","src":"1059:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1051:33:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1076:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1740,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1153:15:12","nodeType":"VariableDeclaration","scope":2702,"src":"1109:59:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1739,"keyName":"tokenId","keyNameLocation":"1125:7:12","keyType":{"id":1737,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1109:35:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1738,"name":"address","nodeType":"ElementaryTypeName","src":"1136:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1746,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1243:18:12","nodeType":"VariableDeclaration","scope":2702,"src":"1175:86:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1745,"keyName":"owner","keyNameLocation":"1191:5:12","keyType":{"id":1741,"name":"address","nodeType":"ElementaryTypeName","src":"1183:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1175:59:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1744,"keyName":"operator","keyNameLocation":"1216:8:12","keyType":{"id":1742,"name":"address","nodeType":"ElementaryTypeName","src":"1208:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1200:33:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1743,"name":"bool","nodeType":"ElementaryTypeName","src":"1228:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1762,"nodeType":"Block","src":"1437:57:12","statements":[{"expression":{"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1754,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"1447:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1755,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"1455:5:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1447:13:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1757,"nodeType":"ExpressionStatement","src":"1447:13:12"},{"expression":{"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1758,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"1470:7:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1759,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"1480:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1470:17:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1761,"nodeType":"ExpressionStatement","src":"1470:17:12"}]},"documentation":{"id":1747,"nodeType":"StructuredDocumentation","src":"1268:108:12","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":1763,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"name_","nameLocation":"1407:5:12","nodeType":"VariableDeclaration","scope":1763,"src":"1393:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1748,"name":"string","nodeType":"ElementaryTypeName","src":"1393:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1751,"mutability":"mutable","name":"symbol_","nameLocation":"1428:7:12","nodeType":"VariableDeclaration","scope":1763,"src":"1414:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1750,"name":"string","nodeType":"ElementaryTypeName","src":"1414:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1392:44:12"},"returnParameters":{"id":1753,"nodeType":"ParameterList","parameters":[],"src":"1437:0:12"},"scope":2702,"src":"1381:113:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3299,3311],"body":{"id":1793,"nodeType":"Block","src":"1669:192:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1774,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1698:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1776,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"1718:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2819_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$2819_$","typeString":"type(contract IERC721)"}],"id":1775,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1713:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1713:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$2819","typeString":"type(contract IERC721)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1727:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1713:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1698:40:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1780,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1754:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1782,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2991,"src":"1774:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2991_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2991_$","typeString":"type(contract IERC721Metadata)"}],"id":1781,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1769:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1769:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2991","typeString":"type(contract IERC721Metadata)"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1791:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1769:33:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1754:48:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:104:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1789,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1842:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1787,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1818:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$2702_$","typeString":"type(contract super ERC721)"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1824:17:12","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3299,"src":"1818:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1818:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1698:156:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1773,"id":1792,"nodeType":"Return","src":"1679:175:12"}]},"documentation":{"id":1764,"nodeType":"StructuredDocumentation","src":"1500:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1794,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1570:17:12","nodeType":"FunctionDefinition","overrides":{"id":1770,"nodeType":"OverrideSpecifier","overrides":[{"id":1768,"name":"ERC165","nameLocations":["1637:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3300,"src":"1637:6:12"},{"id":1769,"name":"IERC165","nameLocations":["1645:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"1645:7:12"}],"src":"1628:25:12"},"parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"interfaceId","nameLocation":"1595:11:12","nodeType":"VariableDeclaration","scope":1794,"src":"1588:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1765,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1588:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1587:20:12"},"returnParameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1772,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1794,"src":"1663:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1771,"name":"bool","nodeType":"ElementaryTypeName","src":"1663:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1662:6:12"},"scope":2702,"src":"1561:300:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2744],"body":{"id":1821,"nodeType":"Block","src":"1992:136:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1802,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"2006:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2015:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1803,"name":"address","nodeType":"ElementaryTypeName","src":"2015:7:12","typeDescriptions":{}}},"id":1806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2015:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2006:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1816,"nodeType":"IfStatement","src":"2002:87:12","trueBody":{"id":1815,"nodeType":"Block","src":"2027:62:12","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2075:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2067:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"2067:7:12","typeDescriptions":{}}},"id":1812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2067:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1808,"name":"ERC721InvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"2048:18:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2048:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1814,"nodeType":"RevertStatement","src":"2041:37:12"}]}},{"expression":{"baseExpression":{"id":1817,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"2105:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1819,"indexExpression":{"id":1818,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"2115:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2105:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1801,"id":1820,"nodeType":"Return","src":"2098:23:12"}]},"documentation":{"id":1795,"nodeType":"StructuredDocumentation","src":"1867:48:12","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1822,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1929:9:12","nodeType":"FunctionDefinition","parameters":{"id":1798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1797,"mutability":"mutable","name":"owner","nameLocation":"1947:5:12","nodeType":"VariableDeclaration","scope":1822,"src":"1939:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1796,"name":"address","nodeType":"ElementaryTypeName","src":"1939:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1938:15:12"},"returnParameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1800,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1822,"src":"1983:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1799,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1982:9:12"},"scope":2702,"src":"1920:208:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2752],"body":{"id":1834,"nodeType":"Block","src":"2257:46:12","statements":[{"expression":{"arguments":[{"id":1831,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"2288:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1830,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"2274:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1829,"id":1833,"nodeType":"Return","src":"2267:29:12"}]},"documentation":{"id":1823,"nodeType":"StructuredDocumentation","src":"2134:46:12","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1835,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2194:7:12","nodeType":"FunctionDefinition","parameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"tokenId","nameLocation":"2210:7:12","nodeType":"VariableDeclaration","scope":1835,"src":"2202:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1824,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:17:12"},"returnParameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1835,"src":"2248:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"2248:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:9:12"},"scope":2702,"src":"2185:118:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2976],"body":{"id":1843,"nodeType":"Block","src":"2425:29:12","statements":[{"expression":{"id":1841,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"2442:5:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1840,"id":1842,"nodeType":"Return","src":"2435:12:12"}]},"documentation":{"id":1836,"nodeType":"StructuredDocumentation","src":"2309:51:12","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":1844,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2374:4:12","nodeType":"FunctionDefinition","parameters":{"id":1837,"nodeType":"ParameterList","parameters":[],"src":"2378:2:12"},"returnParameters":{"id":1840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1844,"src":"2410:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1838,"name":"string","nodeType":"ElementaryTypeName","src":"2410:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2409:15:12"},"scope":2702,"src":"2365:89:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2982],"body":{"id":1852,"nodeType":"Block","src":"2580:31:12","statements":[{"expression":{"id":1850,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"2597:7:12","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1849,"id":1851,"nodeType":"Return","src":"2590:14:12"}]},"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"2460:53:12","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":1853,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2527:6:12","nodeType":"FunctionDefinition","parameters":{"id":1846,"nodeType":"ParameterList","parameters":[],"src":"2533:2:12"},"returnParameters":{"id":1849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1848,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1853,"src":"2565:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1847,"name":"string","nodeType":"ElementaryTypeName","src":"2565:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2564:15:12"},"scope":2702,"src":"2518:93:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2990],"body":{"id":1888,"nodeType":"Block","src":"2756:176:12","statements":[{"expression":{"arguments":[{"id":1862,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"2780:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1861,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"2766:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2766:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1864,"nodeType":"ExpressionStatement","src":"2766:22:12"},{"assignments":[1866],"declarations":[{"constant":false,"id":1866,"mutability":"mutable","name":"baseURI","nameLocation":"2813:7:12","nodeType":"VariableDeclaration","scope":1888,"src":"2799:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1865,"name":"string","nodeType":"ElementaryTypeName","src":"2799:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1869,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1867,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"2823:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2823:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2799:34:12"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1872,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"2856:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2850:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1870,"name":"bytes","nodeType":"ElementaryTypeName","src":"2850:5:12","typeDescriptions":{}}},"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2850:14:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2865:6:12","memberName":"length","nodeType":"MemberAccess","src":"2850:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2874:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2850:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2923:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2850:75:12","trueExpression":{"arguments":[{"id":1880,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"2892:7:12","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1881,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"2901:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2909:8:12","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3089,"src":"2901:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2901:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2878:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1877,"name":"string","nodeType":"ElementaryTypeName","src":"2878:6:12","typeDescriptions":{}}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2885:6:12","memberName":"concat","nodeType":"MemberAccess","src":"2878:13:12","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2878:42:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1860,"id":1887,"nodeType":"Return","src":"2843:82:12"}]},"documentation":{"id":1854,"nodeType":"StructuredDocumentation","src":"2617:55:12","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1889,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2686:8:12","nodeType":"FunctionDefinition","parameters":{"id":1857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1856,"mutability":"mutable","name":"tokenId","nameLocation":"2703:7:12","nodeType":"VariableDeclaration","scope":1889,"src":"2695:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1855,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2694:17:12"},"returnParameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1889,"src":"2741:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1858,"name":"string","nodeType":"ElementaryTypeName","src":"2741:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2740:15:12"},"scope":2702,"src":"2677:255:12","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1897,"nodeType":"Block","src":"3240:26:12","statements":[{"expression":{"hexValue":"","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3257:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1894,"id":1896,"nodeType":"Return","src":"3250:9:12"}]},"documentation":{"id":1890,"nodeType":"StructuredDocumentation","src":"2938:231:12","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":1898,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3183:8:12","nodeType":"FunctionDefinition","parameters":{"id":1891,"nodeType":"ParameterList","parameters":[],"src":"3191:2:12"},"returnParameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1898,"src":"3225:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1892,"name":"string","nodeType":"ElementaryTypeName","src":"3225:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3224:15:12"},"scope":2702,"src":"3174:92:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2792],"body":{"id":1913,"nodeType":"Block","src":"3384:52:12","statements":[{"expression":{"arguments":[{"id":1907,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1901,"src":"3403:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1908,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1903,"src":"3407:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1909,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"3416:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3416:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1906,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[2505,2571],"referencedDeclaration":2505,"src":"3394:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3394:35:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1912,"nodeType":"ExpressionStatement","src":"3394:35:12"}]},"documentation":{"id":1899,"nodeType":"StructuredDocumentation","src":"3272:46:12","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":1914,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3332:7:12","nodeType":"FunctionDefinition","parameters":{"id":1904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1901,"mutability":"mutable","name":"to","nameLocation":"3348:2:12","nodeType":"VariableDeclaration","scope":1914,"src":"3340:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1900,"name":"address","nodeType":"ElementaryTypeName","src":"3340:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1903,"mutability":"mutable","name":"tokenId","nameLocation":"3360:7:12","nodeType":"VariableDeclaration","scope":1914,"src":"3352:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1902,"name":"uint256","nodeType":"ElementaryTypeName","src":"3352:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3339:29:12"},"returnParameters":{"id":1905,"nodeType":"ParameterList","parameters":[],"src":"3384:0:12"},"scope":2702,"src":"3323:113:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2808],"body":{"id":1930,"nodeType":"Block","src":"3573:78:12","statements":[{"expression":{"arguments":[{"id":1923,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"3597:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1922,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"3583:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3583:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1925,"nodeType":"ExpressionStatement","src":"3583:22:12"},{"expression":{"arguments":[{"id":1927,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"3636:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1926,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"3623:12:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3623:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1921,"id":1929,"nodeType":"Return","src":"3616:28:12"}]},"documentation":{"id":1915,"nodeType":"StructuredDocumentation","src":"3442:50:12","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":1931,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3506:11:12","nodeType":"FunctionDefinition","parameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:12","nodeType":"VariableDeclaration","scope":1931,"src":"3518:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3517:17:12"},"returnParameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1931,"src":"3564:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1919,"name":"address","nodeType":"ElementaryTypeName","src":"3564:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3563:9:12"},"scope":2702,"src":"3497:154:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2800],"body":{"id":1946,"nodeType":"Block","src":"3793:69:12","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1940,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"3822:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3822:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1942,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"3836:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1943,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1936,"src":"3846:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1939,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2608,"src":"3803:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3803:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1945,"nodeType":"ExpressionStatement","src":"3803:52:12"}]},"documentation":{"id":1932,"nodeType":"StructuredDocumentation","src":"3657:56:12","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":1947,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"3727:17:12","nodeType":"FunctionDefinition","parameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1934,"mutability":"mutable","name":"operator","nameLocation":"3753:8:12","nodeType":"VariableDeclaration","scope":1947,"src":"3745:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1933,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1936,"mutability":"mutable","name":"approved","nameLocation":"3768:8:12","nodeType":"VariableDeclaration","scope":1947,"src":"3763:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1935,"name":"bool","nodeType":"ElementaryTypeName","src":"3763:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3744:33:12"},"returnParameters":{"id":1938,"nodeType":"ParameterList","parameters":[],"src":"3793:0:12"},"scope":2702,"src":"3718:144:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2818],"body":{"id":1963,"nodeType":"Block","src":"4022:59:12","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1957,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"4039:18:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1959,"indexExpression":{"id":1958,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"4058:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:25:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1961,"indexExpression":{"id":1960,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"4065:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4039:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1956,"id":1962,"nodeType":"Return","src":"4032:42:12"}]},"documentation":{"id":1948,"nodeType":"StructuredDocumentation","src":"3868:55:12","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1964,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"3937:16:12","nodeType":"FunctionDefinition","parameters":{"id":1953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1950,"mutability":"mutable","name":"owner","nameLocation":"3962:5:12","nodeType":"VariableDeclaration","scope":1964,"src":"3954:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1949,"name":"address","nodeType":"ElementaryTypeName","src":"3954:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1952,"mutability":"mutable","name":"operator","nameLocation":"3977:8:12","nodeType":"VariableDeclaration","scope":1964,"src":"3969:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1951,"name":"address","nodeType":"ElementaryTypeName","src":"3969:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3953:33:12"},"returnParameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1964,"src":"4016:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1954,"name":"bool","nodeType":"ElementaryTypeName","src":"4016:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4015:6:12"},"scope":2702,"src":"3928:153:12","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2784],"body":{"id":2009,"nodeType":"Block","src":"4223:498:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1974,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4237:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4251:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4243:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:12","typeDescriptions":{}}},"id":1978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4243:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4237:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1988,"nodeType":"IfStatement","src":"4233:87:12","trueBody":{"id":1987,"nodeType":"Block","src":"4255:65:12","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4306:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1982,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4298:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1981,"name":"address","nodeType":"ElementaryTypeName","src":"4298:7:12","typeDescriptions":{}}},"id":1984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4298:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1980,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"4276:21:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1986,"nodeType":"RevertStatement","src":"4269:40:12"}]}},{"assignments":[1990],"declarations":[{"constant":false,"id":1990,"mutability":"mutable","name":"previousOwner","nameLocation":"4546:13:12","nodeType":"VariableDeclaration","scope":2009,"src":"4538:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1989,"name":"address","nodeType":"ElementaryTypeName","src":"4538:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1997,"initialValue":{"arguments":[{"id":1992,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4570:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1993,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"4574:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1994,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"4583:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4583:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1991,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"4562:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4562:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4538:58:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1998,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"4610:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1999,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"4627:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4610:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2008,"nodeType":"IfStatement","src":"4606:109:12","trueBody":{"id":2007,"nodeType":"Block","src":"4633:82:12","statements":[{"errorCall":{"arguments":[{"id":2002,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"4675:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2003,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"4681:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2004,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"4690:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2001,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"4654:20:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4654:50:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2006,"nodeType":"RevertStatement","src":"4647:57:12"}]}}]},"documentation":{"id":1965,"nodeType":"StructuredDocumentation","src":"4087:51:12","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":2010,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4152:12:12","nodeType":"FunctionDefinition","parameters":{"id":1972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"from","nameLocation":"4173:4:12","nodeType":"VariableDeclaration","scope":2010,"src":"4165:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1966,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1969,"mutability":"mutable","name":"to","nameLocation":"4187:2:12","nodeType":"VariableDeclaration","scope":2010,"src":"4179:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1968,"name":"address","nodeType":"ElementaryTypeName","src":"4179:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1971,"mutability":"mutable","name":"tokenId","nameLocation":"4199:7:12","nodeType":"VariableDeclaration","scope":2010,"src":"4191:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1970,"name":"uint256","nodeType":"ElementaryTypeName","src":"4191:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4164:43:12"},"returnParameters":{"id":1973,"nodeType":"ParameterList","parameters":[],"src":"4223:0:12"},"scope":2702,"src":"4143:578:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2774],"body":{"id":2027,"nodeType":"Block","src":"4863:56:12","statements":[{"expression":{"arguments":[{"id":2021,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"4890:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2022,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"4896:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2023,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"4900:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4909:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2020,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[2028,2054],"referencedDeclaration":2054,"src":"4873:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2026,"nodeType":"ExpressionStatement","src":"4873:39:12"}]},"documentation":{"id":2011,"nodeType":"StructuredDocumentation","src":"4727:55:12","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":2028,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4796:16:12","nodeType":"FunctionDefinition","parameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2013,"mutability":"mutable","name":"from","nameLocation":"4821:4:12","nodeType":"VariableDeclaration","scope":2028,"src":"4813:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2012,"name":"address","nodeType":"ElementaryTypeName","src":"4813:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2015,"mutability":"mutable","name":"to","nameLocation":"4835:2:12","nodeType":"VariableDeclaration","scope":2028,"src":"4827:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2014,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2017,"mutability":"mutable","name":"tokenId","nameLocation":"4847:7:12","nodeType":"VariableDeclaration","scope":2028,"src":"4839:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4812:43:12"},"returnParameters":{"id":2019,"nodeType":"ParameterList","parameters":[],"src":"4863:0:12"},"scope":2702,"src":"4787:132:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2764],"body":{"id":2053,"nodeType":"Block","src":"5088:105:12","statements":[{"expression":{"arguments":[{"id":2041,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"5111:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2042,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"5117:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2043,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"5121:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2040,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"5098:12:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5098:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2045,"nodeType":"ExpressionStatement","src":"5098:31:12"},{"expression":{"arguments":[{"id":2047,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"5162:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2048,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"5168:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2049,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"5172:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2050,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"5181:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2046,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"5139:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2052,"nodeType":"ExpressionStatement","src":"5139:47:12"}]},"documentation":{"id":2029,"nodeType":"StructuredDocumentation","src":"4925:55:12","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":2054,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4994:16:12","nodeType":"FunctionDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"from","nameLocation":"5019:4:12","nodeType":"VariableDeclaration","scope":2054,"src":"5011:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2030,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2033,"mutability":"mutable","name":"to","nameLocation":"5033:2:12","nodeType":"VariableDeclaration","scope":2054,"src":"5025:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2032,"name":"address","nodeType":"ElementaryTypeName","src":"5025:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2035,"mutability":"mutable","name":"tokenId","nameLocation":"5045:7:12","nodeType":"VariableDeclaration","scope":2054,"src":"5037:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2034,"name":"uint256","nodeType":"ElementaryTypeName","src":"5037:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2037,"mutability":"mutable","name":"data","nameLocation":"5067:4:12","nodeType":"VariableDeclaration","scope":2054,"src":"5054:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2036,"name":"bytes","nodeType":"ElementaryTypeName","src":"5054:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5010:62:12"},"returnParameters":{"id":2039,"nodeType":"ParameterList","parameters":[],"src":"5088:0:12"},"scope":2702,"src":"4985:208:12","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":2066,"nodeType":"Block","src":"5782:40:12","statements":[{"expression":{"baseExpression":{"id":2062,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"5799:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2064,"indexExpression":{"id":2063,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"5807:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5799:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2061,"id":2065,"nodeType":"Return","src":"5792:23:12"}]},"documentation":{"id":2055,"nodeType":"StructuredDocumentation","src":"5199:503:12","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."},"id":2067,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"5716:8:12","nodeType":"FunctionDefinition","parameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"tokenId","nameLocation":"5733:7:12","nodeType":"VariableDeclaration","scope":2067,"src":"5725:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2056,"name":"uint256","nodeType":"ElementaryTypeName","src":"5725:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5724:17:12"},"returnParameters":{"id":2061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2067,"src":"5773:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2059,"name":"address","nodeType":"ElementaryTypeName","src":"5773:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5772:9:12"},"scope":2702,"src":"5707:115:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2079,"nodeType":"Block","src":"6017:48:12","statements":[{"expression":{"baseExpression":{"id":2075,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"6034:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2077,"indexExpression":{"id":2076,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2070,"src":"6050:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6034:24:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2074,"id":2078,"nodeType":"Return","src":"6027:31:12"}]},"documentation":{"id":2068,"nodeType":"StructuredDocumentation","src":"5828:105:12","text":" @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."},"id":2080,"implemented":true,"kind":"function","modifiers":[],"name":"_getApproved","nameLocation":"5947:12:12","nodeType":"FunctionDefinition","parameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"tokenId","nameLocation":"5968:7:12","nodeType":"VariableDeclaration","scope":2080,"src":"5960:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2069,"name":"uint256","nodeType":"ElementaryTypeName","src":"5960:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5959:17:12"},"returnParameters":{"id":2074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2080,"src":"6008:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2072,"name":"address","nodeType":"ElementaryTypeName","src":"6008:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6007:9:12"},"scope":2702,"src":"5938:127:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2115,"nodeType":"Block","src":"6485:163:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2092,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"6514:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6533:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6525:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2093,"name":"address","nodeType":"ElementaryTypeName","src":"6525:7:12","typeDescriptions":{}}},"id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6525:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6514:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2098,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"6552:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2099,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"6561:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6552:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2102,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"6589:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2103,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"6596:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2101,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"6572:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6572:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:52:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2107,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2087,"src":"6621:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2106,"name":"_getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"6608:12:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6608:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2109,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"6633:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6608:32:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6552:88:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2112,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6551:90:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6514:127:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2091,"id":2114,"nodeType":"Return","src":"6495:146:12"}]},"documentation":{"id":2081,"nodeType":"StructuredDocumentation","src":"6071:300:12","text":" @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":2116,"implemented":true,"kind":"function","modifiers":[],"name":"_isAuthorized","nameLocation":"6385:13:12","nodeType":"FunctionDefinition","parameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"owner","nameLocation":"6407:5:12","nodeType":"VariableDeclaration","scope":2116,"src":"6399:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2082,"name":"address","nodeType":"ElementaryTypeName","src":"6399:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"spender","nameLocation":"6422:7:12","nodeType":"VariableDeclaration","scope":2116,"src":"6414:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2084,"name":"address","nodeType":"ElementaryTypeName","src":"6414:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2087,"mutability":"mutable","name":"tokenId","nameLocation":"6439:7:12","nodeType":"VariableDeclaration","scope":2116,"src":"6431:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2086,"name":"uint256","nodeType":"ElementaryTypeName","src":"6431:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6398:49:12"},"returnParameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2116,"src":"6479:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2089,"name":"bool","nodeType":"ElementaryTypeName","src":"6479:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6478:6:12"},"scope":2702,"src":"6376:272:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2152,"nodeType":"Block","src":"7179:271:12","statements":[{"condition":{"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7193:39:12","subExpression":{"arguments":[{"id":2127,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7208:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2128,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"7215:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2129,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"7224:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2126,"name":"_isAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2116,"src":"7194:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) view returns (bool)"}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7194:38:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2151,"nodeType":"IfStatement","src":"7189:255:12","trueBody":{"id":2150,"nodeType":"Block","src":"7234:210:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2132,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2119,"src":"7252:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7269:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7261:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2133,"name":"address","nodeType":"ElementaryTypeName","src":"7261:7:12","typeDescriptions":{}}},"id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7261:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7252:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2148,"nodeType":"Block","src":"7350:84:12","statements":[{"errorCall":{"arguments":[{"id":2144,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2121,"src":"7402:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2145,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"7411:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2143,"name":"ERC721InsufficientApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"7375:26:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7375:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2147,"nodeType":"RevertStatement","src":"7368:51:12"}]},"id":2149,"nodeType":"IfStatement","src":"7248:186:12","trueBody":{"id":2142,"nodeType":"Block","src":"7273:71:12","statements":[{"errorCall":{"arguments":[{"id":2139,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"7321:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2138,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"7298:22:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7298:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2141,"nodeType":"RevertStatement","src":"7291:38:12"}]}}]}}]},"documentation":{"id":2117,"nodeType":"StructuredDocumentation","src":"6654:423:12","text":" @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."},"id":2153,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAuthorized","nameLocation":"7091:16:12","nodeType":"FunctionDefinition","parameters":{"id":2124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2119,"mutability":"mutable","name":"owner","nameLocation":"7116:5:12","nodeType":"VariableDeclaration","scope":2153,"src":"7108:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2118,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2121,"mutability":"mutable","name":"spender","nameLocation":"7131:7:12","nodeType":"VariableDeclaration","scope":2153,"src":"7123:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2120,"name":"address","nodeType":"ElementaryTypeName","src":"7123:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"tokenId","nameLocation":"7148:7:12","nodeType":"VariableDeclaration","scope":2153,"src":"7140:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2122,"name":"uint256","nodeType":"ElementaryTypeName","src":"7140:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7107:49:12"},"returnParameters":{"id":2125,"nodeType":"ParameterList","parameters":[],"src":"7179:0:12"},"scope":2702,"src":"7082:368:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2168,"nodeType":"Block","src":"8167:78:12","statements":[{"id":2167,"nodeType":"UncheckedBlock","src":"8177:62:12","statements":[{"expression":{"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2161,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8201:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2163,"indexExpression":{"id":2162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"8211:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8201:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2164,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"8223:5:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"src":"8201:27:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2166,"nodeType":"ExpressionStatement","src":"8201:27:12"}]}]},"documentation":{"id":2154,"nodeType":"StructuredDocumentation","src":"7456:631:12","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."},"id":2169,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseBalance","nameLocation":"8101:16:12","nodeType":"FunctionDefinition","parameters":{"id":2159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"mutability":"mutable","name":"account","nameLocation":"8126:7:12","nodeType":"VariableDeclaration","scope":2169,"src":"8118:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2155,"name":"address","nodeType":"ElementaryTypeName","src":"8118:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2158,"mutability":"mutable","name":"value","nameLocation":"8143:5:12","nodeType":"VariableDeclaration","scope":2169,"src":"8135:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":2157,"name":"uint128","nodeType":"ElementaryTypeName","src":"8135:7:12","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"}],"src":"8117:32:12"},"returnParameters":{"id":2160,"nodeType":"ParameterList","parameters":[],"src":"8167:0:12"},"scope":2702,"src":"8092:153:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2258,"nodeType":"Block","src":"8933:700:12","statements":[{"assignments":[2182],"declarations":[{"constant":false,"id":2182,"mutability":"mutable","name":"from","nameLocation":"8951:4:12","nodeType":"VariableDeclaration","scope":2258,"src":"8943:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2181,"name":"address","nodeType":"ElementaryTypeName","src":"8943:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2186,"initialValue":{"arguments":[{"id":2184,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"8967:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2183,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"8958:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8958:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8943:32:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2187,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"9035:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9051:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9043:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2188,"name":"address","nodeType":"ElementaryTypeName","src":"9043:7:12","typeDescriptions":{}}},"id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9043:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9035:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2200,"nodeType":"IfStatement","src":"9031:86:12","trueBody":{"id":2199,"nodeType":"Block","src":"9055:62:12","statements":[{"expression":{"arguments":[{"id":2194,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9086:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2195,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2176,"src":"9092:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2196,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"9098:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2193,"name":"_checkAuthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"9069:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) view"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9069:37:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2198,"nodeType":"ExpressionStatement","src":"9069:37:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2201,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9161:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9177:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9169:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"9169:7:12","typeDescriptions":{}}},"id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9169:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9161:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2228,"nodeType":"IfStatement","src":"9157:256:12","trueBody":{"id":2227,"nodeType":"Block","src":"9181:232:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9294:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2209,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9286:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2208,"name":"address","nodeType":"ElementaryTypeName","src":"9286:7:12","typeDescriptions":{}}},"id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9286:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2212,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"9298:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9315:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9307:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2213,"name":"address","nodeType":"ElementaryTypeName","src":"9307:7:12","typeDescriptions":{}}},"id":2216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9307:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"66616c7365","id":2217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"9319:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2207,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[2505,2571],"referencedDeclaration":2571,"src":"9277:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9277:48:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2219,"nodeType":"ExpressionStatement","src":"9277:48:12"},{"id":2226,"nodeType":"UncheckedBlock","src":"9340:63:12","statements":[{"expression":{"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2220,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"9368:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2222,"indexExpression":{"id":2221,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9378:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9368:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":2223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9387:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9368:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2225,"nodeType":"ExpressionStatement","src":"9368:20:12"}]}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9427:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9441:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9433:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2230,"name":"address","nodeType":"ElementaryTypeName","src":"9433:7:12","typeDescriptions":{}}},"id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9433:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9427:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2243,"nodeType":"IfStatement","src":"9423:107:12","trueBody":{"id":2242,"nodeType":"Block","src":"9445:85:12","statements":[{"id":2241,"nodeType":"UncheckedBlock","src":"9459:61:12","statements":[{"expression":{"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2235,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"9487:9:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2237,"indexExpression":{"id":2236,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9497:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9487:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9504:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9487:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2240,"nodeType":"ExpressionStatement","src":"9487:18:12"}]}]}},{"expression":{"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2244,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"9540:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2246,"indexExpression":{"id":2245,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"9548:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9540:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2247,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9559:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9540:21:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2249,"nodeType":"ExpressionStatement","src":"9540:21:12"},{"eventCall":{"arguments":[{"id":2251,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9586:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2252,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2172,"src":"9592:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2253,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"9596:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2250,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2718,"src":"9577:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9577:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2255,"nodeType":"EmitStatement","src":"9572:32:12"},{"expression":{"id":2256,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"9622:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2180,"id":2257,"nodeType":"Return","src":"9615:11:12"}]},"documentation":{"id":2170,"nodeType":"StructuredDocumentation","src":"8251:582:12","text":" @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."},"id":2259,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"8847:7:12","nodeType":"FunctionDefinition","parameters":{"id":2177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2172,"mutability":"mutable","name":"to","nameLocation":"8863:2:12","nodeType":"VariableDeclaration","scope":2259,"src":"8855:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2171,"name":"address","nodeType":"ElementaryTypeName","src":"8855:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2174,"mutability":"mutable","name":"tokenId","nameLocation":"8875:7:12","nodeType":"VariableDeclaration","scope":2259,"src":"8867:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2173,"name":"uint256","nodeType":"ElementaryTypeName","src":"8867:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2176,"mutability":"mutable","name":"auth","nameLocation":"8892:4:12","nodeType":"VariableDeclaration","scope":2259,"src":"8884:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2175,"name":"address","nodeType":"ElementaryTypeName","src":"8884:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8854:43:12"},"returnParameters":{"id":2180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2259,"src":"8924:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2178,"name":"address","nodeType":"ElementaryTypeName","src":"8924:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8923:9:12"},"scope":2702,"src":"8838:795:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2308,"nodeType":"Block","src":"10008:274:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2267,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"10022:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2268,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:12","typeDescriptions":{}}},"id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10022:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2281,"nodeType":"IfStatement","src":"10018:87:12","trueBody":{"id":2280,"nodeType":"Block","src":"10040:65:12","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10091:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10083:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2274,"name":"address","nodeType":"ElementaryTypeName","src":"10083:7:12","typeDescriptions":{}}},"id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10083:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2273,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"10061:21:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10061:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2279,"nodeType":"RevertStatement","src":"10054:40:12"}]}},{"assignments":[2283],"declarations":[{"constant":false,"id":2283,"mutability":"mutable","name":"previousOwner","nameLocation":"10122:13:12","nodeType":"VariableDeclaration","scope":2308,"src":"10114:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"10114:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2292,"initialValue":{"arguments":[{"id":2285,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"10146:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2286,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"10150:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10159:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2287,"name":"address","nodeType":"ElementaryTypeName","src":"10159:7:12","typeDescriptions":{}}},"id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10159:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2284,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"10138:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10138:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10114:56:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2293,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"10184:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10209:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10201:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2294,"name":"address","nodeType":"ElementaryTypeName","src":"10201:7:12","typeDescriptions":{}}},"id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10201:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10184:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2307,"nodeType":"IfStatement","src":"10180:96:12","trueBody":{"id":2306,"nodeType":"Block","src":"10213:63:12","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10262:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10254:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:12","typeDescriptions":{}}},"id":2303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10254:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2299,"name":"ERC721InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1623,"src":"10234:19:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10234:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2305,"nodeType":"RevertStatement","src":"10227:38:12"}]}}]},"documentation":{"id":2260,"nodeType":"StructuredDocumentation","src":"9639:311:12","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":2309,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9964:5:12","nodeType":"FunctionDefinition","parameters":{"id":2265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2262,"mutability":"mutable","name":"to","nameLocation":"9978:2:12","nodeType":"VariableDeclaration","scope":2309,"src":"9970:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2261,"name":"address","nodeType":"ElementaryTypeName","src":"9970:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2264,"mutability":"mutable","name":"tokenId","nameLocation":"9990:7:12","nodeType":"VariableDeclaration","scope":2309,"src":"9982:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2263,"name":"uint256","nodeType":"ElementaryTypeName","src":"9982:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9969:29:12"},"returnParameters":{"id":2266,"nodeType":"ParameterList","parameters":[],"src":"10008:0:12"},"scope":2702,"src":"9955:327:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2323,"nodeType":"Block","src":"10690:43:12","statements":[{"expression":{"arguments":[{"id":2318,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2312,"src":"10710:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2319,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2314,"src":"10714:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10723:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2317,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2324,2350],"referencedDeclaration":2350,"src":"10700:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10700:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2322,"nodeType":"ExpressionStatement","src":"10700:26:12"}]},"documentation":{"id":2310,"nodeType":"StructuredDocumentation","src":"10288:340:12","text":" @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2324,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10642:9:12","nodeType":"FunctionDefinition","parameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2312,"mutability":"mutable","name":"to","nameLocation":"10660:2:12","nodeType":"VariableDeclaration","scope":2324,"src":"10652:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2311,"name":"address","nodeType":"ElementaryTypeName","src":"10652:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2314,"mutability":"mutable","name":"tokenId","nameLocation":"10672:7:12","nodeType":"VariableDeclaration","scope":2324,"src":"10664:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2313,"name":"uint256","nodeType":"ElementaryTypeName","src":"10664:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10651:29:12"},"returnParameters":{"id":2316,"nodeType":"ParameterList","parameters":[],"src":"10690:0:12"},"scope":2702,"src":"10633:100:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2349,"nodeType":"Block","src":"11038:98:12","statements":[{"expression":{"arguments":[{"id":2335,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"11054:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2336,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"11058:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2334,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"11048:5:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11048:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2338,"nodeType":"ExpressionStatement","src":"11048:18:12"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":2342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11107:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2341,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11099:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2340,"name":"address","nodeType":"ElementaryTypeName","src":"11099:7:12","typeDescriptions":{}}},"id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11099:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2344,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"11111:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2345,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2329,"src":"11115:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2346,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2331,"src":"11124:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2339,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"11076:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11076:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2348,"nodeType":"ExpressionStatement","src":"11076:53:12"}]},"documentation":{"id":2325,"nodeType":"StructuredDocumentation","src":"10739:210:12","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2350,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"10963:9:12","nodeType":"FunctionDefinition","parameters":{"id":2332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2327,"mutability":"mutable","name":"to","nameLocation":"10981:2:12","nodeType":"VariableDeclaration","scope":2350,"src":"10973:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2326,"name":"address","nodeType":"ElementaryTypeName","src":"10973:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2329,"mutability":"mutable","name":"tokenId","nameLocation":"10993:7:12","nodeType":"VariableDeclaration","scope":2350,"src":"10985:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2328,"name":"uint256","nodeType":"ElementaryTypeName","src":"10985:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2331,"mutability":"mutable","name":"data","nameLocation":"11015:4:12","nodeType":"VariableDeclaration","scope":2350,"src":"11002:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2330,"name":"bytes","nodeType":"ElementaryTypeName","src":"11002:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10972:48:12"},"returnParameters":{"id":2333,"nodeType":"ParameterList","parameters":[],"src":"11038:0:12"},"scope":2702,"src":"10954:182:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2382,"nodeType":"Block","src":"11503:186:12","statements":[{"assignments":[2357],"declarations":[{"constant":false,"id":2357,"mutability":"mutable","name":"previousOwner","nameLocation":"11521:13:12","nodeType":"VariableDeclaration","scope":2382,"src":"11513:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2356,"name":"address","nodeType":"ElementaryTypeName","src":"11513:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2369,"initialValue":{"arguments":[{"arguments":[{"hexValue":"30","id":2361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11545:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2359,"name":"address","nodeType":"ElementaryTypeName","src":"11545:7:12","typeDescriptions":{}}},"id":2362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11545:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2363,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"11557:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11566:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2364,"name":"address","nodeType":"ElementaryTypeName","src":"11566:7:12","typeDescriptions":{}}},"id":2367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11566:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2358,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"11537:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11537:40:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11513:64:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2370,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"11591:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2373,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11616:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2372,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11608:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2371,"name":"address","nodeType":"ElementaryTypeName","src":"11608:7:12","typeDescriptions":{}}},"id":2374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11608:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11591:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2381,"nodeType":"IfStatement","src":"11587:96:12","trueBody":{"id":2380,"nodeType":"Block","src":"11620:63:12","statements":[{"errorCall":{"arguments":[{"id":2377,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2353,"src":"11664:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2376,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"11641:22:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11641:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2379,"nodeType":"RevertStatement","src":"11634:38:12"}]}}]},"documentation":{"id":2351,"nodeType":"StructuredDocumentation","src":"11142:315:12","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":2383,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"11471:5:12","nodeType":"FunctionDefinition","parameters":{"id":2354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2353,"mutability":"mutable","name":"tokenId","nameLocation":"11485:7:12","nodeType":"VariableDeclaration","scope":2383,"src":"11477:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2352,"name":"uint256","nodeType":"ElementaryTypeName","src":"11477:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11476:17:12"},"returnParameters":{"id":2355,"nodeType":"ParameterList","parameters":[],"src":"11503:0:12"},"scope":2702,"src":"11462:227:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2442,"nodeType":"Block","src":"12084:389:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2393,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"12098:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12104:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2394,"name":"address","nodeType":"ElementaryTypeName","src":"12104:7:12","typeDescriptions":{}}},"id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12098:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2407,"nodeType":"IfStatement","src":"12094:87:12","trueBody":{"id":2406,"nodeType":"Block","src":"12116:65:12","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12167:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2401,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12159:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2400,"name":"address","nodeType":"ElementaryTypeName","src":"12159:7:12","typeDescriptions":{}}},"id":2403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12159:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2399,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"12137:21:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12137:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2405,"nodeType":"RevertStatement","src":"12130:40:12"}]}},{"assignments":[2409],"declarations":[{"constant":false,"id":2409,"mutability":"mutable","name":"previousOwner","nameLocation":"12198:13:12","nodeType":"VariableDeclaration","scope":2442,"src":"12190:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2408,"name":"address","nodeType":"ElementaryTypeName","src":"12190:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2418,"initialValue":{"arguments":[{"id":2411,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"12222:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2412,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"12226:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"hexValue":"30","id":2415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12243:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12235:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2413,"name":"address","nodeType":"ElementaryTypeName","src":"12235:7:12","typeDescriptions":{}}},"id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12235:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2410,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"12214:7:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$","typeString":"function (address,uint256,address) returns (address)"}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12214:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12190:56:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2419,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"12260:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12277:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2420,"name":"address","nodeType":"ElementaryTypeName","src":"12277:7:12","typeDescriptions":{}}},"id":2423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12277:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12260:27:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2430,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"12362:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2431,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"12379:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12362:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2440,"nodeType":"IfStatement","src":"12358:109:12","trueBody":{"id":2439,"nodeType":"Block","src":"12385:82:12","statements":[{"errorCall":{"arguments":[{"id":2434,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"12427:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2435,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"12433:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2436,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"12442:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2433,"name":"ERC721IncorrectOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"12406:20:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address) pure"}},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12406:50:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2438,"nodeType":"RevertStatement","src":"12399:57:12"}]}},"id":2441,"nodeType":"IfStatement","src":"12256:211:12","trueBody":{"id":2429,"nodeType":"Block","src":"12289:63:12","statements":[{"errorCall":{"arguments":[{"id":2426,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"12333:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2425,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"12310:22:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12310:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2428,"nodeType":"RevertStatement","src":"12303:38:12"}]}}]},"documentation":{"id":2384,"nodeType":"StructuredDocumentation","src":"11695:313:12","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":2443,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"12022:9:12","nodeType":"FunctionDefinition","parameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2386,"mutability":"mutable","name":"from","nameLocation":"12040:4:12","nodeType":"VariableDeclaration","scope":2443,"src":"12032:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2385,"name":"address","nodeType":"ElementaryTypeName","src":"12032:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2388,"mutability":"mutable","name":"to","nameLocation":"12054:2:12","nodeType":"VariableDeclaration","scope":2443,"src":"12046:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2387,"name":"address","nodeType":"ElementaryTypeName","src":"12046:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2390,"mutability":"mutable","name":"tokenId","nameLocation":"12066:7:12","nodeType":"VariableDeclaration","scope":2443,"src":"12058:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"12058:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12031:43:12"},"returnParameters":{"id":2392,"nodeType":"ParameterList","parameters":[],"src":"12084:0:12"},"scope":2702,"src":"12013:460:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2460,"nodeType":"Block","src":"13481:53:12","statements":[{"expression":{"arguments":[{"id":2454,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"13505:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2455,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"13511:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2456,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2450,"src":"13515:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13524:2:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":2453,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[2461,2487],"referencedDeclaration":2487,"src":"13491:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13491:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2459,"nodeType":"ExpressionStatement","src":"13491:36:12"}]},"documentation":{"id":2444,"nodeType":"StructuredDocumentation","src":"12479:922:12","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":2461,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13415:13:12","nodeType":"FunctionDefinition","parameters":{"id":2451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2446,"mutability":"mutable","name":"from","nameLocation":"13437:4:12","nodeType":"VariableDeclaration","scope":2461,"src":"13429:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2445,"name":"address","nodeType":"ElementaryTypeName","src":"13429:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2448,"mutability":"mutable","name":"to","nameLocation":"13451:2:12","nodeType":"VariableDeclaration","scope":2461,"src":"13443:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2447,"name":"address","nodeType":"ElementaryTypeName","src":"13443:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2450,"mutability":"mutable","name":"tokenId","nameLocation":"13463:7:12","nodeType":"VariableDeclaration","scope":2461,"src":"13455:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2449,"name":"uint256","nodeType":"ElementaryTypeName","src":"13455:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13428:43:12"},"returnParameters":{"id":2452,"nodeType":"ParameterList","parameters":[],"src":"13481:0:12"},"scope":2702,"src":"13406:128:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2486,"nodeType":"Block","src":"13873:102:12","statements":[{"expression":{"arguments":[{"id":2474,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"13893:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2475,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"13899:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2476,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"13903:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2473,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2443,"src":"13883:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13883:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2478,"nodeType":"ExpressionStatement","src":"13883:28:12"},{"expression":{"arguments":[{"id":2480,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2464,"src":"13944:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2481,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2466,"src":"13950:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2482,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"13954:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2483,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"13963:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2479,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"13921:22:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13921:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2485,"nodeType":"ExpressionStatement","src":"13921:47:12"}]},"documentation":{"id":2462,"nodeType":"StructuredDocumentation","src":"13540:226:12","text":" @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":2487,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"13780:13:12","nodeType":"FunctionDefinition","parameters":{"id":2471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2464,"mutability":"mutable","name":"from","nameLocation":"13802:4:12","nodeType":"VariableDeclaration","scope":2487,"src":"13794:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2463,"name":"address","nodeType":"ElementaryTypeName","src":"13794:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2466,"mutability":"mutable","name":"to","nameLocation":"13816:2:12","nodeType":"VariableDeclaration","scope":2487,"src":"13808:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2465,"name":"address","nodeType":"ElementaryTypeName","src":"13808:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"tokenId","nameLocation":"13828:7:12","nodeType":"VariableDeclaration","scope":2487,"src":"13820:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"13820:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2470,"mutability":"mutable","name":"data","nameLocation":"13850:4:12","nodeType":"VariableDeclaration","scope":2487,"src":"13837:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2469,"name":"bytes","nodeType":"ElementaryTypeName","src":"13837:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13793:62:12"},"returnParameters":{"id":2472,"nodeType":"ParameterList","parameters":[],"src":"13873:0:12"},"scope":2702,"src":"13771:204:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2504,"nodeType":"Block","src":"14488:50:12","statements":[{"expression":{"arguments":[{"id":2498,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"14507:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2499,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2492,"src":"14511:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2500,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2494,"src":"14520:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14526:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2497,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[2505,2571],"referencedDeclaration":2571,"src":"14498:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,uint256,address,bool)"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14498:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2503,"nodeType":"ExpressionStatement","src":"14498:33:12"}]},"documentation":{"id":2488,"nodeType":"StructuredDocumentation","src":"13981:432:12","text":" @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":2505,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14427:8:12","nodeType":"FunctionDefinition","parameters":{"id":2495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2490,"mutability":"mutable","name":"to","nameLocation":"14444:2:12","nodeType":"VariableDeclaration","scope":2505,"src":"14436:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2489,"name":"address","nodeType":"ElementaryTypeName","src":"14436:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2492,"mutability":"mutable","name":"tokenId","nameLocation":"14456:7:12","nodeType":"VariableDeclaration","scope":2505,"src":"14448:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2491,"name":"uint256","nodeType":"ElementaryTypeName","src":"14448:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2494,"mutability":"mutable","name":"auth","nameLocation":"14473:4:12","nodeType":"VariableDeclaration","scope":2505,"src":"14465:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2493,"name":"address","nodeType":"ElementaryTypeName","src":"14465:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14435:43:12"},"returnParameters":{"id":2496,"nodeType":"ParameterList","parameters":[],"src":"14488:0:12"},"scope":2702,"src":"14418:120:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2570,"nodeType":"Block","src":"14814:568:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2517,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"14880:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2518,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"14893:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14909:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14901:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2519,"name":"address","nodeType":"ElementaryTypeName","src":"14901:7:12","typeDescriptions":{}}},"id":2522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14901:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14893:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14880:31:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2563,"nodeType":"IfStatement","src":"14876:460:12","trueBody":{"id":2562,"nodeType":"Block","src":"14913:423:12","statements":[{"assignments":[2526],"declarations":[{"constant":false,"id":2526,"mutability":"mutable","name":"owner","nameLocation":"14935:5:12","nodeType":"VariableDeclaration","scope":2562,"src":"14927:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2525,"name":"address","nodeType":"ElementaryTypeName","src":"14927:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2530,"initialValue":{"arguments":[{"id":2528,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"14957:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2527,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"14943:13:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14943:22:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14927:38:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2531,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"15093:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15109:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15101:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2532,"name":"address","nodeType":"ElementaryTypeName","src":"15101:7:12","typeDescriptions":{}}},"id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15101:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15093:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2537,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"15115:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2538,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"15124:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15115:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15132:30:12","subExpression":{"arguments":[{"id":2542,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"15150:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2543,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"15157:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2541,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1964,"src":"15133:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15133:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15093:69:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2552,"nodeType":"IfStatement","src":"15089:142:12","trueBody":{"id":2551,"nodeType":"Block","src":"15164:67:12","statements":[{"errorCall":{"arguments":[{"id":2548,"name":"auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"15211:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2547,"name":"ERC721InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1640,"src":"15189:21:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15189:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2550,"nodeType":"RevertStatement","src":"15182:34:12"}]}},{"condition":{"id":2553,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"15249:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2561,"nodeType":"IfStatement","src":"15245:81:12","trueBody":{"id":2560,"nodeType":"Block","src":"15260:66:12","statements":[{"eventCall":{"arguments":[{"id":2555,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2526,"src":"15292:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2556,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"15299:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2557,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"15303:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2554,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"15283:8:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15283:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2559,"nodeType":"EmitStatement","src":"15278:33:12"}]}}]}},{"expression":{"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2564,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"15346:15:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2566,"indexExpression":{"id":2565,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"15362:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15346:24:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2567,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"15373:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15346:29:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2569,"nodeType":"ExpressionStatement","src":"15346:29:12"}]},"documentation":{"id":2506,"nodeType":"StructuredDocumentation","src":"14544:171:12","text":" @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."},"id":2571,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"14729:8:12","nodeType":"FunctionDefinition","parameters":{"id":2515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"to","nameLocation":"14746:2:12","nodeType":"VariableDeclaration","scope":2571,"src":"14738:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"14738:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2510,"mutability":"mutable","name":"tokenId","nameLocation":"14758:7:12","nodeType":"VariableDeclaration","scope":2571,"src":"14750:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2509,"name":"uint256","nodeType":"ElementaryTypeName","src":"14750:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2512,"mutability":"mutable","name":"auth","nameLocation":"14775:4:12","nodeType":"VariableDeclaration","scope":2571,"src":"14767:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2511,"name":"address","nodeType":"ElementaryTypeName","src":"14767:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2514,"mutability":"mutable","name":"emitEvent","nameLocation":"14786:9:12","nodeType":"VariableDeclaration","scope":2571,"src":"14781:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2513,"name":"bool","nodeType":"ElementaryTypeName","src":"14781:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14737:59:12"},"returnParameters":{"id":2516,"nodeType":"ParameterList","parameters":[],"src":"14814:0:12"},"scope":2702,"src":"14720:662:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2607,"nodeType":"Block","src":"15684:219:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2581,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"15698:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15718:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2583,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15710:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2582,"name":"address","nodeType":"ElementaryTypeName","src":"15710:7:12","typeDescriptions":{}}},"id":2585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15710:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15698:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2592,"nodeType":"IfStatement","src":"15694:91:12","trueBody":{"id":2591,"nodeType":"Block","src":"15722:63:12","statements":[{"errorCall":{"arguments":[{"id":2588,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"15765:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2587,"name":"ERC721InvalidOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"15743:21:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15743:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2590,"nodeType":"RevertStatement","src":"15736:38:12"}]}},{"expression":{"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2593,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"15794:18:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":2596,"indexExpression":{"id":2594,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"15813:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15794:25:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2597,"indexExpression":{"id":2595,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"15820:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15794:35:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2598,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"15832:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15794:46:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2600,"nodeType":"ExpressionStatement","src":"15794:46:12"},{"eventCall":{"arguments":[{"id":2602,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"15870:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2603,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"15877:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2604,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"15887:8:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2601,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2736,"src":"15855:14:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15855:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2606,"nodeType":"EmitStatement","src":"15850:46:12"}]},"documentation":{"id":2572,"nodeType":"StructuredDocumentation","src":"15388:198:12","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."},"id":2608,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"15600:18:12","nodeType":"FunctionDefinition","parameters":{"id":2579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2574,"mutability":"mutable","name":"owner","nameLocation":"15627:5:12","nodeType":"VariableDeclaration","scope":2608,"src":"15619:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2573,"name":"address","nodeType":"ElementaryTypeName","src":"15619:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2576,"mutability":"mutable","name":"operator","nameLocation":"15642:8:12","nodeType":"VariableDeclaration","scope":2608,"src":"15634:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2575,"name":"address","nodeType":"ElementaryTypeName","src":"15634:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2578,"mutability":"mutable","name":"approved","nameLocation":"15657:8:12","nodeType":"VariableDeclaration","scope":2608,"src":"15652:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2577,"name":"bool","nodeType":"ElementaryTypeName","src":"15652:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15618:48:12"},"returnParameters":{"id":2580,"nodeType":"ParameterList","parameters":[],"src":"15684:0:12"},"scope":2702,"src":"15591:312:12","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2636,"nodeType":"Block","src":"16210:169:12","statements":[{"assignments":[2617],"declarations":[{"constant":false,"id":2617,"mutability":"mutable","name":"owner","nameLocation":"16228:5:12","nodeType":"VariableDeclaration","scope":2636,"src":"16220:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2616,"name":"address","nodeType":"ElementaryTypeName","src":"16220:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2621,"initialValue":{"arguments":[{"id":2619,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"16245:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2618,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2067,"src":"16236:8:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16236:17:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"16220:33:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2622,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"16267:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16284:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2624,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16276:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2623,"name":"address","nodeType":"ElementaryTypeName","src":"16276:7:12","typeDescriptions":{}}},"id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16276:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16267:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2633,"nodeType":"IfStatement","src":"16263:88:12","trueBody":{"id":2632,"nodeType":"Block","src":"16288:63:12","statements":[{"errorCall":{"arguments":[{"id":2629,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2611,"src":"16332:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2628,"name":"ERC721NonexistentToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"16309:22:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16309:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2631,"nodeType":"RevertStatement","src":"16302:38:12"}]}},{"expression":{"id":2634,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2617,"src":"16367:5:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2615,"id":2635,"nodeType":"Return","src":"16360:12:12"}]},"documentation":{"id":2609,"nodeType":"StructuredDocumentation","src":"15909:224:12","text":" @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."},"id":2637,"implemented":true,"kind":"function","modifiers":[],"name":"_requireOwned","nameLocation":"16147:13:12","nodeType":"FunctionDefinition","parameters":{"id":2612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2611,"mutability":"mutable","name":"tokenId","nameLocation":"16169:7:12","nodeType":"VariableDeclaration","scope":2637,"src":"16161:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2610,"name":"uint256","nodeType":"ElementaryTypeName","src":"16161:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16160:17:12"},"returnParameters":{"id":2615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2637,"src":"16201:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2613,"name":"address","nodeType":"ElementaryTypeName","src":"16201:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16200:9:12"},"scope":2702,"src":"16138:241:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2700,"nodeType":"Block","src":"17020:680:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2649,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"17034:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17037:4:12","memberName":"code","nodeType":"MemberAccess","src":"17034:7:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17042:6:12","memberName":"length","nodeType":"MemberAccess","src":"17034:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17051:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17034:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2699,"nodeType":"IfStatement","src":"17030:664:12","trueBody":{"id":2698,"nodeType":"Block","src":"17054:640:12","statements":[{"clauses":[{"block":{"id":2678,"nodeType":"Block","src":"17168:162:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2667,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"17190:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":2668,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"17200:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2837_$","typeString":"type(contract IERC721Receiver)"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17216:16:12","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2836,"src":"17200:32:12","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"17233:8:12","memberName":"selector","nodeType":"MemberAccess","src":"17200:41:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"17190:51:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2677,"nodeType":"IfStatement","src":"17186:130:12","trueBody":{"id":2676,"nodeType":"Block","src":"17243:73:12","statements":[{"errorCall":{"arguments":[{"id":2673,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"17294:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2672,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"17272:21:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17272:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2675,"nodeType":"RevertStatement","src":"17265:32:12"}]}}]},"errorName":"","id":2679,"nodeType":"TryCatchClause","parameters":{"id":2666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2665,"mutability":"mutable","name":"retval","nameLocation":"17160:6:12","nodeType":"VariableDeclaration","scope":2679,"src":"17153:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2664,"name":"bytes4","nodeType":"ElementaryTypeName","src":"17153:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"17152:15:12"},"src":"17144:186:12"},{"block":{"id":2695,"nodeType":"Block","src":"17359:325:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2683,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2681,"src":"17381:6:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17388:6:12","memberName":"length","nodeType":"MemberAccess","src":"17381:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2685,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17398:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17381:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2693,"nodeType":"Block","src":"17480:190:12","statements":[{"AST":{"nodeType":"YulBlock","src":"17566:86:12","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17603:2:12","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"17607:6:12"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17599:3:12"},"nodeType":"YulFunctionCall","src":"17599:15:12"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"17622:6:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17616:5:12"},"nodeType":"YulFunctionCall","src":"17616:13:12"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17592:6:12"},"nodeType":"YulFunctionCall","src":"17592:38:12"},"nodeType":"YulExpressionStatement","src":"17592:38:12"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2681,"isOffset":false,"isSlot":false,"src":"17607:6:12","valueSize":1},{"declaration":2681,"isOffset":false,"isSlot":false,"src":"17622:6:12","valueSize":1}],"id":2692,"nodeType":"InlineAssembly","src":"17557:95:12"}]},"id":2694,"nodeType":"IfStatement","src":"17377:293:12","trueBody":{"id":2691,"nodeType":"Block","src":"17401:73:12","statements":[{"errorCall":{"arguments":[{"id":2688,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"17452:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2687,"name":"ERC721InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"17430:21:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17430:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2690,"nodeType":"RevertStatement","src":"17423:32:12"}]}}]},"errorName":"","id":2696,"nodeType":"TryCatchClause","parameters":{"id":2682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2681,"mutability":"mutable","name":"reason","nameLocation":"17351:6:12","nodeType":"VariableDeclaration","scope":2696,"src":"17338:19:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2680,"name":"bytes","nodeType":"ElementaryTypeName","src":"17338:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"17337:21:12"},"src":"17331:353:12"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2658,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"17109:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17109:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2660,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"17123:4:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2661,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2644,"src":"17129:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2662,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"17138:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":2655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2642,"src":"17088:2:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2654,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"17072:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2837_$","typeString":"type(contract IERC721Receiver)"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$2837","typeString":"contract IERC721Receiver"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17092:16:12","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2836,"src":"17072:36:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:71:12","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":2697,"nodeType":"TryStatement","src":"17068:616:12"}]}}]},"documentation":{"id":2638,"nodeType":"StructuredDocumentation","src":"16385:528:12","text":" @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"},"id":2701,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"16927:22:12","nodeType":"FunctionDefinition","parameters":{"id":2647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"from","nameLocation":"16958:4:12","nodeType":"VariableDeclaration","scope":2701,"src":"16950:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2639,"name":"address","nodeType":"ElementaryTypeName","src":"16950:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2642,"mutability":"mutable","name":"to","nameLocation":"16972:2:12","nodeType":"VariableDeclaration","scope":2701,"src":"16964:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2641,"name":"address","nodeType":"ElementaryTypeName","src":"16964:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2644,"mutability":"mutable","name":"tokenId","nameLocation":"16984:7:12","nodeType":"VariableDeclaration","scope":2701,"src":"16976:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2643,"name":"uint256","nodeType":"ElementaryTypeName","src":"16976:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2646,"mutability":"mutable","name":"data","nameLocation":"17006:4:12","nodeType":"VariableDeclaration","scope":2701,"src":"16993:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2645,"name":"bytes","nodeType":"ElementaryTypeName","src":"16993:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16949:62:12"},"returnParameters":{"id":2648,"nodeType":"ParameterList","parameters":[],"src":"17020:0:12"},"scope":2702,"src":"16918:782:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2703,"src":"776:16926:12","usedErrors":[1604,1609,1618,1623,1628,1635,1640,1645],"usedEvents":[2718,2727,2736]}],"src":"107:17596:12"},"id":12},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[3312],"IERC721":[2819]},"id":2820,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2704,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:13"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2706,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2820,"sourceUnit":3313,"src":"134:62:13","symbolAliases":[{"foreign":{"id":2705,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"142:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2708,"name":"IERC165","nameLocations":["287:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"287:7:13"},"id":2709,"nodeType":"InheritanceSpecifier","src":"287:7:13"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":2707,"nodeType":"StructuredDocumentation","src":"198:67:13","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2819,"linearizedBaseContracts":[2819,3312],"name":"IERC721","nameLocation":"276:7:13","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2710,"nodeType":"StructuredDocumentation","src":"301:88:13","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2718,"name":"Transfer","nameLocation":"400:8:13","nodeType":"EventDefinition","parameters":{"id":2717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"425:4:13","nodeType":"VariableDeclaration","scope":2718,"src":"409:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2711,"name":"address","nodeType":"ElementaryTypeName","src":"409:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2714,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"447:2:13","nodeType":"VariableDeclaration","scope":2718,"src":"431:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2713,"name":"address","nodeType":"ElementaryTypeName","src":"431:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2716,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"467:7:13","nodeType":"VariableDeclaration","scope":2718,"src":"451:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2715,"name":"uint256","nodeType":"ElementaryTypeName","src":"451:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"408:67:13"},"src":"394:82:13"},{"anonymous":false,"documentation":{"id":2719,"nodeType":"StructuredDocumentation","src":"482:94:13","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2727,"name":"Approval","nameLocation":"587:8:13","nodeType":"EventDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"612:5:13","nodeType":"VariableDeclaration","scope":2727,"src":"596:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2720,"name":"address","nodeType":"ElementaryTypeName","src":"596:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2723,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"635:8:13","nodeType":"VariableDeclaration","scope":2727,"src":"619:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2722,"name":"address","nodeType":"ElementaryTypeName","src":"619:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2725,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:13","nodeType":"VariableDeclaration","scope":2727,"src":"645:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2724,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"595:74:13"},"src":"581:89:13"},{"anonymous":false,"documentation":{"id":2728,"nodeType":"StructuredDocumentation","src":"676:117:13","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2736,"name":"ApprovalForAll","nameLocation":"804:14:13","nodeType":"EventDefinition","parameters":{"id":2735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2730,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"835:5:13","nodeType":"VariableDeclaration","scope":2736,"src":"819:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2729,"name":"address","nodeType":"ElementaryTypeName","src":"819:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2732,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"858:8:13","nodeType":"VariableDeclaration","scope":2736,"src":"842:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2731,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2734,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"873:8:13","nodeType":"VariableDeclaration","scope":2736,"src":"868:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2733,"name":"bool","nodeType":"ElementaryTypeName","src":"868:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"818:64:13"},"src":"798:85:13"},{"documentation":{"id":2737,"nodeType":"StructuredDocumentation","src":"889:76:13","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2744,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"979:9:13","nodeType":"FunctionDefinition","parameters":{"id":2740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2739,"mutability":"mutable","name":"owner","nameLocation":"997:5:13","nodeType":"VariableDeclaration","scope":2744,"src":"989:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2738,"name":"address","nodeType":"ElementaryTypeName","src":"989:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"988:15:13"},"returnParameters":{"id":2743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2742,"mutability":"mutable","name":"balance","nameLocation":"1035:7:13","nodeType":"VariableDeclaration","scope":2744,"src":"1027:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"1027:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1026:17:13"},"scope":2819,"src":"970:74:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2745,"nodeType":"StructuredDocumentation","src":"1050:131:13","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2752,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1195:7:13","nodeType":"FunctionDefinition","parameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2747,"mutability":"mutable","name":"tokenId","nameLocation":"1211:7:13","nodeType":"VariableDeclaration","scope":2752,"src":"1203:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2746,"name":"uint256","nodeType":"ElementaryTypeName","src":"1203:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1202:17:13"},"returnParameters":{"id":2751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2750,"mutability":"mutable","name":"owner","nameLocation":"1251:5:13","nodeType":"VariableDeclaration","scope":2752,"src":"1243:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2749,"name":"address","nodeType":"ElementaryTypeName","src":"1243:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1242:15:13"},"scope":2819,"src":"1186:72:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2753,"nodeType":"StructuredDocumentation","src":"1264:565:13","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2764,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1843:16:13","nodeType":"FunctionDefinition","parameters":{"id":2762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2755,"mutability":"mutable","name":"from","nameLocation":"1868:4:13","nodeType":"VariableDeclaration","scope":2764,"src":"1860:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2754,"name":"address","nodeType":"ElementaryTypeName","src":"1860:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2757,"mutability":"mutable","name":"to","nameLocation":"1882:2:13","nodeType":"VariableDeclaration","scope":2764,"src":"1874:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2756,"name":"address","nodeType":"ElementaryTypeName","src":"1874:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2759,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:13","nodeType":"VariableDeclaration","scope":2764,"src":"1886:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2758,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2761,"mutability":"mutable","name":"data","nameLocation":"1918:4:13","nodeType":"VariableDeclaration","scope":2764,"src":"1903:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2760,"name":"bytes","nodeType":"ElementaryTypeName","src":"1903:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1859:64:13"},"returnParameters":{"id":2763,"nodeType":"ParameterList","parameters":[],"src":"1932:0:13"},"scope":2819,"src":"1834:99:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2765,"nodeType":"StructuredDocumentation","src":"1939:705:13","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2774,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2658:16:13","nodeType":"FunctionDefinition","parameters":{"id":2772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2767,"mutability":"mutable","name":"from","nameLocation":"2683:4:13","nodeType":"VariableDeclaration","scope":2774,"src":"2675:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2766,"name":"address","nodeType":"ElementaryTypeName","src":"2675:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2769,"mutability":"mutable","name":"to","nameLocation":"2697:2:13","nodeType":"VariableDeclaration","scope":2774,"src":"2689:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2768,"name":"address","nodeType":"ElementaryTypeName","src":"2689:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2771,"mutability":"mutable","name":"tokenId","nameLocation":"2709:7:13","nodeType":"VariableDeclaration","scope":2774,"src":"2701:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2770,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2674:43:13"},"returnParameters":{"id":2773,"nodeType":"ParameterList","parameters":[],"src":"2726:0:13"},"scope":2819,"src":"2649:78:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2775,"nodeType":"StructuredDocumentation","src":"2733:732:13","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2784,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3479:12:13","nodeType":"FunctionDefinition","parameters":{"id":2782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2777,"mutability":"mutable","name":"from","nameLocation":"3500:4:13","nodeType":"VariableDeclaration","scope":2784,"src":"3492:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2776,"name":"address","nodeType":"ElementaryTypeName","src":"3492:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2779,"mutability":"mutable","name":"to","nameLocation":"3514:2:13","nodeType":"VariableDeclaration","scope":2784,"src":"3506:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2778,"name":"address","nodeType":"ElementaryTypeName","src":"3506:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2781,"mutability":"mutable","name":"tokenId","nameLocation":"3526:7:13","nodeType":"VariableDeclaration","scope":2784,"src":"3518:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"3518:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3491:43:13"},"returnParameters":{"id":2783,"nodeType":"ParameterList","parameters":[],"src":"3543:0:13"},"scope":2819,"src":"3470:74:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2785,"nodeType":"StructuredDocumentation","src":"3550:452:13","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2792,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4016:7:13","nodeType":"FunctionDefinition","parameters":{"id":2790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2787,"mutability":"mutable","name":"to","nameLocation":"4032:2:13","nodeType":"VariableDeclaration","scope":2792,"src":"4024:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2786,"name":"address","nodeType":"ElementaryTypeName","src":"4024:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2789,"mutability":"mutable","name":"tokenId","nameLocation":"4044:7:13","nodeType":"VariableDeclaration","scope":2792,"src":"4036:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"4036:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4023:29:13"},"returnParameters":{"id":2791,"nodeType":"ParameterList","parameters":[],"src":"4061:0:13"},"scope":2819,"src":"4007:55:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2793,"nodeType":"StructuredDocumentation","src":"4068:315:13","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2800,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4397:17:13","nodeType":"FunctionDefinition","parameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"operator","nameLocation":"4423:8:13","nodeType":"VariableDeclaration","scope":2800,"src":"4415:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2794,"name":"address","nodeType":"ElementaryTypeName","src":"4415:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2797,"mutability":"mutable","name":"approved","nameLocation":"4438:8:13","nodeType":"VariableDeclaration","scope":2800,"src":"4433:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2796,"name":"bool","nodeType":"ElementaryTypeName","src":"4433:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4414:33:13"},"returnParameters":{"id":2799,"nodeType":"ParameterList","parameters":[],"src":"4456:0:13"},"scope":2819,"src":"4388:69:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2801,"nodeType":"StructuredDocumentation","src":"4463:139:13","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2808,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4616:11:13","nodeType":"FunctionDefinition","parameters":{"id":2804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2803,"mutability":"mutable","name":"tokenId","nameLocation":"4636:7:13","nodeType":"VariableDeclaration","scope":2808,"src":"4628:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"4628:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4627:17:13"},"returnParameters":{"id":2807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2806,"mutability":"mutable","name":"operator","nameLocation":"4676:8:13","nodeType":"VariableDeclaration","scope":2808,"src":"4668:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2805,"name":"address","nodeType":"ElementaryTypeName","src":"4668:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4667:18:13"},"scope":2819,"src":"4607:79:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2809,"nodeType":"StructuredDocumentation","src":"4692:138:13","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2818,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4844:16:13","nodeType":"FunctionDefinition","parameters":{"id":2814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2811,"mutability":"mutable","name":"owner","nameLocation":"4869:5:13","nodeType":"VariableDeclaration","scope":2818,"src":"4861:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2810,"name":"address","nodeType":"ElementaryTypeName","src":"4861:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2813,"mutability":"mutable","name":"operator","nameLocation":"4884:8:13","nodeType":"VariableDeclaration","scope":2818,"src":"4876:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2812,"name":"address","nodeType":"ElementaryTypeName","src":"4876:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4860:33:13"},"returnParameters":{"id":2817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2818,"src":"4917:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2815,"name":"bool","nodeType":"ElementaryTypeName","src":"4917:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4916:6:13"},"scope":2819,"src":"4835:88:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2820,"src":"266:4659:13","usedErrors":[],"usedEvents":[2718,2727,2736]}],"src":"108:4818:13"},"id":13},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[2837]},"id":2838,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2821,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"116:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2822,"nodeType":"StructuredDocumentation","src":"142:152:14","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2837,"linearizedBaseContracts":[2837],"name":"IERC721Receiver","nameLocation":"305:15:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2823,"nodeType":"StructuredDocumentation","src":"327:500:14","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2836,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"841:16:14","nodeType":"FunctionDefinition","parameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2825,"mutability":"mutable","name":"operator","nameLocation":"875:8:14","nodeType":"VariableDeclaration","scope":2836,"src":"867:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2824,"name":"address","nodeType":"ElementaryTypeName","src":"867:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2827,"mutability":"mutable","name":"from","nameLocation":"901:4:14","nodeType":"VariableDeclaration","scope":2836,"src":"893:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"893:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2829,"mutability":"mutable","name":"tokenId","nameLocation":"923:7:14","nodeType":"VariableDeclaration","scope":2836,"src":"915:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"915:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2831,"mutability":"mutable","name":"data","nameLocation":"955:4:14","nodeType":"VariableDeclaration","scope":2836,"src":"940:19:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2830,"name":"bytes","nodeType":"ElementaryTypeName","src":"940:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"857:108:14"},"returnParameters":{"id":2835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2836,"src":"984:6:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2833,"name":"bytes4","nodeType":"ElementaryTypeName","src":"984:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"983:8:14"},"scope":2837,"src":"832:160:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2838,"src":"295:699:14","usedErrors":[],"usedEvents":[]}],"src":"116:879:14"},"id":14},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"ERC721":[2702],"ERC721URIStorage":[2963],"IERC165":[3312],"IERC4906":[1552],"Strings":[3276]},"id":2964,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2839,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"128:24:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":2841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2964,"sourceUnit":2703,"src":"154:37:15","symbolAliases":[{"foreign":{"id":2840,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"162:6:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../../utils/Strings.sol","id":2843,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2964,"sourceUnit":3277,"src":"192:51:15","symbolAliases":[{"foreign":{"id":2842,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"200:7:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","file":"../../../interfaces/IERC4906.sol","id":2845,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2964,"sourceUnit":1553,"src":"244:58:15","symbolAliases":[{"foreign":{"id":2844,"name":"IERC4906","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"252:8:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"../../../interfaces/IERC165.sol","id":2847,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2964,"sourceUnit":1529,"src":"303:56:15","symbolAliases":[{"foreign":{"id":2846,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"311:7:15","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2849,"name":"IERC4906","nameLocations":["469:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":1552,"src":"469:8:15"},"id":2850,"nodeType":"InheritanceSpecifier","src":"469:8:15"},{"baseName":{"id":2851,"name":"ERC721","nameLocations":["479:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"479:6:15"},"id":2852,"nodeType":"InheritanceSpecifier","src":"479:6:15"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":2848,"nodeType":"StructuredDocumentation","src":"361:69:15","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":true,"id":2963,"linearizedBaseContracts":[2963,2702,1646,2991,1552,2819,3300,3312,3021],"name":"ERC721URIStorage","nameLocation":"449:16:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2855,"libraryName":{"id":2853,"name":"Strings","nameLocations":["498:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":3276,"src":"498:7:15"},"nodeType":"UsingForDirective","src":"492:26:15","typeName":{"id":2854,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"id":2861,"mutability":"constant","name":"ERC4906_INTERFACE_ID","nameLocation":"730:20:15","nodeType":"VariableDeclaration","scope":2963,"src":"706:65:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2856,"name":"bytes4","nodeType":"ElementaryTypeName","src":"706:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"arguments":[{"hexValue":"30783439303634393036","id":2859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"760:10:15","typeDescriptions":{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"},"value":"0x49064906"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"}],"id":2858,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"753:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":2857,"name":"bytes4","nodeType":"ElementaryTypeName","src":"753:6:15","typeDescriptions":{}}},"id":2860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"private"},{"constant":false,"id":2865,"mutability":"mutable","name":"_tokenURIs","nameLocation":"860:10:15","nodeType":"VariableDeclaration","scope":2963,"src":"817:53:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":2864,"keyName":"tokenId","keyNameLocation":"833:7:15","keyType":{"id":2862,"name":"uint256","nodeType":"ElementaryTypeName","src":"825:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"817:34:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2863,"name":"string","nodeType":"ElementaryTypeName","src":"844:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[1794,3311],"body":{"id":2885,"nodeType":"Block","src":"1045:99:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2876,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"1062:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2877,"name":"ERC4906_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"1077:20:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1062:35:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2881,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2868,"src":"1125:11:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2879,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1101:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2963_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1107:17:15","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1794,"src":"1101:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1101:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1062:75:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2875,"id":2884,"nodeType":"Return","src":"1055:82:15"}]},"documentation":{"id":2866,"nodeType":"StructuredDocumentation","src":"877:55:15","text":" @dev See {IERC165-supportsInterface}"},"functionSelector":"01ffc9a7","id":2886,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"946:17:15","nodeType":"FunctionDefinition","overrides":{"id":2872,"nodeType":"OverrideSpecifier","overrides":[{"id":2870,"name":"ERC721","nameLocations":["1013:6:15"],"nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"1013:6:15"},{"id":2871,"name":"IERC165","nameLocations":["1021:7:15"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"1021:7:15"}],"src":"1004:25:15"},"parameters":{"id":2869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2868,"mutability":"mutable","name":"interfaceId","nameLocation":"971:11:15","nodeType":"VariableDeclaration","scope":2886,"src":"964:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2867,"name":"bytes4","nodeType":"ElementaryTypeName","src":"964:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"963:20:15"},"returnParameters":{"id":2875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2886,"src":"1039:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2873,"name":"bool","nodeType":"ElementaryTypeName","src":"1039:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1038:6:15"},"scope":2963,"src":"937:207:15","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1889],"body":{"id":2942,"nodeType":"Block","src":"1298:505:15","statements":[{"expression":{"arguments":[{"id":2896,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"1322:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2895,"name":"_requireOwned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"1308:13:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1308:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2898,"nodeType":"ExpressionStatement","src":"1308:22:15"},{"assignments":[2900],"declarations":[{"constant":false,"id":2900,"mutability":"mutable","name":"_tokenURI","nameLocation":"1355:9:15","nodeType":"VariableDeclaration","scope":2942,"src":"1341:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2899,"name":"string","nodeType":"ElementaryTypeName","src":"1341:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2904,"initialValue":{"baseExpression":{"id":2901,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"1367:10:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2903,"indexExpression":{"id":2902,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"1378:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1367:19:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1341:45:15"},{"assignments":[2906],"declarations":[{"constant":false,"id":2906,"mutability":"mutable","name":"base","nameLocation":"1410:4:15","nodeType":"VariableDeclaration","scope":2942,"src":"1396:18:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2905,"name":"string","nodeType":"ElementaryTypeName","src":"1396:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2909,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2907,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1898,"src":"1417:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1417:10:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1396:31:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2912,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"1506:4:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2911,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1500:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2910,"name":"bytes","nodeType":"ElementaryTypeName","src":"1500:5:15","typeDescriptions":{}}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1500:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1512:6:15","memberName":"length","nodeType":"MemberAccess","src":"1500:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1522:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1500:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2920,"nodeType":"IfStatement","src":"1496:70:15","trueBody":{"id":2919,"nodeType":"Block","src":"1525:41:15","statements":[{"expression":{"id":2917,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"1546:9:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2894,"id":2918,"nodeType":"Return","src":"1539:16:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2923,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"1671:9:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2921,"name":"bytes","nodeType":"ElementaryTypeName","src":"1665:5:15","typeDescriptions":{}}},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:16:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1682:6:15","memberName":"length","nodeType":"MemberAccess","src":"1665:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1691:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1665:27:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2936,"nodeType":"IfStatement","src":"1661:95:15","trueBody":{"id":2935,"nodeType":"Block","src":"1694:62:15","statements":[{"expression":{"arguments":[{"id":2931,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"1729:4:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2932,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"1735:9:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1715:6:15","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2928,"name":"string","nodeType":"ElementaryTypeName","src":"1715:6:15","typeDescriptions":{}}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1722:6:15","memberName":"concat","nodeType":"MemberAccess","src":"1715:13:15","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1715:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2894,"id":2934,"nodeType":"Return","src":"1708:37:15"}]}},{"expression":{"arguments":[{"id":2939,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"1788:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2937,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1773:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2963_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1779:8:15","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":1889,"src":"1773:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1773:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2894,"id":2941,"nodeType":"Return","src":"1766:30:15"}]},"documentation":{"id":2887,"nodeType":"StructuredDocumentation","src":"1150:55:15","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2943,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1219:8:15","nodeType":"FunctionDefinition","overrides":{"id":2891,"nodeType":"OverrideSpecifier","overrides":[],"src":"1265:8:15"},"parameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"tokenId","nameLocation":"1236:7:15","nodeType":"VariableDeclaration","scope":2943,"src":"1228:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2888,"name":"uint256","nodeType":"ElementaryTypeName","src":"1228:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1227:17:15"},"returnParameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2943,"src":"1283:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2892,"name":"string","nodeType":"ElementaryTypeName","src":"1283:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1282:15:15"},"scope":2963,"src":"1210:593:15","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2961,"nodeType":"Block","src":"2003:86:15","statements":[{"expression":{"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2951,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"2013:10:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2953,"indexExpression":{"id":2952,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"2024:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2013:19:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2954,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"2035:9:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2013:31:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2956,"nodeType":"ExpressionStatement","src":"2013:31:15"},{"eventCall":{"arguments":[{"id":2958,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2946,"src":"2074:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2957,"name":"MetadataUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"2059:14:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2059:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2960,"nodeType":"EmitStatement","src":"2054:28:15"}]},"documentation":{"id":2944,"nodeType":"StructuredDocumentation","src":"1809:108:15","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Emits {MetadataUpdate}."},"id":2962,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1931:12:15","nodeType":"FunctionDefinition","parameters":{"id":2949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2946,"mutability":"mutable","name":"tokenId","nameLocation":"1952:7:15","nodeType":"VariableDeclaration","scope":2962,"src":"1944:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2945,"name":"uint256","nodeType":"ElementaryTypeName","src":"1944:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2948,"mutability":"mutable","name":"_tokenURI","nameLocation":"1975:9:15","nodeType":"VariableDeclaration","scope":2962,"src":"1961:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2947,"name":"string","nodeType":"ElementaryTypeName","src":"1961:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1943:42:15"},"returnParameters":{"id":2950,"nodeType":"ParameterList","parameters":[],"src":"2003:0:15"},"scope":2963,"src":"1922:167:15","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2964,"src":"431:1660:15","usedErrors":[1604,1609,1618,1623,1628,1635,1640,1645],"usedEvents":[1544,1551,2718,2727,2736]}],"src":"128:1964:15"},"id":15},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC721":[2819],"IERC721Metadata":[2991]},"id":2992,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2965,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"127:24:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2967,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2992,"sourceUnit":2820,"src":"153:39:16","symbolAliases":[{"foreign":{"id":2966,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2819,"src":"161:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2969,"name":"IERC721","nameLocations":["357:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":2819,"src":"357:7:16"},"id":2970,"nodeType":"InheritanceSpecifier","src":"357:7:16"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2968,"nodeType":"StructuredDocumentation","src":"194:133:16","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2991,"linearizedBaseContracts":[2991,2819,3312],"name":"IERC721Metadata","nameLocation":"338:15:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2971,"nodeType":"StructuredDocumentation","src":"371:58:16","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2976,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"443:4:16","nodeType":"FunctionDefinition","parameters":{"id":2972,"nodeType":"ParameterList","parameters":[],"src":"447:2:16"},"returnParameters":{"id":2975,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2974,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2976,"src":"473:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2973,"name":"string","nodeType":"ElementaryTypeName","src":"473:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"472:15:16"},"scope":2991,"src":"434:54:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2977,"nodeType":"StructuredDocumentation","src":"494:60:16","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2982,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"568:6:16","nodeType":"FunctionDefinition","parameters":{"id":2978,"nodeType":"ParameterList","parameters":[],"src":"574:2:16"},"returnParameters":{"id":2981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2982,"src":"600:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2979,"name":"string","nodeType":"ElementaryTypeName","src":"600:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"599:15:16"},"scope":2991,"src":"559:56:16","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2983,"nodeType":"StructuredDocumentation","src":"621:90:16","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2990,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"725:8:16","nodeType":"FunctionDefinition","parameters":{"id":2986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"tokenId","nameLocation":"742:7:16","nodeType":"VariableDeclaration","scope":2990,"src":"734:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2984,"name":"uint256","nodeType":"ElementaryTypeName","src":"734:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"733:17:16"},"returnParameters":{"id":2989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2990,"src":"774:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2987,"name":"string","nodeType":"ElementaryTypeName","src":"774:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"773:15:16"},"scope":2991,"src":"716:73:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2992,"src":"328:463:16","usedErrors":[],"usedEvents":[2718,2727,2736]}],"src":"127:665:16"},"id":16},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3021]},"id":3022,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2993,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:17"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2994,"nodeType":"StructuredDocumentation","src":"127:496:17","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3021,"linearizedBaseContracts":[3021],"name":"Context","nameLocation":"642:7:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3002,"nodeType":"Block","src":"718:34:17","statements":[{"expression":{"expression":{"id":2999,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:17","memberName":"sender","nodeType":"MemberAccess","src":"735:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2998,"id":3001,"nodeType":"Return","src":"728:17:17"}]},"id":3003,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:17","nodeType":"FunctionDefinition","parameters":{"id":2995,"nodeType":"ParameterList","parameters":[],"src":"675:2:17"},"returnParameters":{"id":2998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3003,"src":"709:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2996,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:17"},"scope":3021,"src":"656:96:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3011,"nodeType":"Block","src":"825:32:17","statements":[{"expression":{"expression":{"id":3008,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:17","memberName":"data","nodeType":"MemberAccess","src":"842:8:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3007,"id":3010,"nodeType":"Return","src":"835:15:17"}]},"id":3012,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:17","nodeType":"FunctionDefinition","parameters":{"id":3004,"nodeType":"ParameterList","parameters":[],"src":"775:2:17"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3012,"src":"809:14:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3005,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:17"},"scope":3021,"src":"758:99:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3019,"nodeType":"Block","src":"935:25:17","statements":[{"expression":{"hexValue":"30","id":3017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3016,"id":3018,"nodeType":"Return","src":"945:8:17"}]},"id":3020,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:17","nodeType":"FunctionDefinition","parameters":{"id":3013,"nodeType":"ParameterList","parameters":[],"src":"892:2:17"},"returnParameters":{"id":3016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3020,"src":"926:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3014,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:17"},"scope":3021,"src":"863:97:17","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3022,"src":"624:338:17","usedErrors":[],"usedEvents":[]}],"src":"101:862:17"},"id":17},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4366],"SignedMath":[4471],"Strings":[3276]},"id":3277,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3023,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:18"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3025,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3277,"sourceUnit":4367,"src":"127:37:18","symbolAliases":[{"foreign":{"id":3024,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"135:4:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":3027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3277,"sourceUnit":4472,"src":"165:49:18","symbolAliases":[{"foreign":{"id":3026,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"173:10:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3028,"nodeType":"StructuredDocumentation","src":"216:34:18","text":" @dev String operations."},"fullyImplemented":true,"id":3276,"linearizedBaseContracts":[3276],"name":"Strings","nameLocation":"259:7:18","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3031,"mutability":"constant","name":"HEX_DIGITS","nameLocation":"298:10:18","nodeType":"VariableDeclaration","scope":3276,"src":"273:56:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3029,"name":"bytes16","nodeType":"ElementaryTypeName","src":"273:7:18","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3034,"mutability":"constant","name":"ADDRESS_LENGTH","nameLocation":"358:14:18","nodeType":"VariableDeclaration","scope":3276,"src":"335:42:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3032,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"375:2:18","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"384:81:18","text":" @dev The `value` string doesn't fit in the specified `length`."},"errorSelector":"e22e27eb","id":3041,"name":"StringsInsufficientHexLength","nameLocation":"476:28:18","nodeType":"ErrorDefinition","parameters":{"id":3040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3037,"mutability":"mutable","name":"value","nameLocation":"513:5:18","nodeType":"VariableDeclaration","scope":3041,"src":"505:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3036,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3039,"mutability":"mutable","name":"length","nameLocation":"528:6:18","nodeType":"VariableDeclaration","scope":3041,"src":"520:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3038,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"504:31:18"},"src":"470:66:18"},{"body":{"id":3088,"nodeType":"Block","src":"708:627:18","statements":[{"id":3087,"nodeType":"UncheckedBlock","src":"718:611:18","statements":[{"assignments":[3050],"declarations":[{"constant":false,"id":3050,"mutability":"mutable","name":"length","nameLocation":"750:6:18","nodeType":"VariableDeclaration","scope":3087,"src":"742:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3049,"name":"uint256","nodeType":"ElementaryTypeName","src":"742:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3057,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3053,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"770:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3051,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"759:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4366_$","typeString":"type(library Math)"}},"id":3052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"764:5:18","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4186,"src":"759:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"779:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"759:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"742:38:18"},{"assignments":[3059],"declarations":[{"constant":false,"id":3059,"mutability":"mutable","name":"buffer","nameLocation":"808:6:18","nodeType":"VariableDeclaration","scope":3087,"src":"794:20:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3058,"name":"string","nodeType":"ElementaryTypeName","src":"794:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3064,"initialValue":{"arguments":[{"id":3062,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"828:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3061,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"817:10:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3060,"name":"string","nodeType":"ElementaryTypeName","src":"821:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"817:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"794:41:18"},{"assignments":[3066],"declarations":[{"constant":false,"id":3066,"mutability":"mutable","name":"ptr","nameLocation":"857:3:18","nodeType":"VariableDeclaration","scope":3087,"src":"849:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3065,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3067,"nodeType":"VariableDeclarationStatement","src":"849:11:18"},{"AST":{"nodeType":"YulBlock","src":"930:67:18","statements":[{"nodeType":"YulAssignment","src":"948:35:18","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"959:6:18"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"971:2:18","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"975:6:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:18"},"nodeType":"YulFunctionCall","src":"967:15:18"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"955:3:18"},"nodeType":"YulFunctionCall","src":"955:28:18"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"948:3:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3059,"isOffset":false,"isSlot":false,"src":"959:6:18","valueSize":1},{"declaration":3050,"isOffset":false,"isSlot":false,"src":"975:6:18","valueSize":1},{"declaration":3066,"isOffset":false,"isSlot":false,"src":"948:3:18","valueSize":1}],"id":3068,"nodeType":"InlineAssembly","src":"921:76:18"},{"body":{"id":3083,"nodeType":"Block","src":"1023:269:18","statements":[{"expression":{"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"1041:5:18","subExpression":{"id":3070,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"1041:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3072,"nodeType":"ExpressionStatement","src":"1041:5:18"},{"AST":{"nodeType":"YulBlock","src":"1124:86:18","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1154:3:18"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:18"},{"kind":"number","nodeType":"YulLiteral","src":"1175:2:18","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1164:3:18"},"nodeType":"YulFunctionCall","src":"1164:14:18"},{"name":"HEX_DIGITS","nodeType":"YulIdentifier","src":"1180:10:18"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1159:4:18"},"nodeType":"YulFunctionCall","src":"1159:32:18"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1146:7:18"},"nodeType":"YulFunctionCall","src":"1146:46:18"},"nodeType":"YulExpressionStatement","src":"1146:46:18"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3031,"isOffset":false,"isSlot":false,"src":"1180:10:18","valueSize":1},{"declaration":3066,"isOffset":false,"isSlot":false,"src":"1154:3:18","valueSize":1},{"declaration":3044,"isOffset":false,"isSlot":false,"src":"1168:5:18","valueSize":1}],"id":3073,"nodeType":"InlineAssembly","src":"1115:95:18"},{"expression":{"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"1227:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1236:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1227:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3077,"nodeType":"ExpressionStatement","src":"1227:11:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3078,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3044,"src":"1260:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1269:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1260:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3082,"nodeType":"IfStatement","src":"1256:21:18","trueBody":{"id":3081,"nodeType":"Break","src":"1272:5:18"}}]},"condition":{"hexValue":"74727565","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1017:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3084,"nodeType":"WhileStatement","src":"1010:282:18"},{"expression":{"id":3085,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"1312:6:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3048,"id":3086,"nodeType":"Return","src":"1305:13:18"}]}]},"documentation":{"id":3042,"nodeType":"StructuredDocumentation","src":"542:90:18","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3089,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"646:8:18","nodeType":"FunctionDefinition","parameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3044,"mutability":"mutable","name":"value","nameLocation":"663:5:18","nodeType":"VariableDeclaration","scope":3089,"src":"655:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3043,"name":"uint256","nodeType":"ElementaryTypeName","src":"655:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"654:15:18"},"returnParameters":{"id":3048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3089,"src":"693:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3046,"name":"string","nodeType":"ElementaryTypeName","src":"693:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"692:15:18"},"scope":3276,"src":"637:698:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3114,"nodeType":"Block","src":"1511:92:18","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"1542:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":3101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1550:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:9:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":3104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1560:2:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1542:20:18","trueExpression":{"hexValue":"2d","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1554:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":3109,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"1588:5:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":3107,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4471,"src":"1573:10:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$4471_$","typeString":"type(library SignedMath)"}},"id":3108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1584:3:18","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4470,"src":"1573:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":3110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1573:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3106,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"1564:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1564:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":3098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1528:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3097,"name":"string","nodeType":"ElementaryTypeName","src":"1528:6:18","typeDescriptions":{}}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1535:6:18","memberName":"concat","nodeType":"MemberAccess","src":"1528:13:18","typeDescriptions":{"typeIdentifier":"t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$","typeString":"function () pure returns (string memory)"}},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1528:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3096,"id":3113,"nodeType":"Return","src":"1521:75:18"}]},"documentation":{"id":3090,"nodeType":"StructuredDocumentation","src":"1341:89:18","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":3115,"implemented":true,"kind":"function","modifiers":[],"name":"toStringSigned","nameLocation":"1444:14:18","nodeType":"FunctionDefinition","parameters":{"id":3093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3092,"mutability":"mutable","name":"value","nameLocation":"1466:5:18","nodeType":"VariableDeclaration","scope":3115,"src":"1459:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3091,"name":"int256","nodeType":"ElementaryTypeName","src":"1459:6:18","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1458:14:18"},"returnParameters":{"id":3096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3115,"src":"1496:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3094,"name":"string","nodeType":"ElementaryTypeName","src":"1496:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1495:15:18"},"scope":3276,"src":"1435:168:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3134,"nodeType":"Block","src":"1782:100:18","statements":[{"id":3133,"nodeType":"UncheckedBlock","src":"1792:84:18","statements":[{"expression":{"arguments":[{"id":3124,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1835:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"1854:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3125,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4366,"src":"1842:4:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4366_$","typeString":"type(library Math)"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1847:6:18","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4308,"src":"1842:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1842:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1863:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1842:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3123,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3135,3218,3238],"referencedDeclaration":3218,"src":"1823:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1823:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3122,"id":3132,"nodeType":"Return","src":"1816:49:18"}]}]},"documentation":{"id":3116,"nodeType":"StructuredDocumentation","src":"1609:94:18","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3135,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1717:11:18","nodeType":"FunctionDefinition","parameters":{"id":3119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3118,"mutability":"mutable","name":"value","nameLocation":"1737:5:18","nodeType":"VariableDeclaration","scope":3135,"src":"1729:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"1729:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1728:15:18"},"returnParameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3135,"src":"1767:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3120,"name":"string","nodeType":"ElementaryTypeName","src":"1767:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1766:15:18"},"scope":3276,"src":"1708:174:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3217,"nodeType":"Block","src":"2095:435:18","statements":[{"assignments":[3146],"declarations":[{"constant":false,"id":3146,"mutability":"mutable","name":"localValue","nameLocation":"2113:10:18","nodeType":"VariableDeclaration","scope":3217,"src":"2105:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3145,"name":"uint256","nodeType":"ElementaryTypeName","src":"2105:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3148,"initialValue":{"id":3147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"2126:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2105:26:18"},{"assignments":[3150],"declarations":[{"constant":false,"id":3150,"mutability":"mutable","name":"buffer","nameLocation":"2154:6:18","nodeType":"VariableDeclaration","scope":3217,"src":"2141:19:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3149,"name":"bytes","nodeType":"ElementaryTypeName","src":"2141:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3159,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2173:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3154,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"2177:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2173:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2186:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2173:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2163:9:18","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3151,"name":"bytes","nodeType":"ElementaryTypeName","src":"2167:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2163:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2141:47:18"},{"expression":{"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3160,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"2198:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3162,"indexExpression":{"hexValue":"30","id":3161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2205:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2198:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2210:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2198:15:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3165,"nodeType":"ExpressionStatement","src":"2198:15:18"},{"expression":{"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3166,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"2223:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3168,"indexExpression":{"hexValue":"31","id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2230:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2223:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2235:3:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2223:15:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3171,"nodeType":"ExpressionStatement","src":"2223:15:18"},{"body":{"id":3200,"nodeType":"Block","src":"2293:95:18","statements":[{"expression":{"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3186,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"2307:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3188,"indexExpression":{"id":3187,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"2314:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2307:9:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3189,"name":"HEX_DIGITS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"2319:10:18","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3193,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3190,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"2330:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2343:3:18","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2330:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2319:28:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2307:40:18","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3195,"nodeType":"ExpressionStatement","src":"2307:40:18"},{"expression":{"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3196,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"2361:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2376:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2361:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3199,"nodeType":"ExpressionStatement","src":"2361:16:18"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3180,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"2281:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2285:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2281:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3201,"initializationExpression":{"assignments":[3173],"declarations":[{"constant":false,"id":3173,"mutability":"mutable","name":"i","nameLocation":"2261:1:18","nodeType":"VariableDeclaration","scope":3201,"src":"2253:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3172,"name":"uint256","nodeType":"ElementaryTypeName","src":"2253:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3179,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2265:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3175,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"2269:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2265:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2278:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2265:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2253:26:18"},"loopExpression":{"expression":{"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2288:3:18","subExpression":{"id":3183,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3173,"src":"2290:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3185,"nodeType":"ExpressionStatement","src":"2288:3:18"},"nodeType":"ForStatement","src":"2248:140:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3202,"name":"localValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3146,"src":"2401:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2401:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3211,"nodeType":"IfStatement","src":"2397:96:18","trueBody":{"id":3210,"nodeType":"Block","src":"2418:75:18","statements":[{"errorCall":{"arguments":[{"id":3206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3138,"src":"2468:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3207,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"2475:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3205,"name":"StringsInsufficientHexLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"2439:28:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":3208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2439:43:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3209,"nodeType":"RevertStatement","src":"2432:50:18"}]}},{"expression":{"arguments":[{"id":3214,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"2516:6:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3213,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3212,"name":"string","nodeType":"ElementaryTypeName","src":"2509:6:18","typeDescriptions":{}}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:14:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3144,"id":3216,"nodeType":"Return","src":"2502:21:18"}]},"documentation":{"id":3136,"nodeType":"StructuredDocumentation","src":"1888:112:18","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3218,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2014:11:18","nodeType":"FunctionDefinition","parameters":{"id":3141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3138,"mutability":"mutable","name":"value","nameLocation":"2034:5:18","nodeType":"VariableDeclaration","scope":3218,"src":"2026:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3140,"mutability":"mutable","name":"length","nameLocation":"2049:6:18","nodeType":"VariableDeclaration","scope":3218,"src":"2041:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3139,"name":"uint256","nodeType":"ElementaryTypeName","src":"2041:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2025:31:18"},"returnParameters":{"id":3144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3218,"src":"2080:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3142,"name":"string","nodeType":"ElementaryTypeName","src":"2080:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2079:15:18"},"scope":3276,"src":"2005:525:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3237,"nodeType":"Block","src":"2762:75:18","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3231,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"2807:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2799:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3229,"name":"uint160","nodeType":"ElementaryTypeName","src":"2799:7:18","typeDescriptions":{}}},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2791:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3227,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:18","typeDescriptions":{}}},"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2791:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3234,"name":"ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3034,"src":"2815:14:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3226,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3135,3218,3238],"referencedDeclaration":3218,"src":"2779:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2779:51:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3225,"id":3236,"nodeType":"Return","src":"2772:58:18"}]},"documentation":{"id":3219,"nodeType":"StructuredDocumentation","src":"2536:148:18","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."},"id":3238,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2698:11:18","nodeType":"FunctionDefinition","parameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"addr","nameLocation":"2718:4:18","nodeType":"VariableDeclaration","scope":3238,"src":"2710:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3220,"name":"address","nodeType":"ElementaryTypeName","src":"2710:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2709:14:18"},"returnParameters":{"id":3225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3238,"src":"2747:13:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3223,"name":"string","nodeType":"ElementaryTypeName","src":"2747:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2746:15:18"},"scope":3276,"src":"2689:148:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3274,"nodeType":"Block","src":"2992:104:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3250,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3241,"src":"3015:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3249,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3009:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3248,"name":"bytes","nodeType":"ElementaryTypeName","src":"3009:5:18","typeDescriptions":{}}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3018:6:18","memberName":"length","nodeType":"MemberAccess","src":"3009:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3255,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"3034:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3028:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3253,"name":"bytes","nodeType":"ElementaryTypeName","src":"3028:5:18","typeDescriptions":{}}},"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3028:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3037:6:18","memberName":"length","nodeType":"MemberAccess","src":"3028:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3009:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3262,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3241,"src":"3063:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3057:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3260,"name":"bytes","nodeType":"ElementaryTypeName","src":"3057:5:18","typeDescriptions":{}}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3057:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3259,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3047:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3047:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3268,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"3086:1:18","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3080:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3266,"name":"bytes","nodeType":"ElementaryTypeName","src":"3080:5:18","typeDescriptions":{}}},"id":3269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3080:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3265,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3070:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3070:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3047:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3009:80:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3247,"id":3273,"nodeType":"Return","src":"3002:87:18"}]},"documentation":{"id":3239,"nodeType":"StructuredDocumentation","src":"2843:66:18","text":" @dev Returns true if the two strings are equal."},"id":3275,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2923:5:18","nodeType":"FunctionDefinition","parameters":{"id":3244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3241,"mutability":"mutable","name":"a","nameLocation":"2943:1:18","nodeType":"VariableDeclaration","scope":3275,"src":"2929:15:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3240,"name":"string","nodeType":"ElementaryTypeName","src":"2929:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3243,"mutability":"mutable","name":"b","nameLocation":"2960:1:18","nodeType":"VariableDeclaration","scope":3275,"src":"2946:15:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3242,"name":"string","nodeType":"ElementaryTypeName","src":"2946:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2928:34:18"},"returnParameters":{"id":3247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3246,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3275,"src":"2986:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3245,"name":"bool","nodeType":"ElementaryTypeName","src":"2986:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2985:6:18"},"scope":3276,"src":"2914:182:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3277,"src":"251:2847:18","usedErrors":[3041],"usedEvents":[]}],"src":"101:2998:18"},"id":18},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3300],"IERC165":[3312]},"id":3301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3278,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:19"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3280,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3301,"sourceUnit":3313,"src":"140:38:19","symbolAliases":[{"foreign":{"id":3279,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"148:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3282,"name":"IERC165","nameLocations":["687:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"687:7:19"},"id":3283,"nodeType":"InheritanceSpecifier","src":"687:7:19"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3281,"nodeType":"StructuredDocumentation","src":"180:478:19","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":3300,"linearizedBaseContracts":[3300,3312],"name":"ERC165","nameLocation":"677:6:19","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3311],"body":{"id":3298,"nodeType":"Block","src":"844:64:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3291,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"861:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3293,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"881:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3312_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3312_$","typeString":"type(contract IERC165)"}],"id":3292,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"876:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"876:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3312","typeString":"type(contract IERC165)"}},"id":3295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"890:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"876:25:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"861:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3290,"id":3297,"nodeType":"Return","src":"854:47:19"}]},"documentation":{"id":3284,"nodeType":"StructuredDocumentation","src":"701:56:19","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3299,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"771:17:19","nodeType":"FunctionDefinition","parameters":{"id":3287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3286,"mutability":"mutable","name":"interfaceId","nameLocation":"796:11:19","nodeType":"VariableDeclaration","scope":3299,"src":"789:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3285,"name":"bytes4","nodeType":"ElementaryTypeName","src":"789:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"788:20:19"},"returnParameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3289,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3299,"src":"838:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3288,"name":"bool","nodeType":"ElementaryTypeName","src":"838:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:6:19"},"scope":3300,"src":"762:146:19","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3301,"src":"659:251:19","usedErrors":[],"usedEvents":[]}],"src":"114:797:19"},"id":19},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3312]},"id":3313,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3302,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3303,"nodeType":"StructuredDocumentation","src":"141:279:20","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3312,"linearizedBaseContracts":[3312],"name":"IERC165","nameLocation":"431:7:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3304,"nodeType":"StructuredDocumentation","src":"445:340:20","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3311,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"799:17:20","nodeType":"FunctionDefinition","parameters":{"id":3307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3306,"mutability":"mutable","name":"interfaceId","nameLocation":"824:11:20","nodeType":"VariableDeclaration","scope":3311,"src":"817:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3305,"name":"bytes4","nodeType":"ElementaryTypeName","src":"817:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"816:20:20"},"returnParameters":{"id":3310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3309,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3311,"src":"860:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3308,"name":"bool","nodeType":"ElementaryTypeName","src":"860:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"859:6:20"},"scope":3312,"src":"790:76:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3313,"src":"421:447:20","usedErrors":[],"usedEvents":[]}],"src":"115:754:20"},"id":20},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4366]},"id":4367,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3314,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"103:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3315,"nodeType":"StructuredDocumentation","src":"129:73:21","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4366,"linearizedBaseContracts":[4366],"name":"Math","nameLocation":"211:4:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3316,"nodeType":"StructuredDocumentation","src":"222:50:21","text":" @dev Muldiv operation overflow."},"errorSelector":"227bc153","id":3318,"name":"MathOverflowedMulDiv","nameLocation":"283:20:21","nodeType":"ErrorDefinition","parameters":{"id":3317,"nodeType":"ParameterList","parameters":[],"src":"303:2:21"},"src":"277:29:21"},{"canonicalName":"Math.Rounding","id":3323,"members":[{"id":3319,"name":"Floor","nameLocation":"336:5:21","nodeType":"EnumValue","src":"336:5:21"},{"id":3320,"name":"Ceil","nameLocation":"379:4:21","nodeType":"EnumValue","src":"379:4:21"},{"id":3321,"name":"Trunc","nameLocation":"421:5:21","nodeType":"EnumValue","src":"421:5:21"},{"id":3322,"name":"Expand","nameLocation":"451:6:21","nodeType":"EnumValue","src":"451:6:21"}],"name":"Rounding","nameLocation":"317:8:21","nodeType":"EnumDefinition","src":"312:169:21"},{"body":{"id":3354,"nodeType":"Block","src":"661:140:21","statements":[{"id":3353,"nodeType":"UncheckedBlock","src":"671:124:21","statements":[{"assignments":[3336],"declarations":[{"constant":false,"id":3336,"mutability":"mutable","name":"c","nameLocation":"703:1:21","nodeType":"VariableDeclaration","scope":3353,"src":"695:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3335,"name":"uint256","nodeType":"ElementaryTypeName","src":"695:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3340,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3337,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"707:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3338,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"711:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"707:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"695:17:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3341,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"730:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3342,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3326,"src":"734:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"730:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3348,"nodeType":"IfStatement","src":"726:28:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"745:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"752:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3346,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"744:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3334,"id":3347,"nodeType":"Return","src":"737:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"776:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3350,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"782:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3351,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"775:9:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3334,"id":3352,"nodeType":"Return","src":"768:16:21"}]}]},"documentation":{"id":3324,"nodeType":"StructuredDocumentation","src":"487:93:21","text":" @dev Returns the addition of two unsigned integers, with an overflow flag."},"id":3355,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"594:6:21","nodeType":"FunctionDefinition","parameters":{"id":3329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"a","nameLocation":"609:1:21","nodeType":"VariableDeclaration","scope":3355,"src":"601:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3325,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3328,"mutability":"mutable","name":"b","nameLocation":"620:1:21","nodeType":"VariableDeclaration","scope":3355,"src":"612:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3327,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:21"},"returnParameters":{"id":3334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3355,"src":"646:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3330,"name":"bool","nodeType":"ElementaryTypeName","src":"646:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3355,"src":"652:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3332,"name":"uint256","nodeType":"ElementaryTypeName","src":"652:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:15:21"},"scope":4366,"src":"585:216:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3382,"nodeType":"Block","src":"984:113:21","statements":[{"id":3381,"nodeType":"UncheckedBlock","src":"994:97:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3367,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"1022:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3368,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"1026:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1022:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3374,"nodeType":"IfStatement","src":"1018:28:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1037:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3372,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1036:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3366,"id":3373,"nodeType":"Return","src":"1029:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":3375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1068:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3376,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"1074:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3377,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"1078:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1074:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3379,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1067:13:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3366,"id":3380,"nodeType":"Return","src":"1060:20:21"}]}]},"documentation":{"id":3356,"nodeType":"StructuredDocumentation","src":"807:96:21","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag."},"id":3383,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"917:6:21","nodeType":"FunctionDefinition","parameters":{"id":3361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"a","nameLocation":"932:1:21","nodeType":"VariableDeclaration","scope":3383,"src":"924:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3357,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3360,"mutability":"mutable","name":"b","nameLocation":"943:1:21","nodeType":"VariableDeclaration","scope":3383,"src":"935:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3359,"name":"uint256","nodeType":"ElementaryTypeName","src":"935:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"923:22:21"},"returnParameters":{"id":3366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3363,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3383,"src":"969:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3362,"name":"bool","nodeType":"ElementaryTypeName","src":"969:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3383,"src":"975:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"975:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"968:15:21"},"scope":4366,"src":"908:189:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3424,"nodeType":"Block","src":"1283:417:21","statements":[{"id":3423,"nodeType":"UncheckedBlock","src":"1293:401:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3395,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"1551:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1556:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1551:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3402,"nodeType":"IfStatement","src":"1547:28:21","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":3398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1567:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":3399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1573:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3400,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1566:9:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3394,"id":3401,"nodeType":"Return","src":"1559:16:21"}},{"assignments":[3404],"declarations":[{"constant":false,"id":3404,"mutability":"mutable","name":"c","nameLocation":"1597:1:21","nodeType":"VariableDeclaration","scope":3423,"src":"1589:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3403,"name":"uint256","nodeType":"ElementaryTypeName","src":"1589:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3408,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3405,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"1601:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3406,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"1605:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1601:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1589:17:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3409,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"1624:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3410,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"1628:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3412,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"1633:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1624:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3418,"nodeType":"IfStatement","src":"1620:33:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1644:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1651:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3416,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1643:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3394,"id":3417,"nodeType":"Return","src":"1636:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1675:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":3420,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"1681:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3421,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1674:9:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3394,"id":3422,"nodeType":"Return","src":"1667:16:21"}]}]},"documentation":{"id":3384,"nodeType":"StructuredDocumentation","src":"1103:99:21","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag."},"id":3425,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1216:6:21","nodeType":"FunctionDefinition","parameters":{"id":3389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3386,"mutability":"mutable","name":"a","nameLocation":"1231:1:21","nodeType":"VariableDeclaration","scope":3425,"src":"1223:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3385,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3388,"mutability":"mutable","name":"b","nameLocation":"1242:1:21","nodeType":"VariableDeclaration","scope":3425,"src":"1234:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:22:21"},"returnParameters":{"id":3394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3425,"src":"1268:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3390,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3425,"src":"1274:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3392,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1267:15:21"},"scope":4366,"src":"1207:493:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3452,"nodeType":"Block","src":"1887:114:21","statements":[{"id":3451,"nodeType":"UncheckedBlock","src":"1897:98:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3437,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"1925:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1930:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1925:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3444,"nodeType":"IfStatement","src":"1921:29:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1941:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1948:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3442,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1940:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3436,"id":3443,"nodeType":"Return","src":"1933:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1972:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3446,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"1978:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3447,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"1982:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1978:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3449,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1971:13:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3436,"id":3450,"nodeType":"Return","src":"1964:20:21"}]}]},"documentation":{"id":3426,"nodeType":"StructuredDocumentation","src":"1706:100:21","text":" @dev Returns the division of two unsigned integers, with a division by zero flag."},"id":3453,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1820:6:21","nodeType":"FunctionDefinition","parameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3428,"mutability":"mutable","name":"a","nameLocation":"1835:1:21","nodeType":"VariableDeclaration","scope":3453,"src":"1827:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3427,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3430,"mutability":"mutable","name":"b","nameLocation":"1846:1:21","nodeType":"VariableDeclaration","scope":3453,"src":"1838:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3429,"name":"uint256","nodeType":"ElementaryTypeName","src":"1838:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:22:21"},"returnParameters":{"id":3436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3453,"src":"1872:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3432,"name":"bool","nodeType":"ElementaryTypeName","src":"1872:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3453,"src":"1878:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3434,"name":"uint256","nodeType":"ElementaryTypeName","src":"1878:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1871:15:21"},"scope":4366,"src":"1811:190:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3480,"nodeType":"Block","src":"2198:114:21","statements":[{"id":3479,"nodeType":"UncheckedBlock","src":"2208:98:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3465,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"2236:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3472,"nodeType":"IfStatement","src":"2232:29:21","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2252:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":3469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2259:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3470,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2251:10:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":3464,"id":3471,"nodeType":"Return","src":"2244:17:21"}},{"expression":{"components":[{"hexValue":"74727565","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2283:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3474,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"2289:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3475,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"2293:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2282:13:21","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":3464,"id":3478,"nodeType":"Return","src":"2275:20:21"}]}]},"documentation":{"id":3454,"nodeType":"StructuredDocumentation","src":"2007:110:21","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."},"id":3481,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2131:6:21","nodeType":"FunctionDefinition","parameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3456,"mutability":"mutable","name":"a","nameLocation":"2146:1:21","nodeType":"VariableDeclaration","scope":3481,"src":"2138:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"b","nameLocation":"2157:1:21","nodeType":"VariableDeclaration","scope":3481,"src":"2149:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3457,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2137:22:21"},"returnParameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3481,"src":"2183:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3460,"name":"bool","nodeType":"ElementaryTypeName","src":"2183:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3481,"src":"2189:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3462,"name":"uint256","nodeType":"ElementaryTypeName","src":"2189:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2182:15:21"},"scope":4366,"src":"2122:190:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3498,"nodeType":"Block","src":"2449:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3491,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"2466:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3492,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"2470:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2466:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3495,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"2478:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2466:13:21","trueExpression":{"id":3494,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"2474:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3490,"id":3497,"nodeType":"Return","src":"2459:20:21"}]},"documentation":{"id":3482,"nodeType":"StructuredDocumentation","src":"2318:59:21","text":" @dev Returns the largest of two numbers."},"id":3499,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"2391:3:21","nodeType":"FunctionDefinition","parameters":{"id":3487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3484,"mutability":"mutable","name":"a","nameLocation":"2403:1:21","nodeType":"VariableDeclaration","scope":3499,"src":"2395:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3483,"name":"uint256","nodeType":"ElementaryTypeName","src":"2395:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3486,"mutability":"mutable","name":"b","nameLocation":"2414:1:21","nodeType":"VariableDeclaration","scope":3499,"src":"2406:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3485,"name":"uint256","nodeType":"ElementaryTypeName","src":"2406:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2394:22:21"},"returnParameters":{"id":3490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3499,"src":"2440:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3488,"name":"uint256","nodeType":"ElementaryTypeName","src":"2440:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2439:9:21"},"scope":4366,"src":"2382:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3516,"nodeType":"Block","src":"2624:37:21","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3509,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"2641:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3510,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"2645:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2641:5:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3513,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"2653:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2641:13:21","trueExpression":{"id":3512,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3502,"src":"2649:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3508,"id":3515,"nodeType":"Return","src":"2634:20:21"}]},"documentation":{"id":3500,"nodeType":"StructuredDocumentation","src":"2492:60:21","text":" @dev Returns the smallest of two numbers."},"id":3517,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"2566:3:21","nodeType":"FunctionDefinition","parameters":{"id":3505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3502,"mutability":"mutable","name":"a","nameLocation":"2578:1:21","nodeType":"VariableDeclaration","scope":3517,"src":"2570:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3501,"name":"uint256","nodeType":"ElementaryTypeName","src":"2570:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3504,"mutability":"mutable","name":"b","nameLocation":"2589:1:21","nodeType":"VariableDeclaration","scope":3517,"src":"2581:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3503,"name":"uint256","nodeType":"ElementaryTypeName","src":"2581:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2569:22:21"},"returnParameters":{"id":3508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3517,"src":"2615:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3506,"name":"uint256","nodeType":"ElementaryTypeName","src":"2615:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2614:9:21"},"scope":4366,"src":"2557:104:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3539,"nodeType":"Block","src":"2845:82:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3527,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"2900:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3528,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"2904:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2900:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3530,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2899:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3531,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"2910:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3532,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"2914:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2910:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3534,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2909:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2919:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2909:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2899:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3526,"id":3538,"nodeType":"Return","src":"2892:28:21"}]},"documentation":{"id":3518,"nodeType":"StructuredDocumentation","src":"2667:102:21","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3540,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"2783:7:21","nodeType":"FunctionDefinition","parameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"a","nameLocation":"2799:1:21","nodeType":"VariableDeclaration","scope":3540,"src":"2791:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3519,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3522,"mutability":"mutable","name":"b","nameLocation":"2810:1:21","nodeType":"VariableDeclaration","scope":3540,"src":"2802:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3521,"name":"uint256","nodeType":"ElementaryTypeName","src":"2802:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:22:21"},"returnParameters":{"id":3526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3525,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3540,"src":"2836:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3524,"name":"uint256","nodeType":"ElementaryTypeName","src":"2836:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2835:9:21"},"scope":4366,"src":"2774:153:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3573,"nodeType":"Block","src":"3219:260:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3550,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"3233:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3238:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3233:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3558,"nodeType":"IfStatement","src":"3229:127:21","trueBody":{"id":3557,"nodeType":"Block","src":"3241:115:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3553,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"3340:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3554,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"3344:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3340:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3549,"id":3556,"nodeType":"Return","src":"3333:12:21"}]}},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3559,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"3444:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3449:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3444:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3563,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"3458:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3462:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3458:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3566,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3457:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3567,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"3467:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3457:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3471:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3457:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3444:28:21","trueExpression":{"hexValue":"30","id":3562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3453:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3549,"id":3572,"nodeType":"Return","src":"3437:35:21"}]},"documentation":{"id":3541,"nodeType":"StructuredDocumentation","src":"2933:210:21","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."},"id":3574,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"3157:7:21","nodeType":"FunctionDefinition","parameters":{"id":3546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"a","nameLocation":"3173:1:21","nodeType":"VariableDeclaration","scope":3574,"src":"3165:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"3165:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"b","nameLocation":"3184:1:21","nodeType":"VariableDeclaration","scope":3574,"src":"3176:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3544,"name":"uint256","nodeType":"ElementaryTypeName","src":"3176:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3164:22:21"},"returnParameters":{"id":3549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3574,"src":"3210:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3547,"name":"uint256","nodeType":"ElementaryTypeName","src":"3210:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3209:9:21"},"scope":4366,"src":"3148:331:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3699,"nodeType":"Block","src":"3901:4018:21","statements":[{"id":3698,"nodeType":"UncheckedBlock","src":"3911:4002:21","statements":[{"assignments":[3587],"declarations":[{"constant":false,"id":3587,"mutability":"mutable","name":"prod0","nameLocation":"4240:5:21","nodeType":"VariableDeclaration","scope":3698,"src":"4232:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3586,"name":"uint256","nodeType":"ElementaryTypeName","src":"4232:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3591,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3588,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3577,"src":"4248:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3589,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"4252:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4248:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4232:21:21"},{"assignments":[3593],"declarations":[{"constant":false,"id":3593,"mutability":"mutable","name":"prod1","nameLocation":"4320:5:21","nodeType":"VariableDeclaration","scope":3698,"src":"4312:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"4312:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3594,"nodeType":"VariableDeclarationStatement","src":"4312:13:21"},{"AST":{"nodeType":"YulBlock","src":"4392:122:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4410:30:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4427:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"4430:1:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4437:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4433:3:21"},"nodeType":"YulFunctionCall","src":"4433:6:21"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"4420:6:21"},"nodeType":"YulFunctionCall","src":"4420:20:21"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"4414:2:21","type":""}]},{"nodeType":"YulAssignment","src":"4457:43:21","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4474:2:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"4478:5:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4470:3:21"},"nodeType":"YulFunctionCall","src":"4470:14:21"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"4489:2:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"4493:5:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4486:2:21"},"nodeType":"YulFunctionCall","src":"4486:13:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4466:3:21"},"nodeType":"YulFunctionCall","src":"4466:34:21"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"4457:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3587,"isOffset":false,"isSlot":false,"src":"4478:5:21","valueSize":1},{"declaration":3587,"isOffset":false,"isSlot":false,"src":"4493:5:21","valueSize":1},{"declaration":3593,"isOffset":false,"isSlot":false,"src":"4457:5:21","valueSize":1},{"declaration":3577,"isOffset":false,"isSlot":false,"src":"4427:1:21","valueSize":1},{"declaration":3579,"isOffset":false,"isSlot":false,"src":"4430:1:21","valueSize":1}],"id":3595,"nodeType":"InlineAssembly","src":"4383:131:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3596,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"4595:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4604:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4595:10:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3604,"nodeType":"IfStatement","src":"4591:368:21","trueBody":{"id":3603,"nodeType":"Block","src":"4607:352:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3599,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"4925:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3600,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"4933:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4925:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3585,"id":3602,"nodeType":"Return","src":"4918:26:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3605,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"5065:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3606,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"5080:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3612,"nodeType":"IfStatement","src":"5061:88:21","trueBody":{"id":3611,"nodeType":"Block","src":"5087:62:21","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3608,"name":"MathOverflowedMulDiv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3318,"src":"5112:20:21","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5112:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3610,"nodeType":"RevertStatement","src":"5105:29:21"}]}},{"assignments":[3614],"declarations":[{"constant":false,"id":3614,"mutability":"mutable","name":"remainder","nameLocation":"5412:9:21","nodeType":"VariableDeclaration","scope":3698,"src":"5404:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3613,"name":"uint256","nodeType":"ElementaryTypeName","src":"5404:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3615,"nodeType":"VariableDeclarationStatement","src":"5404:17:21"},{"AST":{"nodeType":"YulBlock","src":"5444:291:21","statements":[{"nodeType":"YulAssignment","src":"5513:38:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5533:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"5536:1:21"},{"name":"denominator","nodeType":"YulIdentifier","src":"5539:11:21"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5526:6:21"},"nodeType":"YulFunctionCall","src":"5526:25:21"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"5513:9:21"}]},{"nodeType":"YulAssignment","src":"5633:41:21","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"5646:5:21"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"5656:9:21"},{"name":"prod0","nodeType":"YulIdentifier","src":"5667:5:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5653:2:21"},"nodeType":"YulFunctionCall","src":"5653:20:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5642:3:21"},"nodeType":"YulFunctionCall","src":"5642:32:21"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"5633:5:21"}]},{"nodeType":"YulAssignment","src":"5691:30:21","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"5704:5:21"},{"name":"remainder","nodeType":"YulIdentifier","src":"5711:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5700:3:21"},"nodeType":"YulFunctionCall","src":"5700:21:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"5691:5:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3581,"isOffset":false,"isSlot":false,"src":"5539:11:21","valueSize":1},{"declaration":3587,"isOffset":false,"isSlot":false,"src":"5667:5:21","valueSize":1},{"declaration":3587,"isOffset":false,"isSlot":false,"src":"5691:5:21","valueSize":1},{"declaration":3587,"isOffset":false,"isSlot":false,"src":"5704:5:21","valueSize":1},{"declaration":3593,"isOffset":false,"isSlot":false,"src":"5633:5:21","valueSize":1},{"declaration":3593,"isOffset":false,"isSlot":false,"src":"5646:5:21","valueSize":1},{"declaration":3614,"isOffset":false,"isSlot":false,"src":"5513:9:21","valueSize":1},{"declaration":3614,"isOffset":false,"isSlot":false,"src":"5656:9:21","valueSize":1},{"declaration":3614,"isOffset":false,"isSlot":false,"src":"5711:9:21","valueSize":1},{"declaration":3577,"isOffset":false,"isSlot":false,"src":"5533:1:21","valueSize":1},{"declaration":3579,"isOffset":false,"isSlot":false,"src":"5536:1:21","valueSize":1}],"id":3616,"nodeType":"InlineAssembly","src":"5435:300:21"},{"assignments":[3618],"declarations":[{"constant":false,"id":3618,"mutability":"mutable","name":"twos","nameLocation":"5947:4:21","nodeType":"VariableDeclaration","scope":3698,"src":"5939:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"5939:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3625,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"5954:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5969:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3621,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"5973:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5969:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3623,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5968:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5954:31:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5939:46:21"},{"AST":{"nodeType":"YulBlock","src":"6008:362:21","statements":[{"nodeType":"YulAssignment","src":"6073:37:21","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"6092:11:21"},{"name":"twos","nodeType":"YulIdentifier","src":"6105:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6088:3:21"},"nodeType":"YulFunctionCall","src":"6088:22:21"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"6073:11:21"}]},{"nodeType":"YulAssignment","src":"6177:25:21","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"6190:5:21"},{"name":"twos","nodeType":"YulIdentifier","src":"6197:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6186:3:21"},"nodeType":"YulFunctionCall","src":"6186:16:21"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"6177:5:21"}]},{"nodeType":"YulAssignment","src":"6317:39:21","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6337:1:21","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"6340:4:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6333:3:21"},"nodeType":"YulFunctionCall","src":"6333:12:21"},{"name":"twos","nodeType":"YulIdentifier","src":"6347:4:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6329:3:21"},"nodeType":"YulFunctionCall","src":"6329:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"6354:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6325:3:21"},"nodeType":"YulFunctionCall","src":"6325:31:21"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"6317:4:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3581,"isOffset":false,"isSlot":false,"src":"6073:11:21","valueSize":1},{"declaration":3581,"isOffset":false,"isSlot":false,"src":"6092:11:21","valueSize":1},{"declaration":3587,"isOffset":false,"isSlot":false,"src":"6177:5:21","valueSize":1},{"declaration":3587,"isOffset":false,"isSlot":false,"src":"6190:5:21","valueSize":1},{"declaration":3618,"isOffset":false,"isSlot":false,"src":"6105:4:21","valueSize":1},{"declaration":3618,"isOffset":false,"isSlot":false,"src":"6197:4:21","valueSize":1},{"declaration":3618,"isOffset":false,"isSlot":false,"src":"6317:4:21","valueSize":1},{"declaration":3618,"isOffset":false,"isSlot":false,"src":"6340:4:21","valueSize":1},{"declaration":3618,"isOffset":false,"isSlot":false,"src":"6347:4:21","valueSize":1}],"id":3626,"nodeType":"InlineAssembly","src":"5999:371:21"},{"expression":{"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3627,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"6436:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3628,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3593,"src":"6445:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3629,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"6453:4:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6445:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6436:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3632,"nodeType":"ExpressionStatement","src":"6436:21:21"},{"assignments":[3634],"declarations":[{"constant":false,"id":3634,"mutability":"mutable","name":"inverse","nameLocation":"6783:7:21","nodeType":"VariableDeclaration","scope":3698,"src":"6775:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3633,"name":"uint256","nodeType":"ElementaryTypeName","src":"6775:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3641,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6794:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3636,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"6798:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6794:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3638,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6793:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6813:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"6793:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6775:39:21"},{"expression":{"id":3648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3642,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7031:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7042:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3644,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7046:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3645,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7060:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7046:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7042:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7031:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3649,"nodeType":"ExpressionStatement","src":"7031:36:21"},{"expression":{"id":3656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3650,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7100:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7111:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3652,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7115:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3653,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7129:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7115:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7111:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7100:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3657,"nodeType":"ExpressionStatement","src":"7100:36:21"},{"expression":{"id":3664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3658,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7170:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7181:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3660,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7185:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3661,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7199:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7185:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7181:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7170:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3665,"nodeType":"ExpressionStatement","src":"7170:36:21"},{"expression":{"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3666,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7240:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7251:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3668,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7255:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3669,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7269:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7255:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7251:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7240:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3673,"nodeType":"ExpressionStatement","src":"7240:36:21"},{"expression":{"id":3680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3674,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7310:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7321:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3676,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7325:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3677,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7339:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7325:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7321:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7310:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3681,"nodeType":"ExpressionStatement","src":"7310:36:21"},{"expression":{"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3682,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7381:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7392:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3684,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3581,"src":"7396:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3685,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7410:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7396:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7392:25:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7381:36:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3689,"nodeType":"ExpressionStatement","src":"7381:36:21"},{"expression":{"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3690,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"7851:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3691,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"7860:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3692,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"7868:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7860:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7851:24:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3695,"nodeType":"ExpressionStatement","src":"7851:24:21"},{"expression":{"id":3696,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3584,"src":"7896:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3585,"id":3697,"nodeType":"Return","src":"7889:13:21"}]}]},"documentation":{"id":3575,"nodeType":"StructuredDocumentation","src":"3485:313:21","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."},"id":3700,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"3812:6:21","nodeType":"FunctionDefinition","parameters":{"id":3582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3577,"mutability":"mutable","name":"x","nameLocation":"3827:1:21","nodeType":"VariableDeclaration","scope":3700,"src":"3819:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3576,"name":"uint256","nodeType":"ElementaryTypeName","src":"3819:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3579,"mutability":"mutable","name":"y","nameLocation":"3838:1:21","nodeType":"VariableDeclaration","scope":3700,"src":"3830:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3578,"name":"uint256","nodeType":"ElementaryTypeName","src":"3830:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3581,"mutability":"mutable","name":"denominator","nameLocation":"3849:11:21","nodeType":"VariableDeclaration","scope":3700,"src":"3841:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3580,"name":"uint256","nodeType":"ElementaryTypeName","src":"3841:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3818:43:21"},"returnParameters":{"id":3585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3584,"mutability":"mutable","name":"result","nameLocation":"3893:6:21","nodeType":"VariableDeclaration","scope":3700,"src":"3885:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3583,"name":"uint256","nodeType":"ElementaryTypeName","src":"3885:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3884:16:21"},"scope":4366,"src":"3803:4116:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3742,"nodeType":"Block","src":"8161:192:21","statements":[{"assignments":[3716],"declarations":[{"constant":false,"id":3716,"mutability":"mutable","name":"result","nameLocation":"8179:6:21","nodeType":"VariableDeclaration","scope":3742,"src":"8171:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3715,"name":"uint256","nodeType":"ElementaryTypeName","src":"8171:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3722,"initialValue":{"arguments":[{"id":3718,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"8195:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3719,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"8198:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3720,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3707,"src":"8201:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3717,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3700,3743],"referencedDeclaration":3700,"src":"8188:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8188:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8171:42:21"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3724,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3710,"src":"8244:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}],"id":3723,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"8227:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3323_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8227:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3727,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3703,"src":"8264:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3728,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"8267:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3729,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3707,"src":"8270:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3726,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8257:6:21","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8257:25:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8285:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8257:29:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8227:59:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3739,"nodeType":"IfStatement","src":"8223:101:21","trueBody":{"id":3738,"nodeType":"Block","src":"8288:36:21","statements":[{"expression":{"id":3736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3734,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"8302:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8312:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8302:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3737,"nodeType":"ExpressionStatement","src":"8302:11:21"}]}},{"expression":{"id":3740,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3716,"src":"8340:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3714,"id":3741,"nodeType":"Return","src":"8333:13:21"}]},"documentation":{"id":3701,"nodeType":"StructuredDocumentation","src":"7925:121:21","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3743,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"8060:6:21","nodeType":"FunctionDefinition","parameters":{"id":3711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3703,"mutability":"mutable","name":"x","nameLocation":"8075:1:21","nodeType":"VariableDeclaration","scope":3743,"src":"8067:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3702,"name":"uint256","nodeType":"ElementaryTypeName","src":"8067:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3705,"mutability":"mutable","name":"y","nameLocation":"8086:1:21","nodeType":"VariableDeclaration","scope":3743,"src":"8078:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3704,"name":"uint256","nodeType":"ElementaryTypeName","src":"8078:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3707,"mutability":"mutable","name":"denominator","nameLocation":"8097:11:21","nodeType":"VariableDeclaration","scope":3743,"src":"8089:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3706,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3710,"mutability":"mutable","name":"rounding","nameLocation":"8119:8:21","nodeType":"VariableDeclaration","scope":3743,"src":"8110:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"},"typeName":{"id":3709,"nodeType":"UserDefinedTypeName","pathNode":{"id":3708,"name":"Rounding","nameLocations":["8110:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3323,"src":"8110:8:21"},"referencedDeclaration":3323,"src":"8110:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8066:62:21"},"returnParameters":{"id":3714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3713,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3743,"src":"8152:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3712,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8151:9:21"},"scope":4366,"src":"8051:302:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3854,"nodeType":"Block","src":"8644:1585:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3751,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"8658:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8663:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8658:6:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3757,"nodeType":"IfStatement","src":"8654:45:21","trueBody":{"id":3756,"nodeType":"Block","src":"8666:33:21","statements":[{"expression":{"hexValue":"30","id":3754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8687:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3750,"id":3755,"nodeType":"Return","src":"8680:8:21"}]}},{"assignments":[3759],"declarations":[{"constant":false,"id":3759,"mutability":"mutable","name":"result","nameLocation":"9386:6:21","nodeType":"VariableDeclaration","scope":3854,"src":"9378:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3758,"name":"uint256","nodeType":"ElementaryTypeName","src":"9378:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3768,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9395:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3762,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"9406:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3761,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4022,4057],"referencedDeclaration":4022,"src":"9401:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9401:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9412:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9401:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3766,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9400:14:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9395:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9378:36:21"},{"id":3853,"nodeType":"UncheckedBlock","src":"9815:408:21","statements":[{"expression":{"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9839:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3770,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9849:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3771,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"9858:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3772,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9862:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9858:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9849:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3775,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9848:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9873:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9848:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9839:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3779,"nodeType":"ExpressionStatement","src":"9839:35:21"},{"expression":{"id":3789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3780,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9888:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3781,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9898:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3782,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"9907:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3783,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9911:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9907:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9898:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9897:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9922:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9897:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9888:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3790,"nodeType":"ExpressionStatement","src":"9888:35:21"},{"expression":{"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3791,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9937:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3792,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9947:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3793,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"9956:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3794,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9960:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9956:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9947:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9946:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9971:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9946:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9937:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3801,"nodeType":"ExpressionStatement","src":"9937:35:21"},{"expression":{"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3802,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9986:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3803,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"9996:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3804,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"10005:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3805,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10009:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9996:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3808,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9995:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10020:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9995:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9986:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3812,"nodeType":"ExpressionStatement","src":"9986:35:21"},{"expression":{"id":3822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3813,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10035:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3814,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10045:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3815,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"10054:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3816,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10058:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10054:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10045:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3819,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10044:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10069:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10044:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10035:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3823,"nodeType":"ExpressionStatement","src":"10035:35:21"},{"expression":{"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3824,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10084:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3825,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10094:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3826,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"10103:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3827,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10107:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10103:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10094:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3830,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10093:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10118:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10093:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10084:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3834,"nodeType":"ExpressionStatement","src":"10084:35:21"},{"expression":{"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3835,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10133:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3836,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10143:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3837,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"10152:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3838,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10156:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10152:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10143:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10142:21:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10167:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10142:26:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10133:35:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3845,"nodeType":"ExpressionStatement","src":"10133:35:21"},{"expression":{"arguments":[{"id":3847,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10193:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3848,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"10201:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"10205:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10201:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3846,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"10189:3:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3851,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10189:23:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3750,"id":3852,"nodeType":"Return","src":"10182:30:21"}]}]},"documentation":{"id":3744,"nodeType":"StructuredDocumentation","src":"8359:223:21","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3855,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8596:4:21","nodeType":"FunctionDefinition","parameters":{"id":3747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3746,"mutability":"mutable","name":"a","nameLocation":"8609:1:21","nodeType":"VariableDeclaration","scope":3855,"src":"8601:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3745,"name":"uint256","nodeType":"ElementaryTypeName","src":"8601:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8600:11:21"},"returnParameters":{"id":3750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3749,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3855,"src":"8635:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3748,"name":"uint256","nodeType":"ElementaryTypeName","src":"8635:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8634:9:21"},"scope":4366,"src":"8587:1642:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3889,"nodeType":"Block","src":"10405:164:21","statements":[{"id":3888,"nodeType":"UncheckedBlock","src":"10415:148:21","statements":[{"assignments":[3867],"declarations":[{"constant":false,"id":3867,"mutability":"mutable","name":"result","nameLocation":"10447:6:21","nodeType":"VariableDeclaration","scope":3888,"src":"10439:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3866,"name":"uint256","nodeType":"ElementaryTypeName","src":"10439:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3871,"initialValue":{"arguments":[{"id":3869,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"10461:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3868,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3855,3890],"referencedDeclaration":3855,"src":"10456:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10456:7:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10439:24:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3872,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"10484:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3874,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3861,"src":"10511:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}],"id":3873,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"10494:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3323_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":3875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10494:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3876,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"10524:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3877,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"10533:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3879,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"10542:1:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10524:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10494:49:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10550:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10494:57:21","trueExpression":{"hexValue":"31","id":3882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10546:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3885,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10493:59:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"10484:68:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3865,"id":3887,"nodeType":"Return","src":"10477:75:21"}]}]},"documentation":{"id":3856,"nodeType":"StructuredDocumentation","src":"10235:89:21","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3890,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"10338:4:21","nodeType":"FunctionDefinition","parameters":{"id":3862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3858,"mutability":"mutable","name":"a","nameLocation":"10351:1:21","nodeType":"VariableDeclaration","scope":3890,"src":"10343:9:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3857,"name":"uint256","nodeType":"ElementaryTypeName","src":"10343:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3861,"mutability":"mutable","name":"rounding","nameLocation":"10363:8:21","nodeType":"VariableDeclaration","scope":3890,"src":"10354:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"},"typeName":{"id":3860,"nodeType":"UserDefinedTypeName","pathNode":{"id":3859,"name":"Rounding","nameLocations":["10354:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3323,"src":"10354:8:21"},"referencedDeclaration":3323,"src":"10354:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10342:30:21"},"returnParameters":{"id":3865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3864,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3890,"src":"10396:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3863,"name":"uint256","nodeType":"ElementaryTypeName","src":"10396:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10395:9:21"},"scope":4366,"src":"10329:240:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4021,"nodeType":"Block","src":"10760:922:21","statements":[{"assignments":[3899],"declarations":[{"constant":false,"id":3899,"mutability":"mutable","name":"result","nameLocation":"10778:6:21","nodeType":"VariableDeclaration","scope":4021,"src":"10770:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3898,"name":"uint256","nodeType":"ElementaryTypeName","src":"10770:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3901,"initialValue":{"hexValue":"30","id":3900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10787:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10770:18:21"},{"id":4018,"nodeType":"UncheckedBlock","src":"10798:855:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3902,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"10826:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10835:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10826:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10841:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10826:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3916,"nodeType":"IfStatement","src":"10822:99:21","trueBody":{"id":3915,"nodeType":"Block","src":"10844:77:21","statements":[{"expression":{"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3907,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"10862:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10872:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10862:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3910,"nodeType":"ExpressionStatement","src":"10862:13:21"},{"expression":{"id":3913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3911,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"10893:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"10893:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3914,"nodeType":"ExpressionStatement","src":"10893:13:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"10938:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10947:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10938:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10952:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10938:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3931,"nodeType":"IfStatement","src":"10934:96:21","trueBody":{"id":3930,"nodeType":"Block","src":"10955:75:21","statements":[{"expression":{"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3922,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"10973:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10983:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10973:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3925,"nodeType":"ExpressionStatement","src":"10973:12:21"},{"expression":{"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11003:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11013:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11003:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3929,"nodeType":"ExpressionStatement","src":"11003:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11047:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11056:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11047:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11061:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11047:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3946,"nodeType":"IfStatement","src":"11043:96:21","trueBody":{"id":3945,"nodeType":"Block","src":"11064:75:21","statements":[{"expression":{"id":3939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11082:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11092:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11082:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3940,"nodeType":"ExpressionStatement","src":"11082:12:21"},{"expression":{"id":3943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11112:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11122:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11112:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3944,"nodeType":"ExpressionStatement","src":"11112:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11156:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11165:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11156:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11170:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11156:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3961,"nodeType":"IfStatement","src":"11152:96:21","trueBody":{"id":3960,"nodeType":"Block","src":"11173:75:21","statements":[{"expression":{"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3952,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11191:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11201:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11191:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3955,"nodeType":"ExpressionStatement","src":"11191:12:21"},{"expression":{"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3956,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11221:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11231:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11221:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3959,"nodeType":"ExpressionStatement","src":"11221:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11265:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11274:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11265:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11278:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11265:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3976,"nodeType":"IfStatement","src":"11261:93:21","trueBody":{"id":3975,"nodeType":"Block","src":"11281:73:21","statements":[{"expression":{"id":3969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3967,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11299:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11309:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11299:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3970,"nodeType":"ExpressionStatement","src":"11299:11:21"},{"expression":{"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11328:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11338:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11328:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3974,"nodeType":"ExpressionStatement","src":"11328:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3977,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11371:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11380:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11371:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11384:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11371:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3991,"nodeType":"IfStatement","src":"11367:93:21","trueBody":{"id":3990,"nodeType":"Block","src":"11387:73:21","statements":[{"expression":{"id":3984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11405:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11415:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11405:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3985,"nodeType":"ExpressionStatement","src":"11405:11:21"},{"expression":{"id":3988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3986,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11434:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11444:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11434:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3989,"nodeType":"ExpressionStatement","src":"11434:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3992,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11477:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3993,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11486:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11477:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11490:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11477:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4006,"nodeType":"IfStatement","src":"11473:93:21","trueBody":{"id":4005,"nodeType":"Block","src":"11493:73:21","statements":[{"expression":{"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3997,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11511:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11521:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11511:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4000,"nodeType":"ExpressionStatement","src":"11511:11:21"},{"expression":{"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4001,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11540:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11550:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11540:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4004,"nodeType":"ExpressionStatement","src":"11540:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"11583:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11592:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11583:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11596:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4017,"nodeType":"IfStatement","src":"11579:64:21","trueBody":{"id":4016,"nodeType":"Block","src":"11599:44:21","statements":[{"expression":{"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4012,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11617:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11627:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11617:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4015,"nodeType":"ExpressionStatement","src":"11617:11:21"}]}}]},{"expression":{"id":4019,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3899,"src":"11669:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3897,"id":4020,"nodeType":"Return","src":"11662:13:21"}]},"documentation":{"id":3891,"nodeType":"StructuredDocumentation","src":"10575:119:21","text":" @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":4022,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"10708:4:21","nodeType":"FunctionDefinition","parameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3893,"mutability":"mutable","name":"value","nameLocation":"10721:5:21","nodeType":"VariableDeclaration","scope":4022,"src":"10713:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3892,"name":"uint256","nodeType":"ElementaryTypeName","src":"10713:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10712:15:21"},"returnParameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4022,"src":"10751:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint256","nodeType":"ElementaryTypeName","src":"10751:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10750:9:21"},"scope":4366,"src":"10699:983:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4056,"nodeType":"Block","src":"11915:168:21","statements":[{"id":4055,"nodeType":"UncheckedBlock","src":"11925:152:21","statements":[{"assignments":[4034],"declarations":[{"constant":false,"id":4034,"mutability":"mutable","name":"result","nameLocation":"11957:6:21","nodeType":"VariableDeclaration","scope":4055,"src":"11949:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4033,"name":"uint256","nodeType":"ElementaryTypeName","src":"11949:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4038,"initialValue":{"arguments":[{"id":4036,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"11971:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4035,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4022,4057],"referencedDeclaration":4022,"src":"11966:4:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11966:11:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11949:28:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4039,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"11998:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4041,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4028,"src":"12025:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}],"id":4040,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"12008:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3323_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12008:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4044,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"12043:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4025,"src":"12052:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12038:19:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12008:49:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12064:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12008:57:21","trueExpression":{"hexValue":"31","id":4049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12060:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4052,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12007:59:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11998:68:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4032,"id":4054,"nodeType":"Return","src":"11991:75:21"}]}]},"documentation":{"id":4023,"nodeType":"StructuredDocumentation","src":"11688:142:21","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4057,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"11844:4:21","nodeType":"FunctionDefinition","parameters":{"id":4029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4025,"mutability":"mutable","name":"value","nameLocation":"11857:5:21","nodeType":"VariableDeclaration","scope":4057,"src":"11849:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4024,"name":"uint256","nodeType":"ElementaryTypeName","src":"11849:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4028,"mutability":"mutable","name":"rounding","nameLocation":"11873:8:21","nodeType":"VariableDeclaration","scope":4057,"src":"11864:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"},"typeName":{"id":4027,"nodeType":"UserDefinedTypeName","pathNode":{"id":4026,"name":"Rounding","nameLocations":["11864:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3323,"src":"11864:8:21"},"referencedDeclaration":3323,"src":"11864:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11848:34:21"},"returnParameters":{"id":4032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4057,"src":"11906:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4030,"name":"uint256","nodeType":"ElementaryTypeName","src":"11906:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11905:9:21"},"scope":4366,"src":"11835:248:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4185,"nodeType":"Block","src":"12276:854:21","statements":[{"assignments":[4066],"declarations":[{"constant":false,"id":4066,"mutability":"mutable","name":"result","nameLocation":"12294:6:21","nodeType":"VariableDeclaration","scope":4185,"src":"12286:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4065,"name":"uint256","nodeType":"ElementaryTypeName","src":"12286:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4068,"initialValue":{"hexValue":"30","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12303:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"12286:18:21"},{"id":4182,"nodeType":"UncheckedBlock","src":"12314:787:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4069,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12342:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4072,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12351:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12357:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12351:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12342:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4085,"nodeType":"IfStatement","src":"12338:103:21","trueBody":{"id":4084,"nodeType":"Block","src":"12361:80:21","statements":[{"expression":{"id":4078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4074,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12379:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12388:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12394:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12388:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"12379:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4079,"nodeType":"ExpressionStatement","src":"12379:17:21"},{"expression":{"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4080,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"12414:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12424:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"12414:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4083,"nodeType":"ExpressionStatement","src":"12414:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4086,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12458:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12467:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12473:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12467:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12458:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4102,"nodeType":"IfStatement","src":"12454:103:21","trueBody":{"id":4101,"nodeType":"Block","src":"12477:80:21","statements":[{"expression":{"id":4095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12495:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12504:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12510:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12504:8:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"12495:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4096,"nodeType":"ExpressionStatement","src":"12495:17:21"},{"expression":{"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4097,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"12530:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12540:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12530:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4100,"nodeType":"ExpressionStatement","src":"12530:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4103,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12574:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12583:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12589:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12583:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12574:17:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4119,"nodeType":"IfStatement","src":"12570:103:21","trueBody":{"id":4118,"nodeType":"Block","src":"12593:80:21","statements":[{"expression":{"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12611:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12620:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12626:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12620:8:21","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"12611:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4113,"nodeType":"ExpressionStatement","src":"12611:17:21"},{"expression":{"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4114,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"12646:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12656:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12646:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4117,"nodeType":"ExpressionStatement","src":"12646:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4120,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12690:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4123,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12699:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12705:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12699:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12690:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4136,"nodeType":"IfStatement","src":"12686:100:21","trueBody":{"id":4135,"nodeType":"Block","src":"12708:78:21","statements":[{"expression":{"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12726:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12735:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12735:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"12726:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4130,"nodeType":"ExpressionStatement","src":"12726:16:21"},{"expression":{"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4131,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"12760:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12760:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4134,"nodeType":"ExpressionStatement","src":"12760:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12803:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12812:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12818:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12812:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12803:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4153,"nodeType":"IfStatement","src":"12799:100:21","trueBody":{"id":4152,"nodeType":"Block","src":"12821:78:21","statements":[{"expression":{"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12839:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12848:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12848:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"12839:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4147,"nodeType":"ExpressionStatement","src":"12839:16:21"},{"expression":{"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4148,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"12873:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12883:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12873:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4151,"nodeType":"ExpressionStatement","src":"12873:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4154,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12916:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12925:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12931:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12925:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12916:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4170,"nodeType":"IfStatement","src":"12912:100:21","trueBody":{"id":4169,"nodeType":"Block","src":"12934:78:21","statements":[{"expression":{"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4159,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"12952:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12961:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12967:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12961:7:21","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"12952:16:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4164,"nodeType":"ExpressionStatement","src":"12952:16:21"},{"expression":{"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4165,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"12986:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12996:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12986:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4168,"nodeType":"ExpressionStatement","src":"12986:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4060,"src":"13029:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13038:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13044:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13038:7:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"13029:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4181,"nodeType":"IfStatement","src":"13025:66:21","trueBody":{"id":4180,"nodeType":"Block","src":"13047:44:21","statements":[{"expression":{"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4176,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"13065:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13075:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"13065:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4179,"nodeType":"ExpressionStatement","src":"13065:11:21"}]}}]},{"expression":{"id":4183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4066,"src":"13117:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4064,"id":4184,"nodeType":"Return","src":"13110:13:21"}]},"documentation":{"id":4058,"nodeType":"StructuredDocumentation","src":"12089:120:21","text":" @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."},"id":4186,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"12223:5:21","nodeType":"FunctionDefinition","parameters":{"id":4061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4060,"mutability":"mutable","name":"value","nameLocation":"12237:5:21","nodeType":"VariableDeclaration","scope":4186,"src":"12229:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4059,"name":"uint256","nodeType":"ElementaryTypeName","src":"12229:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12228:15:21"},"returnParameters":{"id":4064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4186,"src":"12267:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4062,"name":"uint256","nodeType":"ElementaryTypeName","src":"12267:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12266:9:21"},"scope":4366,"src":"12214:916:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4220,"nodeType":"Block","src":"13365:170:21","statements":[{"id":4219,"nodeType":"UncheckedBlock","src":"13375:154:21","statements":[{"assignments":[4198],"declarations":[{"constant":false,"id":4198,"mutability":"mutable","name":"result","nameLocation":"13407:6:21","nodeType":"VariableDeclaration","scope":4219,"src":"13399:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4197,"name":"uint256","nodeType":"ElementaryTypeName","src":"13399:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4202,"initialValue":{"arguments":[{"id":4200,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"13422:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4199,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4186,4221],"referencedDeclaration":4186,"src":"13416:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13416:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13399:29:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4203,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"13449:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4205,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"13476:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}],"id":4204,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"13459:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3323_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13459:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13489:2:21","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4198,"src":"13495:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4189,"src":"13504:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13489:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13459:50:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13516:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"13459:58:21","trueExpression":{"hexValue":"31","id":4213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13512:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4216,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13458:60:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"13449:69:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4196,"id":4218,"nodeType":"Return","src":"13442:76:21"}]}]},"documentation":{"id":4187,"nodeType":"StructuredDocumentation","src":"13136:143:21","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4221,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"13293:5:21","nodeType":"FunctionDefinition","parameters":{"id":4193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4189,"mutability":"mutable","name":"value","nameLocation":"13307:5:21","nodeType":"VariableDeclaration","scope":4221,"src":"13299:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4188,"name":"uint256","nodeType":"ElementaryTypeName","src":"13299:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4192,"mutability":"mutable","name":"rounding","nameLocation":"13323:8:21","nodeType":"VariableDeclaration","scope":4221,"src":"13314:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"},"typeName":{"id":4191,"nodeType":"UserDefinedTypeName","pathNode":{"id":4190,"name":"Rounding","nameLocations":["13314:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3323,"src":"13314:8:21"},"referencedDeclaration":3323,"src":"13314:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"13298:34:21"},"returnParameters":{"id":4196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4221,"src":"13356:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4194,"name":"uint256","nodeType":"ElementaryTypeName","src":"13356:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13355:9:21"},"scope":4366,"src":"13284:251:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4307,"nodeType":"Block","src":"13855:600:21","statements":[{"assignments":[4230],"declarations":[{"constant":false,"id":4230,"mutability":"mutable","name":"result","nameLocation":"13873:6:21","nodeType":"VariableDeclaration","scope":4307,"src":"13865:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4229,"name":"uint256","nodeType":"ElementaryTypeName","src":"13865:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4232,"initialValue":{"hexValue":"30","id":4231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13882:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13865:18:21"},{"id":4304,"nodeType":"UncheckedBlock","src":"13893:533:21","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4233,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"13921:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13930:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13921:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13936:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13921:16:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4247,"nodeType":"IfStatement","src":"13917:98:21","trueBody":{"id":4246,"nodeType":"Block","src":"13939:76:21","statements":[{"expression":{"id":4240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"13957:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13967:3:21","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"13957:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4241,"nodeType":"ExpressionStatement","src":"13957:13:21"},{"expression":{"id":4244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4242,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"13988:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13998:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"13988:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4245,"nodeType":"ExpressionStatement","src":"13988:12:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"14032:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14041:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14032:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14046:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14032:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4262,"nodeType":"IfStatement","src":"14028:95:21","trueBody":{"id":4261,"nodeType":"Block","src":"14049:74:21","statements":[{"expression":{"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4253,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"14067:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14077:2:21","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14067:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4256,"nodeType":"ExpressionStatement","src":"14067:12:21"},{"expression":{"id":4259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4257,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"14097:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14107:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14097:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4260,"nodeType":"ExpressionStatement","src":"14097:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4263,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"14140:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14149:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14140:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14154:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14140:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4277,"nodeType":"IfStatement","src":"14136:95:21","trueBody":{"id":4276,"nodeType":"Block","src":"14157:74:21","statements":[{"expression":{"id":4270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4268,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"14175:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14185:2:21","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"14175:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4271,"nodeType":"ExpressionStatement","src":"14175:12:21"},{"expression":{"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4272,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"14205:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14215:1:21","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"14205:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4275,"nodeType":"ExpressionStatement","src":"14205:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"14248:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14257:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14248:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14262:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14248:15:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4292,"nodeType":"IfStatement","src":"14244:95:21","trueBody":{"id":4291,"nodeType":"Block","src":"14265:74:21","statements":[{"expression":{"id":4285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4283,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"14283:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14293:2:21","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"14283:12:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4286,"nodeType":"ExpressionStatement","src":"14283:12:21"},{"expression":{"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4287,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"14313:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14323:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"14313:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4290,"nodeType":"ExpressionStatement","src":"14313:11:21"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4293,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"14356:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14365:1:21","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"14356:10:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14369:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14356:14:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4303,"nodeType":"IfStatement","src":"14352:64:21","trueBody":{"id":4302,"nodeType":"Block","src":"14372:44:21","statements":[{"expression":{"id":4300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4298,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"14390:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14400:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14390:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4301,"nodeType":"ExpressionStatement","src":"14390:11:21"}]}}]},{"expression":{"id":4305,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"14442:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4228,"id":4306,"nodeType":"Return","src":"14435:13:21"}]},"documentation":{"id":4222,"nodeType":"StructuredDocumentation","src":"13541:246:21","text":" @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4308,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"13801:6:21","nodeType":"FunctionDefinition","parameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4224,"mutability":"mutable","name":"value","nameLocation":"13816:5:21","nodeType":"VariableDeclaration","scope":4308,"src":"13808:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4223,"name":"uint256","nodeType":"ElementaryTypeName","src":"13808:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13807:15:21"},"returnParameters":{"id":4228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4308,"src":"13846:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4226,"name":"uint256","nodeType":"ElementaryTypeName","src":"13846:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13845:9:21"},"scope":4366,"src":"13792:663:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4345,"nodeType":"Block","src":"14692:177:21","statements":[{"id":4344,"nodeType":"UncheckedBlock","src":"14702:161:21","statements":[{"assignments":[4320],"declarations":[{"constant":false,"id":4320,"mutability":"mutable","name":"result","nameLocation":"14734:6:21","nodeType":"VariableDeclaration","scope":4344,"src":"14726:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4319,"name":"uint256","nodeType":"ElementaryTypeName","src":"14726:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4324,"initialValue":{"arguments":[{"id":4322,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"14750:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4321,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4308,4346],"referencedDeclaration":4308,"src":"14743:6:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4323,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14743:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14726:30:21"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4325,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4320,"src":"14777:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4327,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"14804:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}],"id":4326,"name":"unsignedRoundsUp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"14787:16:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_Rounding_$3323_$returns$_t_bool_$","typeString":"function (enum Math.Rounding) pure returns (bool)"}},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14787:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14817:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4330,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4320,"src":"14823:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14833:1:21","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"14823:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4333,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14822:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:18:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4335,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"14838:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14817:26:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"14787:56:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14850:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"14787:64:21","trueExpression":{"hexValue":"31","id":4338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14846:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4341,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14786:66:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"14777:75:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4318,"id":4343,"nodeType":"Return","src":"14770:82:21"}]}]},"documentation":{"id":4309,"nodeType":"StructuredDocumentation","src":"14461:144:21","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4346,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"14619:6:21","nodeType":"FunctionDefinition","parameters":{"id":4315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4311,"mutability":"mutable","name":"value","nameLocation":"14634:5:21","nodeType":"VariableDeclaration","scope":4346,"src":"14626:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4310,"name":"uint256","nodeType":"ElementaryTypeName","src":"14626:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4314,"mutability":"mutable","name":"rounding","nameLocation":"14650:8:21","nodeType":"VariableDeclaration","scope":4346,"src":"14641:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"},"typeName":{"id":4313,"nodeType":"UserDefinedTypeName","pathNode":{"id":4312,"name":"Rounding","nameLocations":["14641:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3323,"src":"14641:8:21"},"referencedDeclaration":3323,"src":"14641:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"14625:34:21"},"returnParameters":{"id":4318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4346,"src":"14683:7:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4316,"name":"uint256","nodeType":"ElementaryTypeName","src":"14683:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14682:9:21"},"scope":4366,"src":"14610:259:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4364,"nodeType":"Block","src":"15067:48:21","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4357,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4350,"src":"15090:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}],"id":4356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15084:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4355,"name":"uint8","nodeType":"ElementaryTypeName","src":"15084:5:21","typeDescriptions":{}}},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15084:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"hexValue":"32","id":4359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15102:1:21","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"15084:19:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":4361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15107:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15084:24:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4354,"id":4363,"nodeType":"Return","src":"15077:31:21"}]},"documentation":{"id":4347,"nodeType":"StructuredDocumentation","src":"14875:113:21","text":" @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."},"id":4365,"implemented":true,"kind":"function","modifiers":[],"name":"unsignedRoundsUp","nameLocation":"15002:16:21","nodeType":"FunctionDefinition","parameters":{"id":4351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4350,"mutability":"mutable","name":"rounding","nameLocation":"15028:8:21","nodeType":"VariableDeclaration","scope":4365,"src":"15019:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"},"typeName":{"id":4349,"nodeType":"UserDefinedTypeName","pathNode":{"id":4348,"name":"Rounding","nameLocations":["15019:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3323,"src":"15019:8:21"},"referencedDeclaration":3323,"src":"15019:8:21","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3323","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"15018:19:21"},"returnParameters":{"id":4354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4365,"src":"15061:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4352,"name":"bool","nodeType":"ElementaryTypeName","src":"15061:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"15060:6:21"},"scope":4366,"src":"14993:122:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4367,"src":"203:14914:21","usedErrors":[3318],"usedEvents":[]}],"src":"103:15015:21"},"id":21},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[4471]},"id":4472,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4368,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4369,"nodeType":"StructuredDocumentation","src":"135:80:22","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4471,"linearizedBaseContracts":[4471],"name":"SignedMath","nameLocation":"224:10:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":4386,"nodeType":"Block","src":"376:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4379,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"393:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4380,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"397:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"393:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4383,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"405:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"393:13:22","trueExpression":{"id":4382,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4372,"src":"401:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4378,"id":4385,"nodeType":"Return","src":"386:20:22"}]},"documentation":{"id":4370,"nodeType":"StructuredDocumentation","src":"241:66:22","text":" @dev Returns the largest of two signed numbers."},"id":4387,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"321:3:22","nodeType":"FunctionDefinition","parameters":{"id":4375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4372,"mutability":"mutable","name":"a","nameLocation":"332:1:22","nodeType":"VariableDeclaration","scope":4387,"src":"325:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4371,"name":"int256","nodeType":"ElementaryTypeName","src":"325:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4374,"mutability":"mutable","name":"b","nameLocation":"342:1:22","nodeType":"VariableDeclaration","scope":4387,"src":"335:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4373,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"324:20:22"},"returnParameters":{"id":4378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4387,"src":"368:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4376,"name":"int256","nodeType":"ElementaryTypeName","src":"368:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"367:8:22"},"scope":4471,"src":"312:101:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4404,"nodeType":"Block","src":"555:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4397,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4390,"src":"572:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4398,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4392,"src":"576:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"572:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4401,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4392,"src":"584:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"572:13:22","trueExpression":{"id":4400,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4390,"src":"580:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4396,"id":4403,"nodeType":"Return","src":"565:20:22"}]},"documentation":{"id":4388,"nodeType":"StructuredDocumentation","src":"419:67:22","text":" @dev Returns the smallest of two signed numbers."},"id":4405,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"500:3:22","nodeType":"FunctionDefinition","parameters":{"id":4393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4390,"mutability":"mutable","name":"a","nameLocation":"511:1:22","nodeType":"VariableDeclaration","scope":4405,"src":"504:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4389,"name":"int256","nodeType":"ElementaryTypeName","src":"504:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4392,"mutability":"mutable","name":"b","nameLocation":"521:1:22","nodeType":"VariableDeclaration","scope":4405,"src":"514:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4391,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"503:20:22"},"returnParameters":{"id":4396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4395,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4405,"src":"547:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4394,"name":"int256","nodeType":"ElementaryTypeName","src":"547:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"546:8:22"},"scope":4471,"src":"491:101:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4448,"nodeType":"Block","src":"797:162:22","statements":[{"assignments":[4416],"declarations":[{"constant":false,"id":4416,"mutability":"mutable","name":"x","nameLocation":"866:1:22","nodeType":"VariableDeclaration","scope":4448,"src":"859:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4415,"name":"int256","nodeType":"ElementaryTypeName","src":"859:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4429,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4417,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"871:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4418,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"875:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"871:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4420,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"870:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4421,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"882:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4422,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"886:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"882:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4424,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"881:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"892:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"881:12:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4427,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:14:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:24:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"859:35:22"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4430,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"911:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4435,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"931:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"923:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4433,"name":"uint256","nodeType":"ElementaryTypeName","src":"923:7:22","typeDescriptions":{}}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"923:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"937:3:22","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"923:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"916:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4431,"name":"int256","nodeType":"ElementaryTypeName","src":"916:6:22","typeDescriptions":{}}},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"916:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4440,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"945:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4441,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4410,"src":"949:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"945:5:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4443,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"944:7:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"916:35:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4445,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"915:37:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"911:41:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4414,"id":4447,"nodeType":"Return","src":"904:48:22"}]},"documentation":{"id":4406,"nodeType":"StructuredDocumentation","src":"598:126:22","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4449,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"738:7:22","nodeType":"FunctionDefinition","parameters":{"id":4411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4408,"mutability":"mutable","name":"a","nameLocation":"753:1:22","nodeType":"VariableDeclaration","scope":4449,"src":"746:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4407,"name":"int256","nodeType":"ElementaryTypeName","src":"746:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4410,"mutability":"mutable","name":"b","nameLocation":"763:1:22","nodeType":"VariableDeclaration","scope":4449,"src":"756:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4409,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"745:20:22"},"returnParameters":{"id":4414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4449,"src":"789:6:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4412,"name":"int256","nodeType":"ElementaryTypeName","src":"789:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"788:8:22"},"scope":4471,"src":"729:230:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4469,"nodeType":"Block","src":"1103:158:22","statements":[{"id":4468,"nodeType":"UncheckedBlock","src":"1113:142:22","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4459,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"1228:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1233:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1228:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1241:2:22","subExpression":{"id":4463,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"1242:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1228:15:22","trueExpression":{"id":4462,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4452,"src":"1237:1:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4458,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1220:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4457,"name":"uint256","nodeType":"ElementaryTypeName","src":"1220:7:22","typeDescriptions":{}}},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:24:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4456,"id":4467,"nodeType":"Return","src":"1213:31:22"}]}]},"documentation":{"id":4450,"nodeType":"StructuredDocumentation","src":"965:78:22","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4470,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1057:3:22","nodeType":"FunctionDefinition","parameters":{"id":4453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4452,"mutability":"mutable","name":"n","nameLocation":"1068:1:22","nodeType":"VariableDeclaration","scope":4470,"src":"1061:8:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4451,"name":"int256","nodeType":"ElementaryTypeName","src":"1061:6:22","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1060:10:22"},"returnParameters":{"id":4456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4470,"src":"1094:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4454,"name":"uint256","nodeType":"ElementaryTypeName","src":"1094:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1093:9:22"},"scope":4471,"src":"1048:213:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4472,"src":"216:1047:22","usedErrors":[],"usedEvents":[]}],"src":"109:1155:22"},"id":22},"contracts/BasicNft.sol":{"ast":{"absolutePath":"contracts/BasicNft.sol","exportedSymbols":{"BasicNft":[4529],"Context":[3021],"ERC165":[3300],"ERC721":[2702],"IERC165":[3312],"IERC721":[2819],"IERC721Errors":[1646],"IERC721Metadata":[2991],"IERC721Receiver":[2837],"Strings":[3276]},"id":4530,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4473,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":4474,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4530,"sourceUnit":2703,"src":"60:57:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4475,"name":"ERC721","nameLocations":["146:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"146:6:23"},"id":4476,"nodeType":"InheritanceSpecifier","src":"146:6:23"}],"canonicalName":"BasicNft","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4529,"linearizedBaseContracts":[4529,2702,1646,2991,2819,3300,3312,3021],"name":"BasicNft","nameLocation":"134:8:23","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"78ce9035","id":4479,"mutability":"constant","name":"TOKEN_URI","nameLocation":"183:9:23","nodeType":"VariableDeclaration","scope":4529,"src":"160:133:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4477,"name":"string","nodeType":"ElementaryTypeName","src":"160:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"697066733a2f2f62616679626569673337696f6972373673376d67356f6f6265746e636f6a636d3363336878617379643472766964346a71687934676b61686567342f3f66696c656e616d653d302d5055472e6a736f6e","id":4478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"204:89:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_f5eed4f63f16dc8435ed5e031f22f9553384324656005540ac9ece13d0969af8","typeString":"literal_string \"ipfs://bafybeig37ioir76s7mg5oobetncojcm3c3hxasyd4rvid4jqhy4gkaheg4/?filename=0-PUG.json\""},"value":"ipfs://bafybeig37ioir76s7mg5oobetncojcm3c3hxasyd4rvid4jqhy4gkaheg4/?filename=0-PUG.json"},"visibility":"public"},{"constant":false,"id":4481,"mutability":"mutable","name":"s_tokenCounter","nameLocation":"316:14:23","nodeType":"VariableDeclaration","scope":4529,"src":"300:30:23","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4480,"name":"uint256","nodeType":"ElementaryTypeName","src":"300:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":4492,"nodeType":"Block","src":"376:37:23","statements":[{"expression":{"id":4490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4488,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"387:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4489,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"404:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"387:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4491,"nodeType":"ExpressionStatement","src":"387:18:23"}]},"id":4493,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"446f676965","id":4484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"360:7:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e5d21699003d762b953d66adecbe4f97c4791cae2f281f96a4beb7efcb7bbcf6","typeString":"literal_string \"Dogie\""},"value":"Dogie"},{"hexValue":"444f47","id":4485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"369:5:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_b5b35d1f7dc7cf1448a70456de4980702e1fdae4e057d31003c0e1e4b3c4bde2","typeString":"literal_string \"DOG\""},"value":"DOG"}],"id":4486,"kind":"baseConstructorSpecifier","modifierName":{"id":4483,"name":"ERC721","nameLocations":["353:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"353:6:23"},"nodeType":"ModifierInvocation","src":"353:22:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4482,"nodeType":"ParameterList","parameters":[],"src":"350:2:23"},"returnParameters":{"id":4487,"nodeType":"ParameterList","parameters":[],"src":"376:0:23"},"scope":4529,"src":"339:74:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4508,"nodeType":"Block","src":"447:102:23","statements":[{"expression":{"arguments":[{"expression":{"id":4497,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"468:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"472:6:23","memberName":"sender","nodeType":"MemberAccess","src":"468:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4499,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"480:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4496,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2324,2350],"referencedDeclaration":2324,"src":"458:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"458:37:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4501,"nodeType":"ExpressionStatement","src":"458:37:23"},{"expression":{"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4502,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"506:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4503,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"523:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"540:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"523:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"506:35:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4507,"nodeType":"ExpressionStatement","src":"506:35:23"}]},"functionSelector":"c2229fea","id":4509,"implemented":true,"kind":"function","modifiers":[],"name":"mintNft","nameLocation":"430:7:23","nodeType":"FunctionDefinition","parameters":{"id":4494,"nodeType":"ParameterList","parameters":[],"src":"437:2:23"},"returnParameters":{"id":4495,"nodeType":"ParameterList","parameters":[],"src":"447:0:23"},"scope":4529,"src":"421:128:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1889],"body":{"id":4519,"nodeType":"Block","src":"641:36:23","statements":[{"expression":{"id":4517,"name":"TOKEN_URI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4479,"src":"660:9:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4516,"id":4518,"nodeType":"Return","src":"653:16:23"}]},"functionSelector":"c87b56dd","id":4520,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"566:8:23","nodeType":"FunctionDefinition","overrides":{"id":4513,"nodeType":"OverrideSpecifier","overrides":[],"src":"608:8:23"},"parameters":{"id":4512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4520,"src":"575:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4510,"name":"uint256","nodeType":"ElementaryTypeName","src":"575:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"574:21:23"},"returnParameters":{"id":4516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4520,"src":"626:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4514,"name":"string","nodeType":"ElementaryTypeName","src":"626:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"625:15:23"},"scope":4529,"src":"557:120:23","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4527,"nodeType":"Block","src":"742:40:23","statements":[{"expression":{"id":4525,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"760:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4524,"id":4526,"nodeType":"Return","src":"753:21:23"}]},"functionSelector":"6e02007d","id":4528,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenCounter","nameLocation":"694:15:23","nodeType":"FunctionDefinition","parameters":{"id":4521,"nodeType":"ParameterList","parameters":[],"src":"709:2:23"},"returnParameters":{"id":4524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4523,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4528,"src":"733:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4522,"name":"uint256","nodeType":"ElementaryTypeName","src":"733:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"732:9:23"},"scope":4529,"src":"685:97:23","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4530,"src":"125:660:23","usedErrors":[1604,1609,1618,1623,1628,1635,1640,1645],"usedEvents":[2718,2727,2736]}],"src":"33:752:23"},"id":23},"contracts/RandomIpfs.sol":{"ast":{"absolutePath":"contracts/RandomIpfs.sol","exportedSymbols":{"Context":[3021],"ERC721":[2702],"ERC721URIStorage":[2963],"IERC165":[3312],"IERC4906":[1552],"Ownable":[1524],"RandomIpfs":[4901],"RandomIpfs__NOT_ENOUGH_ETH_ENTERED":[4539],"RandomIpfs__OUT_OF_RANGE":[4537],"RandomIpfs__OwnableUnauthorizedAccount":[4543],"RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT":[4541],"Strings":[3276],"VRFConsumerBaseV2":[1376],"VRFCoordinatorV2Interface":[95]},"id":4902,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4531,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:24"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":4532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4902,"sourceUnit":96,"src":"58:80:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":4533,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4902,"sourceUnit":1377,"src":"140:65:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":4534,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4902,"sourceUnit":2964,"src":"207:78:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":4535,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4902,"sourceUnit":1525,"src":"287:52:24","symbolAliases":[],"unitAlias":""},{"errorSelector":"e9636add","id":4537,"name":"RandomIpfs__OUT_OF_RANGE","nameLocation":"359:24:24","nodeType":"ErrorDefinition","parameters":{"id":4536,"nodeType":"ParameterList","parameters":[],"src":"383:2:24"},"src":"353:33:24"},{"errorSelector":"7bb47562","id":4539,"name":"RandomIpfs__NOT_ENOUGH_ETH_ENTERED","nameLocation":"394:34:24","nodeType":"ErrorDefinition","parameters":{"id":4538,"nodeType":"ParameterList","parameters":[],"src":"428:2:24"},"src":"388:43:24"},{"errorSelector":"9f96a150","id":4541,"name":"RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT","nameLocation":"439:49:24","nodeType":"ErrorDefinition","parameters":{"id":4540,"nodeType":"ParameterList","parameters":[],"src":"488:2:24"},"src":"433:58:24"},{"errorSelector":"f65f0ddd","id":4543,"name":"RandomIpfs__OwnableUnauthorizedAccount","nameLocation":"499:38:24","nodeType":"ErrorDefinition","parameters":{"id":4542,"nodeType":"ParameterList","parameters":[],"src":"537:2:24"},"src":"493:47:24"},{"abstract":false,"baseContracts":[{"baseName":{"id":4544,"name":"VRFConsumerBaseV2","nameLocations":["569:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":1376,"src":"569:17:24"},"id":4545,"nodeType":"InheritanceSpecifier","src":"569:17:24"},{"baseName":{"id":4546,"name":"ERC721URIStorage","nameLocations":["588:16:24"],"nodeType":"IdentifierPath","referencedDeclaration":2963,"src":"588:16:24"},"id":4547,"nodeType":"InheritanceSpecifier","src":"588:16:24"}],"canonicalName":"RandomIpfs","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4901,"linearizedBaseContracts":[4901,2963,2702,1646,2991,1552,2819,3300,3312,3021,1376],"name":"RandomIpfs","nameLocation":"555:10:24","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4550,"mutability":"immutable","name":"i_vrfCoordinatorV2","nameLocation":"670:18:24","nodeType":"VariableDeclaration","scope":4901,"src":"626:62:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":4549,"nodeType":"UserDefinedTypeName","pathNode":{"id":4548,"name":"VRFCoordinatorV2Interface","nameLocations":["626:25:24"],"nodeType":"IdentifierPath","referencedDeclaration":95,"src":"626:25:24"},"referencedDeclaration":95,"src":"626:25:24","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":4552,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"716:16:24","nodeType":"VariableDeclaration","scope":4901,"src":"691:41:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4551,"name":"uint64","nodeType":"ElementaryTypeName","src":"691:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":4554,"mutability":"immutable","name":"i_keyHash","nameLocation":"761:9:24","nodeType":"VariableDeclaration","scope":4901,"src":"735:35:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4553,"name":"bytes32","nodeType":"ElementaryTypeName","src":"735:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":4556,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"799:18:24","nodeType":"VariableDeclaration","scope":4901,"src":"773:44:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4555,"name":"uint32","nodeType":"ElementaryTypeName","src":"773:6:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":4559,"mutability":"constant","name":"REQUEST_CONFRIMATIONS","nameLocation":"844:21:24","nodeType":"VariableDeclaration","scope":4901,"src":"820:49:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4557,"name":"uint16","nodeType":"ElementaryTypeName","src":"820:6:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":4558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"868:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":4562,"mutability":"constant","name":"NUW_WORDS","nameLocation":"896:9:24","nodeType":"VariableDeclaration","scope":4901,"src":"872:38:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4560,"name":"uint32","nodeType":"ElementaryTypeName","src":"872:6:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":4561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"909:1:24","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"functionSelector":"a36f573b","id":4566,"mutability":"mutable","name":"s_requestIdToSender","nameLocation":"965:19:24","nodeType":"VariableDeclaration","scope":4901,"src":"930:54:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":4565,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4563,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"930:27:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4564,"name":"address","nodeType":"ElementaryTypeName","src":"949:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":true,"id":4569,"mutability":"constant","name":"MAX_VALUE","nameLocation":"1032:9:24","nodeType":"VariableDeclaration","scope":4901,"src":"1006:41:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4567,"name":"uint256","nodeType":"ElementaryTypeName","src":"1006:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":4568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:3:24","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"constant":false,"id":4571,"mutability":"mutable","name":"s_tokenCounter","nameLocation":"1066:14:24","nodeType":"VariableDeclaration","scope":4901,"src":"1050:30:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4570,"name":"uint256","nodeType":"ElementaryTypeName","src":"1050:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4574,"mutability":"mutable","name":"s_dogTokenUris","nameLocation":"1102:14:24","nodeType":"VariableDeclaration","scope":4901,"src":"1084:32:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string[]"},"typeName":{"baseType":{"id":4572,"name":"string","nodeType":"ElementaryTypeName","src":"1084:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":4573,"nodeType":"ArrayTypeName","src":"1084:8:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":4576,"mutability":"immutable","name":"i_mintFee","nameLocation":"1145:9:24","nodeType":"VariableDeclaration","scope":4901,"src":"1119:35:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4575,"name":"uint256","nodeType":"ElementaryTypeName","src":"1119:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":4578,"mutability":"mutable","name":"owner","nameLocation":"1173:5:24","nodeType":"VariableDeclaration","scope":4901,"src":"1157:21:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4577,"name":"address","nodeType":"ElementaryTypeName","src":"1157:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"canonicalName":"RandomIpfs.Breed","id":4582,"members":[{"id":4579,"name":"Pug","nameLocation":"1204:3:24","nodeType":"EnumValue","src":"1204:3:24"},{"id":4580,"name":"Shiba_inu","nameLocation":"1209:9:24","nodeType":"EnumValue","src":"1209:9:24"},{"id":4581,"name":"St_benard","nameLocation":"1220:9:24","nodeType":"EnumValue","src":"1220:9:24"}],"name":"Breed","nameLocation":"1197:5:24","nodeType":"EnumDefinition","src":"1192:39:24"},{"anonymous":false,"eventSelector":"f873236e6cc0ecc5be1a9a35c95ee5b8d1ac4cc7bfef0cc5060391d6cc98e26b","id":4588,"name":"NftRequested","nameLocation":"1249:12:24","nodeType":"EventDefinition","parameters":{"id":4587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1278:9:24","nodeType":"VariableDeclaration","scope":4588,"src":"1262:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1262:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4586,"indexed":true,"mutability":"mutable","name":"requester","nameLocation":"1305:9:24","nodeType":"VariableDeclaration","scope":4588,"src":"1289:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4585,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1261:54:24"},"src":"1243:73:24"},{"anonymous":false,"eventSelector":"826d84de86b9d47351ad75c90b9a8b7211e761e448ccd64623fc26341dd0b8dc","id":4597,"name":"NftMinted","nameLocation":"1324:9:24","nodeType":"EventDefinition","parameters":{"id":4596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4590,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"1350:7:24","nodeType":"VariableDeclaration","scope":4597,"src":"1334:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4589,"name":"uint256","nodeType":"ElementaryTypeName","src":"1334:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4593,"indexed":true,"mutability":"mutable","name":"breed","nameLocation":"1374:5:24","nodeType":"VariableDeclaration","scope":4597,"src":"1360:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"},"typeName":{"id":4592,"nodeType":"UserDefinedTypeName","pathNode":{"id":4591,"name":"Breed","nameLocations":["1360:5:24"],"nodeType":"IdentifierPath","referencedDeclaration":4582,"src":"1360:5:24"},"referencedDeclaration":4582,"src":"1360:5:24","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}},"visibility":"internal"},{"constant":false,"id":4595,"indexed":false,"mutability":"mutable","name":"minter","nameLocation":"1389:6:24","nodeType":"VariableDeclaration","scope":4597,"src":"1381:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4594,"name":"address","nodeType":"ElementaryTypeName","src":"1381:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1333:63:24"},"src":"1318:79:24"},{"body":{"id":4651,"nodeType":"Block","src":"1628:272:24","statements":[{"expression":{"id":4625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4621,"name":"i_vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"1635:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4623,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"1682:16:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4622,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"1656:25:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$95_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1635:64:24","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"id":4626,"nodeType":"ExpressionStatement","src":"1635:64:24"},{"expression":{"id":4629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4627,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4552,"src":"1706:16:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4628,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4601,"src":"1725:14:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1706:33:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":4630,"nodeType":"ExpressionStatement","src":"1706:33:24"},{"expression":{"id":4633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4631,"name":"i_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"1746:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4632,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"1758:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1746:19:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4634,"nodeType":"ExpressionStatement","src":"1746:19:24"},{"expression":{"id":4637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4635,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"1772:18:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4636,"name":"callBackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4605,"src":"1793:16:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1772:37:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":4638,"nodeType":"ExpressionStatement","src":"1772:37:24"},{"expression":{"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4639,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"1816:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1833:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1816:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4642,"nodeType":"ExpressionStatement","src":"1816:18:24"},{"expression":{"id":4645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4643,"name":"s_dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"1841:14:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4644,"name":"dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4609,"src":"1858:12:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$3_memory_ptr","typeString":"string memory[3] memory"}},"src":"1841:29:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":4646,"nodeType":"ExpressionStatement","src":"1841:29:24"},{"expression":{"id":4649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4647,"name":"i_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"1877:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4648,"name":"mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4611,"src":"1889:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1877:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4650,"nodeType":"ExpressionStatement","src":"1877:19:24"}]},"id":4652,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4614,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"1577:16:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4615,"kind":"baseConstructorSpecifier","modifierName":{"id":4613,"name":"VRFConsumerBaseV2","nameLocations":["1559:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":1376,"src":"1559:17:24"},"nodeType":"ModifierInvocation","src":"1559:35:24"},{"arguments":[{"hexValue":"52616e646f6d446f67734e6674","id":4617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1602:15:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_dd4141d4fbfd7d2f51029757cda0796a48df70652ba82a5f32e9d35224d62591","typeString":"literal_string \"RandomDogsNft\""},"value":"RandomDogsNft"},{"hexValue":"444f4753","id":4618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1619:6:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_80823b3fc9151151b4bb77b0056a6533a5d6c0f1dcd37b73a85c23e53396244a","typeString":"literal_string \"DOGS\""},"value":"DOGS"}],"id":4619,"kind":"baseConstructorSpecifier","modifierName":{"id":4616,"name":"ERC721","nameLocations":["1595:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"1595:6:24"},"nodeType":"ModifierInvocation","src":"1595:31:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4599,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1426:16:24","nodeType":"VariableDeclaration","scope":4652,"src":"1418:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4598,"name":"address","nodeType":"ElementaryTypeName","src":"1418:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4601,"mutability":"mutable","name":"subscriptionId","nameLocation":"1451:14:24","nodeType":"VariableDeclaration","scope":4652,"src":"1444:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4600,"name":"uint64","nodeType":"ElementaryTypeName","src":"1444:6:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4603,"mutability":"mutable","name":"keyHash","nameLocation":"1475:7:24","nodeType":"VariableDeclaration","scope":4652,"src":"1467:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4602,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1467:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4605,"mutability":"mutable","name":"callBackGasLimit","nameLocation":"1491:16:24","nodeType":"VariableDeclaration","scope":4652,"src":"1484:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4604,"name":"uint32","nodeType":"ElementaryTypeName","src":"1484:6:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4609,"mutability":"mutable","name":"dogTokenUris","nameLocation":"1526:12:24","nodeType":"VariableDeclaration","scope":4652,"src":"1509:29:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$3_memory_ptr","typeString":"string[3]"},"typeName":{"baseType":{"id":4606,"name":"string","nodeType":"ElementaryTypeName","src":"1509:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":4608,"length":{"hexValue":"33","id":4607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1516:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"1509:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$3_storage_ptr","typeString":"string[3]"}},"visibility":"internal"},{"constant":false,"id":4611,"mutability":"mutable","name":"mintFee","nameLocation":"1548:7:24","nodeType":"VariableDeclaration","scope":4652,"src":"1540:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4610,"name":"uint256","nodeType":"ElementaryTypeName","src":"1540:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1417:139:24"},"returnParameters":{"id":4620,"nodeType":"ParameterList","parameters":[],"src":"1628:0:24"},"scope":4901,"src":"1405:495:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4690,"nodeType":"Block","src":"1970:334:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4657,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1980:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1984:5:24","memberName":"value","nodeType":"MemberAccess","src":"1980:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4659,"name":"i_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"1992:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1980:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4665,"nodeType":"IfStatement","src":"1976:86:24","trueBody":{"id":4664,"nodeType":"Block","src":"2003:59:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4661,"name":"RandomIpfs__NOT_ENOUGH_ETH_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4539,"src":"2019:34:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2019:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4663,"nodeType":"RevertStatement","src":"2012:43:24"}]}},{"expression":{"id":4675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4666,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"2068:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4669,"name":"i_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4554,"src":"2118:9:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4670,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4552,"src":"2129:16:24","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":4671,"name":"REQUEST_CONFRIMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4559,"src":"2147:21:24","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":4672,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4556,"src":"2170:18:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":4673,"name":"NUW_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4562,"src":"2189:9:24","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":4667,"name":"i_vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4550,"src":"2080:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2099:18:24","memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":28,"src":"2080:37:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2080:120:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2068:132:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4676,"nodeType":"ExpressionStatement","src":"2068:132:24"},{"expression":{"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4677,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4566,"src":"2207:19:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4679,"indexExpression":{"id":4678,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"2227:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2207:30:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4680,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2241:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2245:6:24","memberName":"sender","nodeType":"MemberAccess","src":"2241:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2207:44:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4683,"nodeType":"ExpressionStatement","src":"2207:44:24"},{"eventCall":{"arguments":[{"id":4685,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"2277:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2288:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2292:6:24","memberName":"sender","nodeType":"MemberAccess","src":"2288:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4684,"name":"NftRequested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4588,"src":"2263:12:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":4688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2263:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4689,"nodeType":"EmitStatement","src":"2258:41:24"}]},"functionSelector":"aa152491","id":4691,"implemented":true,"kind":"function","modifiers":[],"name":"requestNft","nameLocation":"1914:10:24","nodeType":"FunctionDefinition","parameters":{"id":4653,"nodeType":"ParameterList","parameters":[],"src":"1924:2:24"},"returnParameters":{"id":4656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4655,"mutability":"mutable","name":"requestId","nameLocation":"1959:9:24","nodeType":"VariableDeclaration","scope":4691,"src":"1951:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4654,"name":"uint256","nodeType":"ElementaryTypeName","src":"1951:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1950:19:24"},"scope":4901,"src":"1905:399:24","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[1349],"body":{"id":4749,"nodeType":"Block","src":"2402:388:24","statements":[{"assignments":[4701],"declarations":[{"constant":false,"id":4701,"mutability":"mutable","name":"dogOwner","nameLocation":"2416:8:24","nodeType":"VariableDeclaration","scope":4749,"src":"2408:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4700,"name":"address","nodeType":"ElementaryTypeName","src":"2408:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4705,"initialValue":{"baseExpression":{"id":4702,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4566,"src":"2428:19:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4704,"indexExpression":{"id":4703,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4693,"src":"2448:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2428:30:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2408:50:24"},{"assignments":[4707],"declarations":[{"constant":false,"id":4707,"mutability":"mutable","name":"newTokenId","nameLocation":"2472:10:24","nodeType":"VariableDeclaration","scope":4749,"src":"2464:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4706,"name":"uint256","nodeType":"ElementaryTypeName","src":"2464:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4709,"initialValue":{"id":4708,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"2486:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2464:36:24"},{"expression":{"id":4711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2506:16:24","subExpression":{"id":4710,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"2506:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4712,"nodeType":"ExpressionStatement","src":"2506:16:24"},{"assignments":[4714],"declarations":[{"constant":false,"id":4714,"mutability":"mutable","name":"moddedRng","nameLocation":"2536:9:24","nodeType":"VariableDeclaration","scope":4749,"src":"2528:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4713,"name":"uint256","nodeType":"ElementaryTypeName","src":"2528:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4720,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4715,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4696,"src":"2548:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":4717,"indexExpression":{"hexValue":"30","id":4716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2560:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2548:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":4718,"name":"MAX_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"2565:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2548:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2528:46:24"},{"assignments":[4723],"declarations":[{"constant":false,"id":4723,"mutability":"mutable","name":"dogBreed","nameLocation":"2586:8:24","nodeType":"VariableDeclaration","scope":4749,"src":"2580:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"},"typeName":{"id":4722,"nodeType":"UserDefinedTypeName","pathNode":{"id":4721,"name":"Breed","nameLocations":["2580:5:24"],"nodeType":"IdentifierPath","referencedDeclaration":4582,"src":"2580:5:24"},"referencedDeclaration":4582,"src":"2580:5:24","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}},"visibility":"internal"}],"id":4727,"initialValue":{"arguments":[{"id":4725,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4714,"src":"2620:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4724,"name":"getBreedFromRandomNum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"2598:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_enum$_Breed_$4582_$","typeString":"function (uint256) pure returns (enum RandomIpfs.Breed)"}},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2598:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}},"nodeType":"VariableDeclarationStatement","src":"2580:50:24"},{"expression":{"arguments":[{"id":4729,"name":"dogOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"2646:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4730,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"2656:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4728,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[2324,2350],"referencedDeclaration":2324,"src":"2636:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2636:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4732,"nodeType":"ExpressionStatement","src":"2636:31:24"},{"expression":{"arguments":[{"id":4734,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"2686:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":4735,"name":"s_dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"2699:14:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":4740,"indexExpression":{"arguments":[{"id":4738,"name":"dogBreed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"2722:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}],"id":4737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2714:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4736,"name":"uint256","nodeType":"ElementaryTypeName","src":"2714:7:24","typeDescriptions":{}}},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2714:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2699:33:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":4733,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"2673:12:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2673:60:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4742,"nodeType":"ExpressionStatement","src":"2673:60:24"},{"eventCall":{"arguments":[{"id":4744,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4707,"src":"2754:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4745,"name":"dogBreed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"2766:8:24","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}},{"id":4746,"name":"dogOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"2776:8:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4743,"name":"NftMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4597,"src":"2744:9:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_enum$_Breed_$4582_$_t_address_$returns$__$","typeString":"function (uint256,enum RandomIpfs.Breed,address)"}},"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2744:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4748,"nodeType":"EmitStatement","src":"2739:46:24"}]},"id":4750,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"2316:18:24","nodeType":"FunctionDefinition","overrides":{"id":4698,"nodeType":"OverrideSpecifier","overrides":[],"src":"2393:8:24"},"parameters":{"id":4697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4693,"mutability":"mutable","name":"requestId","nameLocation":"2343:9:24","nodeType":"VariableDeclaration","scope":4750,"src":"2335:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4692,"name":"uint256","nodeType":"ElementaryTypeName","src":"2335:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4696,"mutability":"mutable","name":"randomWords","nameLocation":"2371:11:24","nodeType":"VariableDeclaration","scope":4750,"src":"2354:28:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4694,"name":"uint256","nodeType":"ElementaryTypeName","src":"2354:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4695,"nodeType":"ArrayTypeName","src":"2354:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2334:49:24"},"returnParameters":{"id":4699,"nodeType":"ParameterList","parameters":[],"src":"2402:0:24"},"scope":4901,"src":"2307:483:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4762,"nodeType":"Block","src":"2863:38:24","statements":[{"expression":{"components":[{"hexValue":"3130","id":4757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2878:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},{"hexValue":"3330","id":4758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2882:2:24","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},{"id":4759,"name":"MAX_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"2886:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4760,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2877:19:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"functionReturnParameters":4756,"id":4761,"nodeType":"Return","src":"2870:26:24"}]},"functionSelector":"8a857201","id":4763,"implemented":true,"kind":"function","modifiers":[],"name":"getChancesArray","nameLocation":"2804:15:24","nodeType":"FunctionDefinition","parameters":{"id":4751,"nodeType":"ParameterList","parameters":[],"src":"2819:2:24"},"returnParameters":{"id":4756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4763,"src":"2843:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":4752,"name":"uint256","nodeType":"ElementaryTypeName","src":"2843:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4754,"length":{"hexValue":"33","id":4753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2851:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"2843:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"src":"2842:20:24"},"scope":4901,"src":"2795:106:24","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":4821,"nodeType":"Block","src":"2981:359:24","statements":[{"assignments":[4776],"declarations":[{"constant":false,"id":4776,"mutability":"mutable","name":"chanceArray","nameLocation":"3007:11:24","nodeType":"VariableDeclaration","scope":4821,"src":"2989:29:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":4774,"name":"uint256","nodeType":"ElementaryTypeName","src":"2989:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4775,"length":{"hexValue":"33","id":4773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2997:1:24","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"2989:10:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"id":4779,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":4777,"name":"getChancesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4763,"src":"3021:15:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_array$_t_uint256_$3_memory_ptr_$","typeString":"function () pure returns (uint256[3] memory)"}},"id":4778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3021:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"nodeType":"VariableDeclarationStatement","src":"2989:49:24"},{"assignments":[4781],"declarations":[{"constant":false,"id":4781,"mutability":"mutable","name":"cumSum","nameLocation":"3054:6:24","nodeType":"VariableDeclaration","scope":4821,"src":"3046:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4780,"name":"uint256","nodeType":"ElementaryTypeName","src":"3046:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4783,"initialValue":{"hexValue":"30","id":4782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3064:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3046:19:24"},{"body":{"id":4816,"nodeType":"Block","src":"3124:169:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4795,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4765,"src":"3137:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4796,"name":"cumSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4781,"src":"3150:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3137:19:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4798,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4765,"src":"3160:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":4799,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"3172:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":4801,"indexExpression":{"id":4800,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"3184:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3172:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3160:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3137:49:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4809,"nodeType":"IfStatement","src":"3133:106:24","trueBody":{"id":4808,"nodeType":"Block","src":"3189:50:24","statements":[{"expression":{"arguments":[{"id":4805,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"3225:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4804,"name":"Breed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4582,"src":"3219:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Breed_$4582_$","typeString":"type(enum RandomIpfs.Breed)"}},"id":4806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3219:8:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}},"functionReturnParameters":4770,"id":4807,"nodeType":"Return","src":"3212:15:24"}]}},{"expression":{"id":4814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4810,"name":"cumSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4781,"src":"3248:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4811,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"3257:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":4813,"indexExpression":{"id":4812,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"3269:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3257:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3248:23:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4815,"nodeType":"ExpressionStatement","src":"3248:23:24"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4788,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"3095:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4789,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4776,"src":"3099:11:24","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":4790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3111:6:24","memberName":"length","nodeType":"MemberAccess","src":"3099:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3095:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4817,"initializationExpression":{"assignments":[4785],"declarations":[{"constant":false,"id":4785,"mutability":"mutable","name":"i","nameLocation":"3088:1:24","nodeType":"VariableDeclaration","scope":4817,"src":"3080:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4784,"name":"uint256","nodeType":"ElementaryTypeName","src":"3080:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4787,"initialValue":{"hexValue":"30","id":4786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3092:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3080:13:24"},"loopExpression":{"expression":{"id":4793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3119:3:24","subExpression":{"id":4792,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"3119:1:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4794,"nodeType":"ExpressionStatement","src":"3119:3:24"},"nodeType":"ForStatement","src":"3075:218:24"},{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4818,"name":"RandomIpfs__OUT_OF_RANGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4537,"src":"3307:24:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4820,"nodeType":"RevertStatement","src":"3300:33:24"}]},"functionSelector":"73d9aa2b","id":4822,"implemented":true,"kind":"function","modifiers":[],"name":"getBreedFromRandomNum","nameLocation":"2913:21:24","nodeType":"FunctionDefinition","parameters":{"id":4766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4765,"mutability":"mutable","name":"moddedRng","nameLocation":"2943:9:24","nodeType":"VariableDeclaration","scope":4822,"src":"2935:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2935:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2934:19:24"},"returnParameters":{"id":4770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4822,"src":"2974:5:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"},"typeName":{"id":4768,"nodeType":"UserDefinedTypeName","pathNode":{"id":4767,"name":"Breed","nameLocations":["2974:5:24"],"nodeType":"IdentifierPath","referencedDeclaration":4582,"src":"2974:5:24"},"referencedDeclaration":4582,"src":"2974:5:24","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$4582","typeString":"enum RandomIpfs.Breed"}},"visibility":"internal"}],"src":"2973:7:24"},"scope":4901,"src":"2904:436:24","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":4829,"nodeType":"Block","src":"3392:23:24","statements":[{"expression":{"id":4827,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4578,"src":"3405:5:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4826,"id":4828,"nodeType":"Return","src":"3398:12:24"}]},"functionSelector":"893d20e8","id":4830,"implemented":true,"kind":"function","modifiers":[],"name":"getOwner","nameLocation":"3352:8:24","nodeType":"FunctionDefinition","parameters":{"id":4823,"nodeType":"ParameterList","parameters":[],"src":"3360:2:24"},"returnParameters":{"id":4826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4830,"src":"3383:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4824,"name":"address","nodeType":"ElementaryTypeName","src":"3383:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3382:9:24"},"scope":4901,"src":"3343:72:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4871,"nodeType":"Block","src":"3449:322:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4833,"name":"getOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"3459:8:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3459:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4835,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3473:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3477:6:24","memberName":"sender","nodeType":"MemberAccess","src":"3473:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3459:24:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4842,"nodeType":"IfStatement","src":"3455:104:24","trueBody":{"id":4841,"nodeType":"Block","src":"3485:74:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4838,"name":"RandomIpfs__OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4543,"src":"3507:38:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3507:40:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4840,"nodeType":"RevertStatement","src":"3500:47:24"}]}},{"assignments":[4844],"declarations":[{"constant":false,"id":4844,"mutability":"mutable","name":"amount","nameLocation":"3572:6:24","nodeType":"VariableDeclaration","scope":4871,"src":"3564:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4843,"name":"uint256","nodeType":"ElementaryTypeName","src":"3564:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4850,"initialValue":{"expression":{"arguments":[{"id":4847,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3589:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_RandomIpfs_$4901","typeString":"contract RandomIpfs"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_RandomIpfs_$4901","typeString":"contract RandomIpfs"}],"id":4846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3581:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4845,"name":"address","nodeType":"ElementaryTypeName","src":"3581:7:24","typeDescriptions":{}}},"id":4848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3581:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3595:7:24","memberName":"balance","nodeType":"MemberAccess","src":"3581:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3564:38:24"},{"assignments":[4852,null],"declarations":[{"constant":false,"id":4852,"mutability":"mutable","name":"success","nameLocation":"3614:7:24","nodeType":"VariableDeclaration","scope":4871,"src":"3609:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4851,"name":"bool","nodeType":"ElementaryTypeName","src":"3609:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4863,"initialValue":{"arguments":[{"hexValue":"","id":4861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3666:2:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":4855,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3635:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3639:6:24","memberName":"sender","nodeType":"MemberAccess","src":"3635:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3627:8:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4853,"name":"address","nodeType":"ElementaryTypeName","src":"3627:8:24","stateMutability":"payable","typeDescriptions":{}}},"id":4857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3627:19:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3647:4:24","memberName":"call","nodeType":"MemberAccess","src":"3627:24:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4859,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"3658:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3627:38:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3627:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3608:61:24"},{"condition":{"id":4865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3681:8:24","subExpression":{"id":4864,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4852,"src":"3682:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4870,"nodeType":"IfStatement","src":"3677:89:24","trueBody":{"id":4869,"nodeType":"Block","src":"3691:75:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4866,"name":"RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4541,"src":"3708:49:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3708:51:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4868,"nodeType":"RevertStatement","src":"3700:59:24"}]}}]},"functionSelector":"3ccfd60b","id":4872,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"3430:8:24","nodeType":"FunctionDefinition","parameters":{"id":4831,"nodeType":"ParameterList","parameters":[],"src":"3438:2:24"},"returnParameters":{"id":4832,"nodeType":"ParameterList","parameters":[],"src":"3449:0:24"},"scope":4901,"src":"3421:350:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4879,"nodeType":"Block","src":"3825:27:24","statements":[{"expression":{"id":4877,"name":"i_mintFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4576,"src":"3838:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4876,"id":4878,"nodeType":"Return","src":"3831:16:24"}]},"functionSelector":"7a5caab3","id":4880,"implemented":true,"kind":"function","modifiers":[],"name":"getMintFee","nameLocation":"3783:10:24","nodeType":"FunctionDefinition","parameters":{"id":4873,"nodeType":"ParameterList","parameters":[],"src":"3793:2:24"},"returnParameters":{"id":4876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4875,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4880,"src":"3816:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4874,"name":"uint256","nodeType":"ElementaryTypeName","src":"3816:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3815:9:24"},"scope":4901,"src":"3774:78:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4891,"nodeType":"Block","src":"3930:41:24","statements":[{"expression":{"baseExpression":{"id":4887,"name":"s_dogTokenUris","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"3943:14:24","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":4889,"indexExpression":{"id":4888,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4882,"src":"3958:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3943:21:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":4886,"id":4890,"nodeType":"Return","src":"3936:28:24"}]},"functionSelector":"3af25975","id":4892,"implemented":true,"kind":"function","modifiers":[],"name":"getDogTokenUris","nameLocation":"3864:15:24","nodeType":"FunctionDefinition","parameters":{"id":4883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4882,"mutability":"mutable","name":"index","nameLocation":"3888:5:24","nodeType":"VariableDeclaration","scope":4892,"src":"3880:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4881,"name":"uint256","nodeType":"ElementaryTypeName","src":"3880:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3879:15:24"},"returnParameters":{"id":4886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4885,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4892,"src":"3916:13:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4884,"name":"string","nodeType":"ElementaryTypeName","src":"3916:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3915:15:24"},"scope":4901,"src":"3855:116:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4899,"nodeType":"Block","src":"4032:32:24","statements":[{"expression":{"id":4897,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4571,"src":"4045:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4896,"id":4898,"nodeType":"Return","src":"4038:21:24"}]},"functionSelector":"6e02007d","id":4900,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenCounter","nameLocation":"3983:15:24","nodeType":"FunctionDefinition","parameters":{"id":4893,"nodeType":"ParameterList","parameters":[],"src":"3998:3:24"},"returnParameters":{"id":4896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4895,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4900,"src":"4023:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4894,"name":"uint256","nodeType":"ElementaryTypeName","src":"4023:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4022:9:24"},"scope":4901,"src":"3974:90:24","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4902,"src":"546:3524:24","usedErrors":[1327,1604,1609,1618,1623,1628,1635,1640,1645,4537,4539,4541,4543],"usedEvents":[1544,1551,2718,2727,2736,4588,4597]}],"src":"33:4037:24"},"id":24},"contracts/RandomIpfsNft.sol":{"ast":{"absolutePath":"contracts/RandomIpfsNft.sol","exportedSymbols":{},"id":4903,"license":"MIT","nodeType":"SourceUnit","nodes":[],"src":"9704:0:25"},"id":25},"contracts/test/VRFCoordinatorV2Mock.sol":{"ast":{"absolutePath":"contracts/test/VRFCoordinatorV2Mock.sol","exportedSymbols":{"ConfirmedOwner":[1045],"ConfirmedOwnerWithProposal":[1207],"IOwnable":[1223],"LinkTokenInterface":[1318],"VRFConsumerBaseV2":[1376],"VRFCoordinatorV2Interface":[95],"VRFCoordinatorV2Mock":[1025]},"id":4906,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4904,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:26"},{"absolutePath":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol","file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol","id":4905,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4906,"sourceUnit":1026,"src":"60:70:26","symbolAliases":[],"unitAlias":""}],"src":"33:97:26"},"id":26}},"contracts":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol":{"VRFCoordinatorV2Mock":{"abi":[{"inputs":[{"internalType":"uint96","name":"_baseFee","type":"uint96"},{"internalType":"uint96","name":"_gasPriceLink","type":"uint96"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidConsumer","type":"error"},{"inputs":[],"name":"InvalidRandomWords","type":"error"},{"inputs":[],"name":"InvalidSubscription","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"MustBeSubOwner","type":"error"},{"inputs":[],"name":"Reentrant","type":"error"},{"inputs":[],"name":"TooManyConsumers","type":"error"},{"anonymous":false,"inputs":[],"name":"ConfigSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"subId","type":"uint64"},{"indexed":false,"internalType":"address","name":"consumer","type":"address"}],"name":"ConsumerAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"subId","type":"uint64"},{"indexed":false,"internalType":"address","name":"consumer","type":"address"}],"name":"ConsumerRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outputSeed","type":"uint256"},{"indexed":false,"internalType":"uint96","name":"payment","type":"uint96"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"RandomWordsFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"preSeed","type":"uint256"},{"indexed":true,"internalType":"uint64","name":"subId","type":"uint64"},{"indexed":false,"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"indexed":false,"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"numWords","type":"uint32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RandomWordsRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"subId","type":"uint64"},{"indexed":false,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"SubscriptionCanceled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"subId","type":"uint64"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"SubscriptionCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint64","name":"subId","type":"uint64"},{"indexed":false,"internalType":"uint256","name":"oldBalance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newBalance","type":"uint256"}],"name":"SubscriptionFunded","type":"event"},{"inputs":[],"name":"BASE_FEE","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GAS_PRICE_LINK","outputs":[{"internalType":"uint96","name":"","type":"uint96"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CONSUMERS","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"_subId","type":"uint64"},{"internalType":"address","name":"_consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_subId","type":"uint64"},{"internalType":"address","name":"_to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_subId","type":"uint64"},{"internalType":"address","name":"_consumer","type":"address"}],"name":"consumerIsAdded","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"_subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_requestId","type":"uint256"},{"internalType":"address","name":"_consumer","type":"address"}],"name":"fulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_requestId","type":"uint256"},{"internalType":"address","name":"_consumer","type":"address"},{"internalType":"uint256[]","name":"_words","type":"uint256[]"}],"name":"fulfillRandomWordsWithOverride","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_subId","type":"uint64"},{"internalType":"uint96","name":"_amount","type":"uint96"}],"name":"fundSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getConfig","outputs":[{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"maxGasLimit","type":"uint32"},{"internalType":"uint32","name":"stalenessSeconds","type":"uint32"},{"internalType":"uint32","name":"gasAfterPaymentCalculation","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getFallbackWeiPerUnitLink","outputs":[{"internalType":"int256","name":"","type":"int256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getFeeConfig","outputs":[{"internalType":"uint32","name":"fulfillmentFlatFeeLinkPPMTier1","type":"uint32"},{"internalType":"uint32","name":"fulfillmentFlatFeeLinkPPMTier2","type":"uint32"},{"internalType":"uint32","name":"fulfillmentFlatFeeLinkPPMTier3","type":"uint32"},{"internalType":"uint32","name":"fulfillmentFlatFeeLinkPPMTier4","type":"uint32"},{"internalType":"uint32","name":"fulfillmentFlatFeeLinkPPMTier5","type":"uint32"},{"internalType":"uint24","name":"reqsForTier2","type":"uint24"},{"internalType":"uint24","name":"reqsForTier3","type":"uint24"},{"internalType":"uint24","name":"reqsForTier4","type":"uint24"},{"internalType":"uint24","name":"reqsForTier5","type":"uint24"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"_subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"_subId","type":"uint64"},{"internalType":"address","name":"_consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_keyHash","type":"bytes32"},{"internalType":"uint64","name":"_subId","type":"uint64"},{"internalType":"uint16","name":"_minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"_callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"_numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"","type":"uint64"},{"internalType":"address","name":"","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"setConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"_subId":"- A unique subscription id."}},"fulfillRandomWords(uint256,address)":{"details":"This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.","params":{"_consumer":"the VRF randomness consumer to send the result to","_requestId":"the request to fulfill"}},"fulfillRandomWordsWithOverride(uint256,address,uint256[])":{"params":{"_consumer":"the VRF randomness consumer to send the result to","_requestId":"the request to fulfill","_words":"user-provided random words"}},"fundSubscription(uint64,uint96)":{"params":{"_amount":"the amount to fund","_subId":"the subscription to fund"}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1044":{"entryPoint":null,"id":1044,"parameterSlots":1,"returnSlots":0},"@_1101":{"entryPoint":null,"id":1101,"parameterSlots":2,"returnSlots":0},"@_256":{"entryPoint":null,"id":256,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_1185":{"entryPoint":432,"id":1185,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_1198":{"entryPoint":852,"id":1198,"parameterSlots":0,"returnSlots":0},"@setConfig_272":{"entryPoint":735,"id":272,"parameterSlots":0,"returnSlots":0},"abi_decode_t_uint96_fromMemory":{"entryPoint":1054,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint96t_uint96_fromMemory":{"entryPoint":1077,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":1434,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack":{"entryPoint":1206,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":1320,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1473,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1245,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1359,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1148,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":1004,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":999,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":1393,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2":{"entryPoint":1165,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":1279,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":1028,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4331:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"378:65:27","statements":[{"nodeType":"YulAssignment","src":"388:49:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"410:26:27","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:27"},"nodeType":"YulFunctionCall","src":"399:38:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:27"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:27","type":""}],"src":"334:109:27"},{"body":{"nodeType":"YulBlock","src":"491:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"547:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"556:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"559:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"549:6:27"},"nodeType":"YulFunctionCall","src":"549:12:27"},"nodeType":"YulExpressionStatement","src":"549:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"514:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"538:5:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"521:16:27"},"nodeType":"YulFunctionCall","src":"521:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"511:2:27"},"nodeType":"YulFunctionCall","src":"511:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"504:6:27"},"nodeType":"YulFunctionCall","src":"504:42:27"},"nodeType":"YulIf","src":"501:62:27"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"484:5:27","type":""}],"src":"449:120:27"},{"body":{"nodeType":"YulBlock","src":"637:79:27","statements":[{"nodeType":"YulAssignment","src":"647:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"662:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"656:5:27"},"nodeType":"YulFunctionCall","src":"656:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"647:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"704:5:27"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"678:25:27"},"nodeType":"YulFunctionCall","src":"678:32:27"},"nodeType":"YulExpressionStatement","src":"678:32:27"}]},"name":"abi_decode_t_uint96_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"615:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"623:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"631:5:27","type":""}],"src":"575:141:27"},{"body":{"nodeType":"YulBlock","src":"814:411:27","statements":[{"body":{"nodeType":"YulBlock","src":"860:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"862:77:27"},"nodeType":"YulFunctionCall","src":"862:79:27"},"nodeType":"YulExpressionStatement","src":"862:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"835:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"844:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"831:3:27"},"nodeType":"YulFunctionCall","src":"831:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"856:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"827:3:27"},"nodeType":"YulFunctionCall","src":"827:32:27"},"nodeType":"YulIf","src":"824:119:27"},{"nodeType":"YulBlock","src":"953:127:27","statements":[{"nodeType":"YulVariableDeclaration","src":"968:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"982:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"972:6:27","type":""}]},{"nodeType":"YulAssignment","src":"997:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1042:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1053:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1038:3:27"},"nodeType":"YulFunctionCall","src":"1038:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1062:7:27"}],"functionName":{"name":"abi_decode_t_uint96_fromMemory","nodeType":"YulIdentifier","src":"1007:30:27"},"nodeType":"YulFunctionCall","src":"1007:63:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"997:6:27"}]}]},{"nodeType":"YulBlock","src":"1090:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1105:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1119:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1109:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1135:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1180:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1191:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1176:3:27"},"nodeType":"YulFunctionCall","src":"1176:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1200:7:27"}],"functionName":{"name":"abi_decode_t_uint96_fromMemory","nodeType":"YulIdentifier","src":"1145:30:27"},"nodeType":"YulFunctionCall","src":"1145:63:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1135:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint96t_uint96_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"776:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"787:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"799:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"807:6:27","type":""}],"src":"722:503:27"},{"body":{"nodeType":"YulBlock","src":"1327:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1344:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1349:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1337:6:27"},"nodeType":"YulFunctionCall","src":"1337:19:27"},"nodeType":"YulExpressionStatement","src":"1337:19:27"},{"nodeType":"YulAssignment","src":"1365:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1384:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1389:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1380:3:27"},"nodeType":"YulFunctionCall","src":"1380:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1365:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1299:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1304:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1315:11:27","type":""}],"src":"1231:169:27"},{"body":{"nodeType":"YulBlock","src":"1512:68:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1534:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"1542:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1530:3:27"},"nodeType":"YulFunctionCall","src":"1530:14:27"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"1546:26:27","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1523:6:27"},"nodeType":"YulFunctionCall","src":"1523:50:27"},"nodeType":"YulExpressionStatement","src":"1523:50:27"}]},"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1504:6:27","type":""}],"src":"1406:174:27"},{"body":{"nodeType":"YulBlock","src":"1732:220:27","statements":[{"nodeType":"YulAssignment","src":"1742:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1808:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1813:2:27","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1749:58:27"},"nodeType":"YulFunctionCall","src":"1749:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1742:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1914:3:27"}],"functionName":{"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nodeType":"YulIdentifier","src":"1825:88:27"},"nodeType":"YulFunctionCall","src":"1825:93:27"},"nodeType":"YulExpressionStatement","src":"1825:93:27"},{"nodeType":"YulAssignment","src":"1927:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1938:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1943:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1934:3:27"},"nodeType":"YulFunctionCall","src":"1934:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1927:3:27"}]}]},"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1720:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1728:3:27","type":""}],"src":"1586:366:27"},{"body":{"nodeType":"YulBlock","src":"2129:248:27","statements":[{"nodeType":"YulAssignment","src":"2139:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2151:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2162:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2147:3:27"},"nodeType":"YulFunctionCall","src":"2147:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2139:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2186:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2197:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2182:3:27"},"nodeType":"YulFunctionCall","src":"2182:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2205:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2211:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2201:3:27"},"nodeType":"YulFunctionCall","src":"2201:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2175:6:27"},"nodeType":"YulFunctionCall","src":"2175:47:27"},"nodeType":"YulExpressionStatement","src":"2175:47:27"},{"nodeType":"YulAssignment","src":"2231:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2365:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2239:124:27"},"nodeType":"YulFunctionCall","src":"2239:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2231:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2109:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2124:4:27","type":""}],"src":"1958:419:27"},{"body":{"nodeType":"YulBlock","src":"2489:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2511:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2519:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2507:3:27"},"nodeType":"YulFunctionCall","src":"2507:14:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"2523:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2500:6:27"},"nodeType":"YulFunctionCall","src":"2500:49:27"},"nodeType":"YulExpressionStatement","src":"2500:49:27"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2481:6:27","type":""}],"src":"2383:173:27"},{"body":{"nodeType":"YulBlock","src":"2708:220:27","statements":[{"nodeType":"YulAssignment","src":"2718:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2784:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2789:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2725:58:27"},"nodeType":"YulFunctionCall","src":"2725:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2718:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2890:3:27"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulIdentifier","src":"2801:88:27"},"nodeType":"YulFunctionCall","src":"2801:93:27"},"nodeType":"YulExpressionStatement","src":"2801:93:27"},{"nodeType":"YulAssignment","src":"2903:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2914:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2919:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2910:3:27"},"nodeType":"YulFunctionCall","src":"2910:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2903:3:27"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2696:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2704:3:27","type":""}],"src":"2562:366:27"},{"body":{"nodeType":"YulBlock","src":"3105:248:27","statements":[{"nodeType":"YulAssignment","src":"3115:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3127:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3138:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3123:3:27"},"nodeType":"YulFunctionCall","src":"3123:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3115:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3162:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3173:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3158:3:27"},"nodeType":"YulFunctionCall","src":"3158:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3181:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3187:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3177:3:27"},"nodeType":"YulFunctionCall","src":"3177:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3151:6:27"},"nodeType":"YulFunctionCall","src":"3151:47:27"},"nodeType":"YulExpressionStatement","src":"3151:47:27"},{"nodeType":"YulAssignment","src":"3207:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3341:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3215:124:27"},"nodeType":"YulFunctionCall","src":"3215:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3207:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3085:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3100:4:27","type":""}],"src":"2934:419:27"},{"body":{"nodeType":"YulBlock","src":"3465:66:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3487:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"3495:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3483:3:27"},"nodeType":"YulFunctionCall","src":"3483:14:27"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"3499:24:27","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3476:6:27"},"nodeType":"YulFunctionCall","src":"3476:48:27"},"nodeType":"YulExpressionStatement","src":"3476:48:27"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3457:6:27","type":""}],"src":"3359:172:27"},{"body":{"nodeType":"YulBlock","src":"3683:220:27","statements":[{"nodeType":"YulAssignment","src":"3693:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3759:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3764:2:27","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3700:58:27"},"nodeType":"YulFunctionCall","src":"3700:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3693:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3865:3:27"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulIdentifier","src":"3776:88:27"},"nodeType":"YulFunctionCall","src":"3776:93:27"},"nodeType":"YulExpressionStatement","src":"3776:93:27"},{"nodeType":"YulAssignment","src":"3878:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3889:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3894:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3885:3:27"},"nodeType":"YulFunctionCall","src":"3885:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3878:3:27"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3671:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3679:3:27","type":""}],"src":"3537:366:27"},{"body":{"nodeType":"YulBlock","src":"4080:248:27","statements":[{"nodeType":"YulAssignment","src":"4090:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4102:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4113:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4098:3:27"},"nodeType":"YulFunctionCall","src":"4098:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4090:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4137:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4148:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:27"},"nodeType":"YulFunctionCall","src":"4133:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4156:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4162:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4152:3:27"},"nodeType":"YulFunctionCall","src":"4152:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4126:6:27"},"nodeType":"YulFunctionCall","src":"4126:47:27"},"nodeType":"YulExpressionStatement","src":"4126:47:27"},{"nodeType":"YulAssignment","src":"4182:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4316:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4190:124:27"},"nodeType":"YulFunctionCall","src":"4190:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4182:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4060:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4075:4:27","type":""}],"src":"3909:419:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function abi_decode_tuple_t_uint96t_uint96_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint96_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint96_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE PUSH1 0x64 PUSH2 0xFFFF AND PUSH1 0xC0 SWAP1 PUSH2 0xFFFF AND DUP2 MSTORE POP PUSH1 0x1 PUSH1 0x4 SSTORE PUSH1 0x64 PUSH1 0x5 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3981 CODESIZE SUB DUP1 PUSH3 0x3981 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x51 SWAP2 SWAP1 PUSH3 0x435 JUMP JUMPDEST CALLER DUP1 PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xC6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xBD SWAP1 PUSH3 0x4DD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x14D JUMPI PUSH3 0x14C DUP2 PUSH3 0x1B0 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP POP DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH3 0x1A8 PUSH3 0x2DF PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH3 0x5E3 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x221 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x218 SWAP1 PUSH3 0x54F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH3 0x2EF PUSH3 0x354 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH32 0x4B2974A542484CBA2783812FF8033F7FC682CAC2FE0905C28C5E27869B3155BE PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH3 0x3E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3DC SWAP1 PUSH3 0x5C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x40F DUP2 PUSH3 0x3EC JUMP JUMPDEST DUP2 EQ PUSH3 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x42F DUP2 PUSH3 0x404 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x44F JUMPI PUSH3 0x44E PUSH3 0x3E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x45F DUP6 DUP3 DUP7 ADD PUSH3 0x41E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH3 0x472 DUP6 DUP3 DUP7 ADD PUSH3 0x41E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4C5 PUSH1 0x18 DUP4 PUSH3 0x47C JUMP JUMPDEST SWAP2 POP PUSH3 0x4D2 DUP3 PUSH3 0x48D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x4F8 DUP2 PUSH3 0x4B6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x537 PUSH1 0x17 DUP4 PUSH3 0x47C JUMP JUMPDEST SWAP2 POP PUSH3 0x544 DUP3 PUSH3 0x4FF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x56A DUP2 PUSH3 0x528 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5A9 PUSH1 0x16 DUP4 PUSH3 0x47C JUMP JUMPDEST SWAP2 POP PUSH3 0x5B6 DUP3 PUSH3 0x571 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x5DC DUP2 PUSH3 0x59A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x3359 PUSH3 0x628 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xDB4 ADD MSTORE PUSH2 0xEFE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x853 ADD MSTORE PUSH2 0x18DC ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x898 ADD MSTORE PUSH2 0xAA7 ADD MSTORE PUSH2 0x3359 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x157 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8B673E7A GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xAFC69B53 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xAFC69B53 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0xC3F909D4 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0xD7AE1D30 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0xE82AD7D4 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xED5EB06D EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42E JUMPI PUSH2 0x157 JUMP JUMPDEST DUP1 PUSH4 0x8B673E7A EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x9F87FAD7 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xA21A23E4 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0xA410347F EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0xA47C7696 EQ PUSH2 0x342 JUMPI PUSH2 0x157 JUMP JUMPDEST DUP1 PUSH4 0x5FBBC0D2 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x5FBBC0D2 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x64D51A2A EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x7341C10C EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x808974FF EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x82359740 EQ PUSH2 0x2A6 JUMPI PUSH2 0x157 JUMP JUMPDEST DUP1 PUSH3 0x12291 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x4C357CB EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8E3898E EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x356DAC71 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x3D18651E EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x5D3B1D30 EQ PUSH2 0x1F0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x164 PUSH2 0x44A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x173 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x196 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x4AA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x4E5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BC PUSH2 0xA96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x26E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DA PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x205 SWAP2 SWAP1 PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0xAC9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0x2851 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x228 PUSH2 0xD73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x288A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0xDD6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x288 PUSH2 0x1062 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2932 JUMP JUMPDEST PUSH2 0x11F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BB SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x1299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CA PUSH2 0x12D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D4 PUSH2 0x1341 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x304 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x136A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30E PUSH2 0x171F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x29D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x32C PUSH2 0x18DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x339 SWAP2 SWAP1 PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x18FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x38F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38A SWAP2 SWAP1 PUSH2 0x2B29 JUMP JUMPDEST PUSH2 0x1B03 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x399 PUSH2 0x1CCD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C7 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x1CED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E3 SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x1F59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x418 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x1F96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x448 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x2BE4 JUMP JUMPDEST PUSH2 0x20CB JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x3 PUSH3 0x1E8480 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x470 JUMPI PUSH2 0x46F PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x49E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DC SWAP1 PUSH2 0x2C6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SUB PUSH2 0x561 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x558 SWAP1 PUSH2 0x2CDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x6D8 JUMPI DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x62E JUMPI PUSH2 0x62D PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x65C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP2 LT ISZERO PUSH2 0x6D2 JUMPI DUP6 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x687 SWAP3 SWAP2 SWAP1 PUSH2 0x2CFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6B3 JUMPI PUSH2 0x6B2 PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH2 0x6CA SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x662 JUMP JUMPDEST POP PUSH2 0x71D JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 MLOAD EQ PUSH2 0x71C JUMPI PUSH1 0x40 MLOAD PUSH32 0x3F3DF5B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x1FE543E3 PUSH1 0xE0 SHL DUP8 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x73B SWAP3 SWAP2 SWAP1 PUSH2 0x2E87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x7EA SWAP2 SWAP1 PUSH2 0x2F28 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x828 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x82D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GAS DUP8 PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x2F3F JUMP JUMPDEST PUSH2 0x896 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST PUSH32 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8CF SWAP2 SWAP1 PUSH2 0x2FB5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0xF4D678B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x2FE9 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x8 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP DUP9 PUSH32 0x7DFFC5AE5EE4E2E4DF1651CF6AD329A73CEBDB728F37EA0187B9B17E036756E4 DUP11 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA83 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3029 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH7 0xE35FA931A0000 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 CALLER PUSH2 0xB21 DUP3 DUP3 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0xB57 JUMPI PUSH1 0x40 MLOAD PUSH32 0x71E8313700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xC1C SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xC37 SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0x63373D1C4696214B898952999C9AAEC57DAC1EE2723CEC59BEA6888F489A9772 DUP6 DUP6 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0xD5B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3060 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP2 SWAP5 POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x186A0 DUP1 PUSH3 0x186A0 DUP1 PUSH3 0x186A0 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEFC JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD8A3FB5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF3 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH2 0xFFFF AND PUSH1 0x7 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP SUB PUSH2 0xF83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5A48E0F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF8D DUP5 DUP5 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x105C JUMPI PUSH1 0x7 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x752EAD9F4536EC1319EE3A5A604E1D65EDED22E0924251552BA14AE4FAA1BBC3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1053 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10E9 SWAP1 PUSH2 0x30FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1241 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1295 DUP3 DUP3 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1261 JUMPI PUSH2 0x1260 PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x128F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH2 0x4E5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12CB SWAP1 PUSH2 0x2C6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12DC PUSH2 0x20DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH32 0x4B2974A542484CBA2783812FF8033F7FC682CAC2FE0905C28C5E27869B3155BE PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1420 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1490 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD8A3FB5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1487 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH2 0x149C DUP3 DUP3 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x14D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x71E8313700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x151C JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x16D3 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1580 JUMPI PUSH2 0x157F PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x16C0 JUMPI PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP PUSH2 0x15DA SWAP2 SWAP1 PUSH2 0x2F3F JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x15EB JUMPI PUSH2 0x15EA PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x162C JUMPI PUSH2 0x162B PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 DUP1 SLOAD DUP1 PUSH2 0x1685 JUMPI PUSH2 0x1684 PUSH2 0x311F JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE POP PUSH2 0x16D3 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x16CB SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x154A JUMP JUMPDEST POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0xF9BC9D5B5733D904409DEF43A5ECC888DBDAC9A95687780D8FD489D3BB3813FC DUP8 PUSH1 0x40 MLOAD PUSH2 0x170E SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1747 SWAP1 PUSH2 0x314E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x464722B4166576D3DCBBA877B999BC35CF911F4EAF434B7EBA68FA113951D0BF CALLER PUSH1 0x40 MLOAD PUSH2 0x18B6 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x7 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1AED JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1AA3 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C4B SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0xD39EC07F4E209F627A4C427971473820DC129761BA28DE8906BD56F57101D4F8 DUP3 DUP5 DUP5 PUSH2 0x1CB2 SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CC0 SWAP3 SWAP2 SWAP1 PUSH2 0x31F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x4 PUSH3 0x2625A0 PUSH2 0xA8C PUSH2 0x8205 SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E13 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD8A3FB5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E0A SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1E5D JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0xE8ED5B475A5B5987AA9165E8731BB78043F39EEE32EC5A1169A89E27FCD49815 DUP5 PUSH1 0x6 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x1EDB SWAP3 SWAP2 SWAP1 PUSH2 0x3222 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F8D SWAP1 PUSH2 0x2C6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x7 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2040 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1FF6 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x20BE JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x207D JUMPI PUSH2 0x207C PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20AB JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x20C5 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x20B6 SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x204A JUMP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x20D3 PUSH2 0x20DF JUMP JUMPDEST PUSH2 0x20DC DUP2 PUSH2 0x216F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x216D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2164 SWAP1 PUSH2 0x3297 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x21DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21D4 SWAP1 PUSH2 0x3303 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22B2 DUP2 PUSH2 0x229B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22D1 DUP2 PUSH2 0x22B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2316 DUP2 PUSH2 0x2303 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2328 DUP4 DUP4 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x234C DUP3 PUSH2 0x22D7 JUMP JUMPDEST PUSH2 0x2356 DUP2 DUP6 PUSH2 0x22E2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2361 DUP4 PUSH2 0x22F3 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2392 JUMPI DUP2 MLOAD PUSH2 0x2379 DUP9 DUP3 PUSH2 0x231C JUMP JUMPDEST SWAP8 POP PUSH2 0x2384 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2365 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x23B4 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x22A9 JUMP JUMPDEST PUSH2 0x23C1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x22C8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x23D3 DUP2 DUP5 PUSH2 0x2341 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x240E DUP2 PUSH2 0x23F1 JUMP JUMPDEST DUP2 EQ PUSH2 0x2419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x242B DUP2 PUSH2 0x2405 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x245C DUP3 PUSH2 0x2431 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x246C DUP2 PUSH2 0x2451 JUMP JUMPDEST DUP2 EQ PUSH2 0x2477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2489 DUP2 PUSH2 0x2463 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24A6 JUMPI PUSH2 0x24A5 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24B4 DUP6 DUP3 DUP7 ADD PUSH2 0x241C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24C5 DUP6 DUP3 DUP7 ADD PUSH2 0x247A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24E2 DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP2 EQ PUSH2 0x24ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24FF DUP2 PUSH2 0x24D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2553 DUP3 PUSH2 0x250A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2572 JUMPI PUSH2 0x2571 PUSH2 0x251B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2585 PUSH2 0x23DD JUMP JUMPDEST SWAP1 POP PUSH2 0x2591 DUP3 DUP3 PUSH2 0x254A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25B1 JUMPI PUSH2 0x25B0 PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x25DA PUSH2 0x25D5 DUP5 PUSH2 0x2596 JUMP JUMPDEST PUSH2 0x257B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x25FD JUMPI PUSH2 0x25FC PUSH2 0x25C2 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2626 JUMPI DUP1 PUSH2 0x2612 DUP9 DUP3 PUSH2 0x24F0 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25FF JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2645 JUMPI PUSH2 0x2644 PUSH2 0x2505 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2655 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x25C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2677 JUMPI PUSH2 0x2676 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2685 DUP7 DUP3 DUP8 ADD PUSH2 0x24F0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2696 DUP7 DUP3 DUP8 ADD PUSH2 0x247A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26B7 JUMPI PUSH2 0x26B6 PUSH2 0x23EC JUMP JUMPDEST JUMPDEST PUSH2 0x26C3 DUP7 DUP3 DUP8 ADD PUSH2 0x2630 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E0 DUP2 PUSH2 0x26CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26FB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2722 DUP2 PUSH2 0x2701 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x273D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2719 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x274C DUP2 PUSH2 0x2303 JUMP JUMPDEST DUP2 EQ PUSH2 0x2757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2769 DUP2 PUSH2 0x2743 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2778 DUP2 PUSH2 0x229B JUMP JUMPDEST DUP2 EQ PUSH2 0x2783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2795 DUP2 PUSH2 0x276F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27A4 DUP2 PUSH2 0x22B8 JUMP JUMPDEST DUP2 EQ PUSH2 0x27AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27C1 DUP2 PUSH2 0x279B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x27E3 JUMPI PUSH2 0x27E2 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x27F1 DUP9 DUP3 DUP10 ADD PUSH2 0x275A JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2802 DUP9 DUP3 DUP10 ADD PUSH2 0x241C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2813 DUP9 DUP3 DUP10 ADD PUSH2 0x2786 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x2824 DUP9 DUP3 DUP10 ADD PUSH2 0x27B2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2835 DUP9 DUP3 DUP10 ADD PUSH2 0x27B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x284B DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2866 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2842 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2884 DUP2 PUSH2 0x286C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x28A0 PUSH1 0x0 DUP4 ADD DUP13 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28AD PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28BA PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28C7 PUSH1 0x60 DUP4 ADD DUP10 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28D4 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28E1 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x287B JUMP JUMPDEST PUSH2 0x28EE PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x287B JUMP JUMPDEST PUSH2 0x28FB PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x287B JUMP JUMPDEST PUSH2 0x2909 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x287B JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x292C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22A9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2949 JUMPI PUSH2 0x2948 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2957 DUP6 DUP3 DUP7 ADD PUSH2 0x24F0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2968 DUP6 DUP3 DUP7 ADD PUSH2 0x247A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2988 JUMPI PUSH2 0x2987 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2996 DUP5 DUP3 DUP6 ADD PUSH2 0x241C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29A8 DUP2 PUSH2 0x2451 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29C3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x299F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29D2 DUP2 PUSH2 0x23F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x29C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A28 DUP2 PUSH2 0x2451 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3A DUP4 DUP4 PUSH2 0x2A1F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A5E DUP3 PUSH2 0x29F3 JUMP JUMPDEST PUSH2 0x2A68 DUP2 DUP6 PUSH2 0x29FE JUMP JUMPDEST SWAP4 POP PUSH2 0x2A73 DUP4 PUSH2 0x2A0F JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2AA4 JUMPI DUP2 MLOAD PUSH2 0x2A8B DUP9 DUP3 PUSH2 0x2A2E JUMP JUMPDEST SWAP8 POP PUSH2 0x2A96 DUP4 PUSH2 0x2A46 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2A77 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2AC6 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2719 JUMP JUMPDEST PUSH2 0x2AD3 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x2AE0 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x299F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2AF2 DUP2 DUP5 PUSH2 0x2A53 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2B06 DUP2 PUSH2 0x2701 JUMP JUMPDEST DUP2 EQ PUSH2 0x2B11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B23 DUP2 PUSH2 0x2AFD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B40 JUMPI PUSH2 0x2B3F PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B4E DUP6 DUP3 DUP7 ADD PUSH2 0x241C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2B5F DUP6 DUP3 DUP7 ADD PUSH2 0x2B14 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2B7E PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x22A9 JUMP JUMPDEST PUSH2 0x2B8B PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x2B98 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x2BA5 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x22C8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BC3 DUP2 PUSH2 0x2BAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2BDE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BFA JUMPI PUSH2 0x2BF9 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C08 DUP5 DUP3 DUP6 ADD PUSH2 0x247A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E6F7420696D706C656D656E7465640000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C58 PUSH1 0xF DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C63 DUP3 PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C87 DUP2 PUSH2 0x2C4B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F6E6578697374656E74207265717565737400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC4 PUSH1 0x13 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CCF DUP3 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF3 DUP2 PUSH2 0x2CB7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2D0F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x2D1C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2842 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D8C DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2DBE JUMPI PUSH2 0x2DBD PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DFE DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E10 DUP4 DUP4 PUSH2 0x2DF5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E34 DUP3 PUSH2 0x2DC9 JUMP JUMPDEST PUSH2 0x2E3E DUP2 DUP6 PUSH2 0x2DD4 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E49 DUP4 PUSH2 0x2DE5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E7A JUMPI DUP2 MLOAD PUSH2 0x2E61 DUP9 DUP3 PUSH2 0x2E04 JUMP JUMPDEST SWAP8 POP PUSH2 0x2E6C DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2E4D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2E9C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2842 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2EAE DUP2 DUP5 PUSH2 0x2E29 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2EEB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F02 DUP3 PUSH2 0x2EB7 JUMP JUMPDEST PUSH2 0x2F0C DUP2 DUP6 PUSH2 0x2EC2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2F1C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2ECD JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F34 DUP3 DUP5 PUSH2 0x2EF7 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F4A DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2F55 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2F6D JUMPI PUSH2 0x2F6C PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F7E DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2F89 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2F97 DUP2 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2FAE JUMPI PUSH2 0x2FAD PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC0 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2FCB DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2FE3 JUMPI PUSH2 0x2FE2 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FF4 DUP3 PUSH2 0x2701 JUMP JUMPDEST SWAP2 POP PUSH2 0x2FFF DUP4 PUSH2 0x2701 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3023 JUMPI PUSH2 0x3022 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x303E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x304B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2719 JUMP JUMPDEST PUSH2 0x3058 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BBA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x3075 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x3082 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x308F PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x22A9 JUMP JUMPDEST PUSH2 0x309C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x30A9 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x22C8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30E9 PUSH1 0x16 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x30F4 DUP3 PUSH2 0x30B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3118 DUP2 PUSH2 0x30DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3159 DUP3 PUSH2 0x23F1 JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3173 JUMPI PUSH2 0x3172 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3189 DUP3 PUSH2 0x2701 JUMP JUMPDEST SWAP2 POP PUSH2 0x3194 DUP4 PUSH2 0x2701 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31B8 JUMPI PUSH2 0x31B7 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E3 PUSH2 0x31DE PUSH2 0x31D9 DUP5 PUSH2 0x2701 JUMP JUMPDEST PUSH2 0x31BE JUMP JUMPDEST PUSH2 0x24CF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31F3 DUP2 PUSH2 0x31C8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x320E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x31EA JUMP JUMPDEST PUSH2 0x321B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x31EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3237 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x299F JUMP JUMPDEST PUSH2 0x3244 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x31EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3281 PUSH1 0x16 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x328C DUP3 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32B0 DUP2 PUSH2 0x3274 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32ED PUSH1 0x17 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x32F8 DUP3 PUSH2 0x32B7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x331C DUP2 PUSH2 0x32E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xE4 REVERT 0xC9 PC SWAP3 RETURNDATACOPY GASPRICE 0x22 0xDF 0xB8 DUP16 LOG0 SHL EXP 0xCC MOD LT 0x2F SWAP16 NOT SLT PUSH31 0x6AF59358BB01BAEB0C64736F6C634300081400330000000000000000000000 ","sourceMap":"311:9652:1:-:0;;;508:3;468:43;;;;;;;;;1623:1;1597:27;;1652:3;1628:27;;2045:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2111:10;327:8:2;345:1;557::3;537:22;;:8;:22;;;529:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;605:8;595:7;;:18;;;;;;;;;;;;;;;;;;647:1;623:26;;:12;:26;;;619:79;;659:32;678:12;659:18;;;:32;;:::i;:::-;619:79;471:231;;270:81:2;2140:8:1::1;2129:19;;;;;;;;::::0;::::1;2171:13;2154:30;;;;;;;;::::0;::::1;2190:11;:9;;;:11;;:::i;:::-;2045:161:::0;;311:9652;;1482:188:3;1550:10;1544:16;;:2;:16;;;1536:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1612:2;1595:14;;:19;;;;;;;;;;;;;;;;;;1662:2;1626:39;;1653:7;;;;;;;;;;1626:39;;;;;;;;;;;;1482:188;:::o;2288:113:1:-;1941:20:3;:18;;;:20;;:::i;:::-;2343:31:1::1;;;;;;;;2367:5;2343:31;;;;::::0;2332:8:::1;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2385:11;;;;;;;;;;2288:113::o:0;1715:111:3:-;1787:7;;;;;;;;;;1773:21;;:10;:21;;;1765:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1715:111::o;88:117:27:-;197:1;194;187:12;334:109;370:7;410:26;403:5;399:38;388:49;;334:109;;;:::o;449:120::-;521:23;538:5;521:23;:::i;:::-;514:5;511:34;501:62;;559:1;556;549:12;501:62;449:120;:::o;575:141::-;631:5;662:6;656:13;647:22;;678:32;704:5;678:32;:::i;:::-;575:141;;;;:::o;722:503::-;799:6;807;856:2;844:9;835:7;831:23;827:32;824:119;;;862:79;;:::i;:::-;824:119;982:1;1007:63;1062:7;1053:6;1042:9;1038:22;1007:63;:::i;:::-;997:73;;953:127;1119:2;1145:63;1200:7;1191:6;1180:9;1176:22;1145:63;:::i;:::-;1135:73;;1090:128;722:503;;;;;:::o;1231:169::-;1315:11;1349:6;1344:3;1337:19;1389:4;1384:3;1380:14;1365:29;;1231:169;;;;:::o;1406:174::-;1546:26;1542:1;1534:6;1530:14;1523:50;1406:174;:::o;1586:366::-;1728:3;1749:67;1813:2;1808:3;1749:67;:::i;:::-;1742:74;;1825:93;1914:3;1825:93;:::i;:::-;1943:2;1938:3;1934:12;1927:19;;1586:366;;;:::o;1958:419::-;2124:4;2162:2;2151:9;2147:18;2139:26;;2211:9;2205:4;2201:20;2197:1;2186:9;2182:17;2175:47;2239:131;2365:4;2239:131;:::i;:::-;2231:139;;1958:419;;;:::o;2383:173::-;2523:25;2519:1;2511:6;2507:14;2500:49;2383:173;:::o;2562:366::-;2704:3;2725:67;2789:2;2784:3;2725:67;:::i;:::-;2718:74;;2801:93;2890:3;2801:93;:::i;:::-;2919:2;2914:3;2910:12;2903:19;;2562:366;;;:::o;2934:419::-;3100:4;3138:2;3127:9;3123:18;3115:26;;3187:9;3181:4;3177:20;3173:1;3162:9;3158:17;3151:47;3215:131;3341:4;3215:131;:::i;:::-;3207:139;;2934:419;;;:::o;3359:172::-;3499:24;3495:1;3487:6;3483:14;3476:48;3359:172;:::o;3537:366::-;3679:3;3700:67;3764:2;3759:3;3700:67;:::i;:::-;3693:74;;3776:93;3865:3;3776:93;:::i;:::-;3894:2;3889:3;3885:12;3878:19;;3537:366;;;:::o;3909:419::-;4075:4;4113:2;4102:9;4098:18;4090:26;;4162:9;4156:4;4152:20;4148:1;4137:9;4133:17;4126:47;4190:131;4316:4;4190:131;:::i;:::-;4182:139;;3909:419;;;:::o;311:9652:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BASE_FEE_107":{"entryPoint":2725,"id":107,"parameterSlots":0,"returnSlots":0},"@GAS_PRICE_LINK_109":{"entryPoint":6362,"id":109,"parameterSlots":0,"returnSlots":0},"@MAX_CONSUMERS_112":{"entryPoint":3506,"id":112,"parameterSlots":0,"returnSlots":0},"@_transferOwnership_1185":{"entryPoint":8559,"id":1185,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_1198":{"entryPoint":8415,"id":1198,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_1151":{"entryPoint":4194,"id":1151,"parameterSlots":0,"returnSlots":0},"@acceptSubscriptionOwnerTransfer_1011":{"entryPoint":4761,"id":1011,"parameterSlots":1,"returnSlots":0},"@addConsumer_844":{"entryPoint":3542,"id":844,"parameterSlots":2,"returnSlots":0},"@cancelSubscription_747":{"entryPoint":7405,"id":747,"parameterSlots":2,"returnSlots":0},"@consumerIsAdded_315":{"entryPoint":8086,"id":315,"parameterSlots":2,"returnSlots":1},"@createSubscription_674":{"entryPoint":5919,"id":674,"parameterSlots":0,"returnSlots":1},"@fulfillRandomWordsWithOverride_529":{"entryPoint":1253,"id":529,"parameterSlots":3,"returnSlots":0},"@fulfillRandomWords_354":{"entryPoint":4599,"id":354,"parameterSlots":2,"returnSlots":0},"@fundSubscription_574":{"entryPoint":6915,"id":574,"parameterSlots":2,"returnSlots":0},"@getConfig_935":{"entryPoint":7373,"id":935,"parameterSlots":0,"returnSlots":4},"@getFallbackWeiPerUnitLink_987":{"entryPoint":2710,"id":987,"parameterSlots":0,"returnSlots":1},"@getFeeConfig_968":{"entryPoint":3443,"id":968,"parameterSlots":0,"returnSlots":9},"@getRequestConfig_802":{"entryPoint":1098,"id":802,"parameterSlots":0,"returnSlots":3},"@getSubscription_718":{"entryPoint":6398,"id":718,"parameterSlots":1,"returnSlots":4},"@owner_1161":{"entryPoint":4929,"id":1161,"parameterSlots":0,"returnSlots":1},"@pendingRequestExists_1024":{"entryPoint":8025,"id":1024,"parameterSlots":1,"returnSlots":1},"@removeConsumer_917":{"entryPoint":4970,"id":917,"parameterSlots":2,"returnSlots":0},"@requestRandomWords_646":{"entryPoint":2761,"id":646,"parameterSlots":5,"returnSlots":1},"@requestSubscriptionOwnerTransfer_1000":{"entryPoint":1194,"id":1000,"parameterSlots":2,"returnSlots":0},"@setConfig_272":{"entryPoint":4820,"id":272,"parameterSlots":0,"returnSlots":0},"@transferOwnership_1115":{"entryPoint":8395,"id":1115,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9671,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9338,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9776,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":10074,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint16":{"entryPoint":10118,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9456,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32":{"entryPoint":10162,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64":{"entryPoint":9244,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint96":{"entryPoint":11028,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":11236,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_uint64t_uint16t_uint32t_uint32":{"entryPoint":10183,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256t_address":{"entryPoint":10546,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_addresst_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9822,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint64":{"entryPoint":10610,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint64t_address":{"entryPoint":9359,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint64t_uint96":{"entryPoint":11049,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":10798,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_bytes32_to_t_bytes32":{"entryPoint":8988,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":11780,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":10783,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":10655,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":10835,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_bytes32_$dyn_memory_ptr_to_t_array$_t_bytes32_$dyn_memory_ptr_fromStack":{"entryPoint":9025,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":11817,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":11194,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":8973,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_int256_to_t_int256_fromStack":{"entryPoint":9943,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack":{"entryPoint":12508,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9_to_t_string_memory_ptr_fromStack":{"entryPoint":11339,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":12916,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0_to_t_string_memory_ptr_fromStack":{"entryPoint":11447,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":13024,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":8873,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint24_to_t_uint24_fromStack":{"entryPoint":10363,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":11765,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":10306,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":8904,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":10697,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint256_fromStack":{"entryPoint":12778,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint96_to_t_uint96_fromStack":{"entryPoint":10009,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":12072,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":10670,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12834,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":11209,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed":{"entryPoint":9958,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12543,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11374,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12951,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11482,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13059,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed":{"entryPoint":10519,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint32_t_array$_t_bytes32_$dyn_memory_ptr__to_t_uint16_t_uint32_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":9119,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint32_t_uint32_t_uint32__to_t_uint16_t_uint32_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":11113,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":10321,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":11911,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":11514,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint16_t_uint32_t_uint32__to_t_uint256_t_uint256_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":12384,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint96_t_bool__to_t_uint256_t_uint96_t_bool__fromStack_reversed":{"entryPoint":12329,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint32_t_uint32_t_uint32_t_uint32_t_uint24_t_uint24_t_uint24_t_uint24__to_t_uint32_t_uint32_t_uint32_t_uint32_t_uint32_t_uint24_t_uint24_t_uint24_t_uint24__fromStack_reversed":{"entryPoint":10378,"id":null,"parameterSlots":10,"returnSlots":1},"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed":{"entryPoint":10712,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed":{"entryPoint":10024,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint96_t_uint64_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_uint96_t_uint64_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10929,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint96_t_uint96__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":12793,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_memory":{"entryPoint":9595,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9181,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9622,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":10767,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":8947,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":11749,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":10739,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":8919,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":11721,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11959,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":10822,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_bytes32_$dyn_memory_ptr":{"entryPoint":9012,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":11804,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack":{"entryPoint":10750,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_bytes32_$dyn_memory_ptr_fromStack":{"entryPoint":8930,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack":{"entryPoint":11732,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11970,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":11281,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":12213,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint96":{"entryPoint":12670,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":12147,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":12095,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint96":{"entryPoint":12265,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":9297,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":11182,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":8963,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_int256":{"entryPoint":9933,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":8859,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9265,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint24":{"entryPoint":10348,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9423,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":8888,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":9201,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint96":{"entryPoint":9985,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint96_to_t_uint256":{"entryPoint":12744,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":11981,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":9546,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12734,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":11649,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint64":{"entryPoint":12622,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":11602,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":12575,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11555,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9499,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9477,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":9666,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9196,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9191,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9482,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c":{"entryPoint":12467,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9":{"entryPoint":11298,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":12875,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0":{"entryPoint":11406,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":12983,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9315,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":10051,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint16":{"entryPoint":10095,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9433,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":10139,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":9221,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint96":{"entryPoint":11005,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:31434:27","statements":[{"body":{"nodeType":"YulBlock","src":"51:45:27","statements":[{"nodeType":"YulAssignment","src":"61:29:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"76:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"83:6:27","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"72:3:27"},"nodeType":"YulFunctionCall","src":"72:18:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"61:7:27"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"43:7:27","type":""}],"src":"7:89:27"},{"body":{"nodeType":"YulBlock","src":"165:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"182:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"204:5:27"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"187:16:27"},"nodeType":"YulFunctionCall","src":"187:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"175:6:27"},"nodeType":"YulFunctionCall","src":"175:36:27"},"nodeType":"YulExpressionStatement","src":"175:36:27"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"153:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"160:3:27","type":""}],"src":"102:115:27"},{"body":{"nodeType":"YulBlock","src":"267:49:27","statements":[{"nodeType":"YulAssignment","src":"277:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"292:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"299:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"288:3:27"},"nodeType":"YulFunctionCall","src":"288:22:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"277:7:27"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"249:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"259:7:27","type":""}],"src":"223:93:27"},{"body":{"nodeType":"YulBlock","src":"385:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"402:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"424:5:27"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"407:16:27"},"nodeType":"YulFunctionCall","src":"407:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"395:6:27"},"nodeType":"YulFunctionCall","src":"395:36:27"},"nodeType":"YulExpressionStatement","src":"395:36:27"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"373:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"380:3:27","type":""}],"src":"322:115:27"},{"body":{"nodeType":"YulBlock","src":"517:40:27","statements":[{"nodeType":"YulAssignment","src":"528:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"544:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"538:5:27"},"nodeType":"YulFunctionCall","src":"538:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"528:6:27"}]}]},"name":"array_length_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"500:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"510:6:27","type":""}],"src":"443:114:27"},{"body":{"nodeType":"YulBlock","src":"674:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"691:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"696:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"684:6:27"},"nodeType":"YulFunctionCall","src":"684:19:27"},"nodeType":"YulExpressionStatement","src":"684:19:27"},{"nodeType":"YulAssignment","src":"712:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"731:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"736:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"727:3:27"},"nodeType":"YulFunctionCall","src":"727:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"712:11:27"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_bytes32_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"646:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"651:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"662:11:27","type":""}],"src":"563:184:27"},{"body":{"nodeType":"YulBlock","src":"825:60:27","statements":[{"nodeType":"YulAssignment","src":"835:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"843:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"835:4:27"}]},{"nodeType":"YulAssignment","src":"856:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"868:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"873:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"864:3:27"},"nodeType":"YulFunctionCall","src":"864:14:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"856:4:27"}]}]},"name":"array_dataslot_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"812:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"820:4:27","type":""}],"src":"753:132:27"},{"body":{"nodeType":"YulBlock","src":"936:32:27","statements":[{"nodeType":"YulAssignment","src":"946:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"957:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"946:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"918:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"928:7:27","type":""}],"src":"891:77:27"},{"body":{"nodeType":"YulBlock","src":"1029:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1046:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1069:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1051:17:27"},"nodeType":"YulFunctionCall","src":"1051:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1039:6:27"},"nodeType":"YulFunctionCall","src":"1039:37:27"},"nodeType":"YulExpressionStatement","src":"1039:37:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1017:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1024:3:27","type":""}],"src":"974:108:27"},{"body":{"nodeType":"YulBlock","src":"1168:99:27","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1212:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"1220:3:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"1178:33:27"},"nodeType":"YulFunctionCall","src":"1178:46:27"},"nodeType":"YulExpressionStatement","src":"1178:46:27"},{"nodeType":"YulAssignment","src":"1233:28:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1251:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1256:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1247:3:27"},"nodeType":"YulFunctionCall","src":"1247:14:27"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"1233:10:27"}]}]},"name":"abi_encodeUpdatedPos_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"1141:6:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1149:3:27","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"1157:10:27","type":""}],"src":"1088:179:27"},{"body":{"nodeType":"YulBlock","src":"1348:38:27","statements":[{"nodeType":"YulAssignment","src":"1358:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1370:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1375:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1366:3:27"},"nodeType":"YulFunctionCall","src":"1366:14:27"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"1358:4:27"}]}]},"name":"array_nextElement_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1335:3:27","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"1343:4:27","type":""}],"src":"1273:113:27"},{"body":{"nodeType":"YulBlock","src":"1546:608:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1556:68:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1618:5:27"}],"functionName":{"name":"array_length_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1570:47:27"},"nodeType":"YulFunctionCall","src":"1570:54:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1560:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1633:93:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1714:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1719:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_bytes32_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1640:73:27"},"nodeType":"YulFunctionCall","src":"1640:86:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1633:3:27"}]},{"nodeType":"YulVariableDeclaration","src":"1735:71:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1800:5:27"}],"functionName":{"name":"array_dataslot_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1750:49:27"},"nodeType":"YulFunctionCall","src":"1750:56:27"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"1739:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1815:21:27","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"1829:7:27"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"1819:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"1905:224:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1919:34:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"1946:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1940:5:27"},"nodeType":"YulFunctionCall","src":"1940:13:27"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"1923:13:27","type":""}]},{"nodeType":"YulAssignment","src":"1966:70:27","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"2017:13:27"},{"name":"pos","nodeType":"YulIdentifier","src":"2032:3:27"}],"functionName":{"name":"abi_encodeUpdatedPos_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"1973:43:27"},"nodeType":"YulFunctionCall","src":"1973:63:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1966:3:27"}]},{"nodeType":"YulAssignment","src":"2049:70:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2112:6:27"}],"functionName":{"name":"array_nextElement_t_array$_t_bytes32_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"2059:52:27"},"nodeType":"YulFunctionCall","src":"2059:60:27"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"2049:6:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1867:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"1870:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1864:2:27"},"nodeType":"YulFunctionCall","src":"1864:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1878:18:27","statements":[{"nodeType":"YulAssignment","src":"1880:14:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1889:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"1892:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1885:3:27"},"nodeType":"YulFunctionCall","src":"1885:9:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1880:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"1849:14:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1851:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1860:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1855:1:27","type":""}]}]},"src":"1845:284:27"},{"nodeType":"YulAssignment","src":"2138:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"2145:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2138:3:27"}]}]},"name":"abi_encode_t_array$_t_bytes32_$dyn_memory_ptr_to_t_array$_t_bytes32_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1525:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1532:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1541:3:27","type":""}],"src":"1422:732:27"},{"body":{"nodeType":"YulBlock","src":"2360:385:27","statements":[{"nodeType":"YulAssignment","src":"2370:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2382:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2393:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2378:3:27"},"nodeType":"YulFunctionCall","src":"2378:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2370:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2448:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2461:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2472:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2457:3:27"},"nodeType":"YulFunctionCall","src":"2457:17:27"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"2406:41:27"},"nodeType":"YulFunctionCall","src":"2406:69:27"},"nodeType":"YulExpressionStatement","src":"2406:69:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2527:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2540:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2551:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2536:3:27"},"nodeType":"YulFunctionCall","src":"2536:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"2485:41:27"},"nodeType":"YulFunctionCall","src":"2485:70:27"},"nodeType":"YulExpressionStatement","src":"2485:70:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2576:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2587:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2572:3:27"},"nodeType":"YulFunctionCall","src":"2572:18:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2596:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2602:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2592:3:27"},"nodeType":"YulFunctionCall","src":"2592:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2565:6:27"},"nodeType":"YulFunctionCall","src":"2565:48:27"},"nodeType":"YulExpressionStatement","src":"2565:48:27"},{"nodeType":"YulAssignment","src":"2622:116:27","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2724:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"2733:4:27"}],"functionName":{"name":"abi_encode_t_array$_t_bytes32_$dyn_memory_ptr_to_t_array$_t_bytes32_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2630:93:27"},"nodeType":"YulFunctionCall","src":"2630:108:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2622:4:27"}]}]},"name":"abi_encode_tuple_t_uint16_t_uint32_t_array$_t_bytes32_$dyn_memory_ptr__to_t_uint16_t_uint32_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2316:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2328:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2336:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2344:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2355:4:27","type":""}],"src":"2160:585:27"},{"body":{"nodeType":"YulBlock","src":"2791:35:27","statements":[{"nodeType":"YulAssignment","src":"2801:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2817:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2811:5:27"},"nodeType":"YulFunctionCall","src":"2811:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2801:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2784:6:27","type":""}],"src":"2751:75:27"},{"body":{"nodeType":"YulBlock","src":"2921:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2938:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2941:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2931:6:27"},"nodeType":"YulFunctionCall","src":"2931:12:27"},"nodeType":"YulExpressionStatement","src":"2931:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2832:117:27"},{"body":{"nodeType":"YulBlock","src":"3044:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3061:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3064:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3054:6:27"},"nodeType":"YulFunctionCall","src":"3054:12:27"},"nodeType":"YulExpressionStatement","src":"3054:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2955:117:27"},{"body":{"nodeType":"YulBlock","src":"3122:57:27","statements":[{"nodeType":"YulAssignment","src":"3132:41:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3147:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"3154:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3143:3:27"},"nodeType":"YulFunctionCall","src":"3143:30:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3132:7:27"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3104:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3114:7:27","type":""}],"src":"3078:101:27"},{"body":{"nodeType":"YulBlock","src":"3227:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"3283:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3295:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3285:6:27"},"nodeType":"YulFunctionCall","src":"3285:12:27"},"nodeType":"YulExpressionStatement","src":"3285:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3250:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3274:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3257:16:27"},"nodeType":"YulFunctionCall","src":"3257:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3247:2:27"},"nodeType":"YulFunctionCall","src":"3247:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3240:6:27"},"nodeType":"YulFunctionCall","src":"3240:42:27"},"nodeType":"YulIf","src":"3237:62:27"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3220:5:27","type":""}],"src":"3185:120:27"},{"body":{"nodeType":"YulBlock","src":"3362:86:27","statements":[{"nodeType":"YulAssignment","src":"3372:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3394:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3381:12:27"},"nodeType":"YulFunctionCall","src":"3381:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3372:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3436:5:27"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"3410:25:27"},"nodeType":"YulFunctionCall","src":"3410:32:27"},"nodeType":"YulExpressionStatement","src":"3410:32:27"}]},"name":"abi_decode_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3340:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"3348:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3356:5:27","type":""}],"src":"3311:137:27"},{"body":{"nodeType":"YulBlock","src":"3499:81:27","statements":[{"nodeType":"YulAssignment","src":"3509:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3524:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"3531:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3520:3:27"},"nodeType":"YulFunctionCall","src":"3520:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3509:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3481:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3491:7:27","type":""}],"src":"3454:126:27"},{"body":{"nodeType":"YulBlock","src":"3631:51:27","statements":[{"nodeType":"YulAssignment","src":"3641:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3670:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3652:17:27"},"nodeType":"YulFunctionCall","src":"3652:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3641:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3613:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3623:7:27","type":""}],"src":"3586:96:27"},{"body":{"nodeType":"YulBlock","src":"3731:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"3788:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3797:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3800:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3790:6:27"},"nodeType":"YulFunctionCall","src":"3790:12:27"},"nodeType":"YulExpressionStatement","src":"3790:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3754:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3779:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3761:17:27"},"nodeType":"YulFunctionCall","src":"3761:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3751:2:27"},"nodeType":"YulFunctionCall","src":"3751:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3744:6:27"},"nodeType":"YulFunctionCall","src":"3744:43:27"},"nodeType":"YulIf","src":"3741:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3724:5:27","type":""}],"src":"3688:122:27"},{"body":{"nodeType":"YulBlock","src":"3868:87:27","statements":[{"nodeType":"YulAssignment","src":"3878:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3900:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3887:12:27"},"nodeType":"YulFunctionCall","src":"3887:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3878:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3943:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"3916:26:27"},"nodeType":"YulFunctionCall","src":"3916:33:27"},"nodeType":"YulExpressionStatement","src":"3916:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3846:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"3854:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3862:5:27","type":""}],"src":"3816:139:27"},{"body":{"nodeType":"YulBlock","src":"4043:390:27","statements":[{"body":{"nodeType":"YulBlock","src":"4089:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4091:77:27"},"nodeType":"YulFunctionCall","src":"4091:79:27"},"nodeType":"YulExpressionStatement","src":"4091:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4064:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4073:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4060:3:27"},"nodeType":"YulFunctionCall","src":"4060:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4085:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4056:3:27"},"nodeType":"YulFunctionCall","src":"4056:32:27"},"nodeType":"YulIf","src":"4053:119:27"},{"nodeType":"YulBlock","src":"4182:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4197:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4211:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4201:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4226:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4260:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4271:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4256:3:27"},"nodeType":"YulFunctionCall","src":"4256:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4280:7:27"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"4236:19:27"},"nodeType":"YulFunctionCall","src":"4236:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4226:6:27"}]}]},{"nodeType":"YulBlock","src":"4308:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4323:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4337:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4327:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4353:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4388:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4399:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4384:3:27"},"nodeType":"YulFunctionCall","src":"4384:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4408:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4363:20:27"},"nodeType":"YulFunctionCall","src":"4363:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4353:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint64t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4005:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4016:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4028:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4036:6:27","type":""}],"src":"3961:472:27"},{"body":{"nodeType":"YulBlock","src":"4484:32:27","statements":[{"nodeType":"YulAssignment","src":"4494:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"4505:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4494:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4466:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4476:7:27","type":""}],"src":"4439:77:27"},{"body":{"nodeType":"YulBlock","src":"4565:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"4622:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4631:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4634:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4624:6:27"},"nodeType":"YulFunctionCall","src":"4624:12:27"},"nodeType":"YulExpressionStatement","src":"4624:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4588:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4613:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4595:17:27"},"nodeType":"YulFunctionCall","src":"4595:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4585:2:27"},"nodeType":"YulFunctionCall","src":"4585:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4578:6:27"},"nodeType":"YulFunctionCall","src":"4578:43:27"},"nodeType":"YulIf","src":"4575:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4558:5:27","type":""}],"src":"4522:122:27"},{"body":{"nodeType":"YulBlock","src":"4702:87:27","statements":[{"nodeType":"YulAssignment","src":"4712:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4734:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4721:12:27"},"nodeType":"YulFunctionCall","src":"4721:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4712:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4777:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"4750:26:27"},"nodeType":"YulFunctionCall","src":"4750:33:27"},"nodeType":"YulExpressionStatement","src":"4750:33:27"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4680:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"4688:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4696:5:27","type":""}],"src":"4650:139:27"},{"body":{"nodeType":"YulBlock","src":"4884:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4901:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4904:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4894:6:27"},"nodeType":"YulFunctionCall","src":"4894:12:27"},"nodeType":"YulExpressionStatement","src":"4894:12:27"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4795:117:27"},{"body":{"nodeType":"YulBlock","src":"4966:54:27","statements":[{"nodeType":"YulAssignment","src":"4976:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4994:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"5001:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4990:3:27"},"nodeType":"YulFunctionCall","src":"4990:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5010:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5006:3:27"},"nodeType":"YulFunctionCall","src":"5006:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4986:3:27"},"nodeType":"YulFunctionCall","src":"4986:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4976:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4949:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4959:6:27","type":""}],"src":"4918:102:27"},{"body":{"nodeType":"YulBlock","src":"5054:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5071:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5074:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5064:6:27"},"nodeType":"YulFunctionCall","src":"5064:88:27"},"nodeType":"YulExpressionStatement","src":"5064:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5168:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5171:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5161:6:27"},"nodeType":"YulFunctionCall","src":"5161:15:27"},"nodeType":"YulExpressionStatement","src":"5161:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5192:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5195:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5185:6:27"},"nodeType":"YulFunctionCall","src":"5185:15:27"},"nodeType":"YulExpressionStatement","src":"5185:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5026:180:27"},{"body":{"nodeType":"YulBlock","src":"5255:238:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5265:58:27","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5287:6:27"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5317:4:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5295:21:27"},"nodeType":"YulFunctionCall","src":"5295:27:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5283:3:27"},"nodeType":"YulFunctionCall","src":"5283:40:27"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5269:10:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"5434:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5436:16:27"},"nodeType":"YulFunctionCall","src":"5436:18:27"},"nodeType":"YulExpressionStatement","src":"5436:18:27"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5377:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"5389:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5374:2:27"},"nodeType":"YulFunctionCall","src":"5374:34:27"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5413:10:27"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5425:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5410:2:27"},"nodeType":"YulFunctionCall","src":"5410:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5371:2:27"},"nodeType":"YulFunctionCall","src":"5371:62:27"},"nodeType":"YulIf","src":"5368:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5472:2:27","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5476:10:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5465:6:27"},"nodeType":"YulFunctionCall","src":"5465:22:27"},"nodeType":"YulExpressionStatement","src":"5465:22:27"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5241:6:27","type":""},{"name":"size","nodeType":"YulTypedName","src":"5249:4:27","type":""}],"src":"5212:281:27"},{"body":{"nodeType":"YulBlock","src":"5540:88:27","statements":[{"nodeType":"YulAssignment","src":"5550:30:27","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5560:18:27"},"nodeType":"YulFunctionCall","src":"5560:20:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5550:6:27"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5609:6:27"},{"name":"size","nodeType":"YulIdentifier","src":"5617:4:27"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5589:19:27"},"nodeType":"YulFunctionCall","src":"5589:33:27"},"nodeType":"YulExpressionStatement","src":"5589:33:27"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5524:4:27","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5533:6:27","type":""}],"src":"5499:129:27"},{"body":{"nodeType":"YulBlock","src":"5716:229:27","statements":[{"body":{"nodeType":"YulBlock","src":"5821:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5823:16:27"},"nodeType":"YulFunctionCall","src":"5823:18:27"},"nodeType":"YulExpressionStatement","src":"5823:18:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5793:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5801:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5790:2:27"},"nodeType":"YulFunctionCall","src":"5790:30:27"},"nodeType":"YulIf","src":"5787:56:27"},{"nodeType":"YulAssignment","src":"5853:25:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5865:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5873:4:27","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5861:3:27"},"nodeType":"YulFunctionCall","src":"5861:17:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5853:4:27"}]},{"nodeType":"YulAssignment","src":"5915:23:27","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5927:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"5933:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5923:3:27"},"nodeType":"YulFunctionCall","src":"5923:15:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5915:4:27"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5700:6:27","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5711:4:27","type":""}],"src":"5634:311:27"},{"body":{"nodeType":"YulBlock","src":"6040:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6057:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6060:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6050:6:27"},"nodeType":"YulFunctionCall","src":"6050:12:27"},"nodeType":"YulExpressionStatement","src":"6050:12:27"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"5951:117:27"},{"body":{"nodeType":"YulBlock","src":"6193:608:27","statements":[{"nodeType":"YulAssignment","src":"6203:90:27","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6285:6:27"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"6228:56:27"},"nodeType":"YulFunctionCall","src":"6228:64:27"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6212:15:27"},"nodeType":"YulFunctionCall","src":"6212:81:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6203:5:27"}]},{"nodeType":"YulVariableDeclaration","src":"6302:16:27","value":{"name":"array","nodeType":"YulIdentifier","src":"6313:5:27"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6306:3:27","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6335:5:27"},{"name":"length","nodeType":"YulIdentifier","src":"6342:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6328:6:27"},"nodeType":"YulFunctionCall","src":"6328:21:27"},"nodeType":"YulExpressionStatement","src":"6328:21:27"},{"nodeType":"YulAssignment","src":"6358:23:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6369:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"6376:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6365:3:27"},"nodeType":"YulFunctionCall","src":"6365:16:27"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6358:3:27"}]},{"nodeType":"YulVariableDeclaration","src":"6391:44:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6409:6:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6421:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6429:4:27","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6417:3:27"},"nodeType":"YulFunctionCall","src":"6417:17:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6405:3:27"},"nodeType":"YulFunctionCall","src":"6405:30:27"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6395:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"6463:103:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6477:77:27"},"nodeType":"YulFunctionCall","src":"6477:79:27"},"nodeType":"YulExpressionStatement","src":"6477:79:27"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6450:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"6458:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6447:2:27"},"nodeType":"YulFunctionCall","src":"6447:15:27"},"nodeType":"YulIf","src":"6444:122:27"},{"body":{"nodeType":"YulBlock","src":"6651:144:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6666:21:27","value":{"name":"src","nodeType":"YulIdentifier","src":"6684:3:27"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"6670:10:27","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6708:3:27"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"6734:10:27"},{"name":"end","nodeType":"YulIdentifier","src":"6746:3:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6713:20:27"},"nodeType":"YulFunctionCall","src":"6713:37:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6701:6:27"},"nodeType":"YulFunctionCall","src":"6701:50:27"},"nodeType":"YulExpressionStatement","src":"6701:50:27"},{"nodeType":"YulAssignment","src":"6764:21:27","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6775:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"6780:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6771:3:27"},"nodeType":"YulFunctionCall","src":"6771:14:27"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6764:3:27"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6604:3:27"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6609:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6601:2:27"},"nodeType":"YulFunctionCall","src":"6601:15:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6617:25:27","statements":[{"nodeType":"YulAssignment","src":"6619:21:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6630:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"6635:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6626:3:27"},"nodeType":"YulFunctionCall","src":"6626:14:27"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6619:3:27"}]}]},"pre":{"nodeType":"YulBlock","src":"6579:21:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6581:17:27","value":{"name":"offset","nodeType":"YulIdentifier","src":"6592:6:27"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6585:3:27","type":""}]}]},"src":"6575:220:27"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6163:6:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"6171:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"6179:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6187:5:27","type":""}],"src":"6091:710:27"},{"body":{"nodeType":"YulBlock","src":"6901:293:27","statements":[{"body":{"nodeType":"YulBlock","src":"6950:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6952:77:27"},"nodeType":"YulFunctionCall","src":"6952:79:27"},"nodeType":"YulExpressionStatement","src":"6952:79:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6929:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6937:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6925:3:27"},"nodeType":"YulFunctionCall","src":"6925:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"6944:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6921:3:27"},"nodeType":"YulFunctionCall","src":"6921:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6914:6:27"},"nodeType":"YulFunctionCall","src":"6914:35:27"},"nodeType":"YulIf","src":"6911:122:27"},{"nodeType":"YulVariableDeclaration","src":"7042:34:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7069:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7056:12:27"},"nodeType":"YulFunctionCall","src":"7056:20:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7046:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7085:103:27","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7161:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7169:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7157:3:27"},"nodeType":"YulFunctionCall","src":"7157:17:27"},{"name":"length","nodeType":"YulIdentifier","src":"7176:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"7184:3:27"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7094:62:27"},"nodeType":"YulFunctionCall","src":"7094:94:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7085:5:27"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6879:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"6887:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6895:5:27","type":""}],"src":"6824:370:27"},{"body":{"nodeType":"YulBlock","src":"7325:704:27","statements":[{"body":{"nodeType":"YulBlock","src":"7371:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7373:77:27"},"nodeType":"YulFunctionCall","src":"7373:79:27"},"nodeType":"YulExpressionStatement","src":"7373:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7346:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7355:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7342:3:27"},"nodeType":"YulFunctionCall","src":"7342:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"7367:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7338:3:27"},"nodeType":"YulFunctionCall","src":"7338:32:27"},"nodeType":"YulIf","src":"7335:119:27"},{"nodeType":"YulBlock","src":"7464:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7479:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7493:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7483:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7508:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7543:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7554:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7539:3:27"},"nodeType":"YulFunctionCall","src":"7539:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7563:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7518:20:27"},"nodeType":"YulFunctionCall","src":"7518:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7508:6:27"}]}]},{"nodeType":"YulBlock","src":"7591:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7606:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7620:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7610:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7636:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7671:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7682:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7667:3:27"},"nodeType":"YulFunctionCall","src":"7667:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7691:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7646:20:27"},"nodeType":"YulFunctionCall","src":"7646:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7636:6:27"}]}]},{"nodeType":"YulBlock","src":"7719:303:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7734:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7765:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7776:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7761:3:27"},"nodeType":"YulFunctionCall","src":"7761:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7748:12:27"},"nodeType":"YulFunctionCall","src":"7748:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7738:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"7827:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7829:77:27"},"nodeType":"YulFunctionCall","src":"7829:79:27"},"nodeType":"YulExpressionStatement","src":"7829:79:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7799:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7807:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7796:2:27"},"nodeType":"YulFunctionCall","src":"7796:30:27"},"nodeType":"YulIf","src":"7793:117:27"},{"nodeType":"YulAssignment","src":"7924:88:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7984:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7995:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7980:3:27"},"nodeType":"YulFunctionCall","src":"7980:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8004:7:27"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7934:45:27"},"nodeType":"YulFunctionCall","src":"7934:78:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7924:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256t_addresst_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7279:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7290:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7302:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7310:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7318:6:27","type":""}],"src":"7200:829:27"},{"body":{"nodeType":"YulBlock","src":"8079:32:27","statements":[{"nodeType":"YulAssignment","src":"8089:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"8100:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8089:7:27"}]}]},"name":"cleanup_t_int256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8061:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8071:7:27","type":""}],"src":"8035:76:27"},{"body":{"nodeType":"YulBlock","src":"8180:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8197:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8219:5:27"}],"functionName":{"name":"cleanup_t_int256","nodeType":"YulIdentifier","src":"8202:16:27"},"nodeType":"YulFunctionCall","src":"8202:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8190:6:27"},"nodeType":"YulFunctionCall","src":"8190:36:27"},"nodeType":"YulExpressionStatement","src":"8190:36:27"}]},"name":"abi_encode_t_int256_to_t_int256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8168:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8175:3:27","type":""}],"src":"8117:115:27"},{"body":{"nodeType":"YulBlock","src":"8334:122:27","statements":[{"nodeType":"YulAssignment","src":"8344:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8356:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8367:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8352:3:27"},"nodeType":"YulFunctionCall","src":"8352:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8344:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8422:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8435:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8446:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8431:3:27"},"nodeType":"YulFunctionCall","src":"8431:17:27"}],"functionName":{"name":"abi_encode_t_int256_to_t_int256_fromStack","nodeType":"YulIdentifier","src":"8380:41:27"},"nodeType":"YulFunctionCall","src":"8380:69:27"},"nodeType":"YulExpressionStatement","src":"8380:69:27"}]},"name":"abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8306:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8318:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8329:4:27","type":""}],"src":"8238:218:27"},{"body":{"nodeType":"YulBlock","src":"8506:65:27","statements":[{"nodeType":"YulAssignment","src":"8516:49:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8531:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"8538:26:27","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8527:3:27"},"nodeType":"YulFunctionCall","src":"8527:38:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8516:7:27"}]}]},"name":"cleanup_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8488:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8498:7:27","type":""}],"src":"8462:109:27"},{"body":{"nodeType":"YulBlock","src":"8640:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8657:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8679:5:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"8662:16:27"},"nodeType":"YulFunctionCall","src":"8662:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8650:6:27"},"nodeType":"YulFunctionCall","src":"8650:36:27"},"nodeType":"YulExpressionStatement","src":"8650:36:27"}]},"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8628:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8635:3:27","type":""}],"src":"8577:115:27"},{"body":{"nodeType":"YulBlock","src":"8794:122:27","statements":[{"nodeType":"YulAssignment","src":"8804:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8816:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8827:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8812:3:27"},"nodeType":"YulFunctionCall","src":"8812:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8804:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8882:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8895:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8906:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8891:3:27"},"nodeType":"YulFunctionCall","src":"8891:17:27"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"8840:41:27"},"nodeType":"YulFunctionCall","src":"8840:69:27"},"nodeType":"YulExpressionStatement","src":"8840:69:27"}]},"name":"abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8766:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8778:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8789:4:27","type":""}],"src":"8698:218:27"},{"body":{"nodeType":"YulBlock","src":"8965:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"9022:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9031:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9034:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9024:6:27"},"nodeType":"YulFunctionCall","src":"9024:12:27"},"nodeType":"YulExpressionStatement","src":"9024:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8988:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9013:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"8995:17:27"},"nodeType":"YulFunctionCall","src":"8995:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8985:2:27"},"nodeType":"YulFunctionCall","src":"8985:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8978:6:27"},"nodeType":"YulFunctionCall","src":"8978:43:27"},"nodeType":"YulIf","src":"8975:63:27"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8958:5:27","type":""}],"src":"8922:122:27"},{"body":{"nodeType":"YulBlock","src":"9102:87:27","statements":[{"nodeType":"YulAssignment","src":"9112:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9134:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9121:12:27"},"nodeType":"YulFunctionCall","src":"9121:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9112:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9177:5:27"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"9150:26:27"},"nodeType":"YulFunctionCall","src":"9150:33:27"},"nodeType":"YulExpressionStatement","src":"9150:33:27"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9080:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"9088:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9096:5:27","type":""}],"src":"9050:139:27"},{"body":{"nodeType":"YulBlock","src":"9237:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"9293:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9302:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9305:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9295:6:27"},"nodeType":"YulFunctionCall","src":"9295:12:27"},"nodeType":"YulExpressionStatement","src":"9295:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9260:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9284:5:27"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"9267:16:27"},"nodeType":"YulFunctionCall","src":"9267:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9257:2:27"},"nodeType":"YulFunctionCall","src":"9257:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9250:6:27"},"nodeType":"YulFunctionCall","src":"9250:42:27"},"nodeType":"YulIf","src":"9247:62:27"}]},"name":"validator_revert_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9230:5:27","type":""}],"src":"9195:120:27"},{"body":{"nodeType":"YulBlock","src":"9372:86:27","statements":[{"nodeType":"YulAssignment","src":"9382:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9404:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9391:12:27"},"nodeType":"YulFunctionCall","src":"9391:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9382:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9446:5:27"}],"functionName":{"name":"validator_revert_t_uint16","nodeType":"YulIdentifier","src":"9420:25:27"},"nodeType":"YulFunctionCall","src":"9420:32:27"},"nodeType":"YulExpressionStatement","src":"9420:32:27"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9350:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"9358:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9366:5:27","type":""}],"src":"9321:137:27"},{"body":{"nodeType":"YulBlock","src":"9506:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"9562:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9571:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9574:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9564:6:27"},"nodeType":"YulFunctionCall","src":"9564:12:27"},"nodeType":"YulExpressionStatement","src":"9564:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9529:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9553:5:27"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"9536:16:27"},"nodeType":"YulFunctionCall","src":"9536:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9526:2:27"},"nodeType":"YulFunctionCall","src":"9526:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9519:6:27"},"nodeType":"YulFunctionCall","src":"9519:42:27"},"nodeType":"YulIf","src":"9516:62:27"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9499:5:27","type":""}],"src":"9464:120:27"},{"body":{"nodeType":"YulBlock","src":"9641:86:27","statements":[{"nodeType":"YulAssignment","src":"9651:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9673:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9660:12:27"},"nodeType":"YulFunctionCall","src":"9660:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9651:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9715:5:27"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"9689:25:27"},"nodeType":"YulFunctionCall","src":"9689:32:27"},"nodeType":"YulExpressionStatement","src":"9689:32:27"}]},"name":"abi_decode_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9619:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"9627:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"9635:5:27","type":""}],"src":"9590:137:27"},{"body":{"nodeType":"YulBlock","src":"9863:773:27","statements":[{"body":{"nodeType":"YulBlock","src":"9910:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9912:77:27"},"nodeType":"YulFunctionCall","src":"9912:79:27"},"nodeType":"YulExpressionStatement","src":"9912:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9884:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"9893:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9880:3:27"},"nodeType":"YulFunctionCall","src":"9880:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"9905:3:27","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9876:3:27"},"nodeType":"YulFunctionCall","src":"9876:33:27"},"nodeType":"YulIf","src":"9873:120:27"},{"nodeType":"YulBlock","src":"10003:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10018:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10032:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10022:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10047:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10082:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10093:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10078:3:27"},"nodeType":"YulFunctionCall","src":"10078:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10102:7:27"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"10057:20:27"},"nodeType":"YulFunctionCall","src":"10057:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10047:6:27"}]}]},{"nodeType":"YulBlock","src":"10130:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10145:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10159:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10149:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10175:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10209:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10220:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10205:3:27"},"nodeType":"YulFunctionCall","src":"10205:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10229:7:27"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"10185:19:27"},"nodeType":"YulFunctionCall","src":"10185:52:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10175:6:27"}]}]},{"nodeType":"YulBlock","src":"10257:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10272:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10286:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10276:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10302:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10336:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10347:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10332:3:27"},"nodeType":"YulFunctionCall","src":"10332:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10356:7:27"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"10312:19:27"},"nodeType":"YulFunctionCall","src":"10312:52:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"10302:6:27"}]}]},{"nodeType":"YulBlock","src":"10384:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10399:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10413:2:27","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10403:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10429:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10463:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10474:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10459:3:27"},"nodeType":"YulFunctionCall","src":"10459:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10483:7:27"}],"functionName":{"name":"abi_decode_t_uint32","nodeType":"YulIdentifier","src":"10439:19:27"},"nodeType":"YulFunctionCall","src":"10439:52:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"10429:6:27"}]}]},{"nodeType":"YulBlock","src":"10511:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10526:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10540:3:27","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10530:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10557:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10591:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10602:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10587:3:27"},"nodeType":"YulFunctionCall","src":"10587:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10611:7:27"}],"functionName":{"name":"abi_decode_t_uint32","nodeType":"YulIdentifier","src":"10567:19:27"},"nodeType":"YulFunctionCall","src":"10567:52:27"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"10557:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint64t_uint16t_uint32t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9801:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9812:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9824:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9832:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9840:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9848:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"9856:6:27","type":""}],"src":"9733:903:27"},{"body":{"nodeType":"YulBlock","src":"10707:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10724:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10747:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10729:17:27"},"nodeType":"YulFunctionCall","src":"10729:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10717:6:27"},"nodeType":"YulFunctionCall","src":"10717:37:27"},"nodeType":"YulExpressionStatement","src":"10717:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10695:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10702:3:27","type":""}],"src":"10642:118:27"},{"body":{"nodeType":"YulBlock","src":"10864:124:27","statements":[{"nodeType":"YulAssignment","src":"10874:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10886:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10897:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10882:3:27"},"nodeType":"YulFunctionCall","src":"10882:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10874:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10954:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10967:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10978:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10963:3:27"},"nodeType":"YulFunctionCall","src":"10963:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10910:43:27"},"nodeType":"YulFunctionCall","src":"10910:71:27"},"nodeType":"YulExpressionStatement","src":"10910:71:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10836:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10848:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10859:4:27","type":""}],"src":"10766:222:27"},{"body":{"nodeType":"YulBlock","src":"11038:47:27","statements":[{"nodeType":"YulAssignment","src":"11048:31:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11063:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"11070:8:27","type":"","value":"0xffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11059:3:27"},"nodeType":"YulFunctionCall","src":"11059:20:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11048:7:27"}]}]},"name":"cleanup_t_uint24","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11020:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11030:7:27","type":""}],"src":"10994:91:27"},{"body":{"nodeType":"YulBlock","src":"11154:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11171:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11193:5:27"}],"functionName":{"name":"cleanup_t_uint24","nodeType":"YulIdentifier","src":"11176:16:27"},"nodeType":"YulFunctionCall","src":"11176:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11164:6:27"},"nodeType":"YulFunctionCall","src":"11164:36:27"},"nodeType":"YulExpressionStatement","src":"11164:36:27"}]},"name":"abi_encode_t_uint24_to_t_uint24_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11142:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11149:3:27","type":""}],"src":"11091:115:27"},{"body":{"nodeType":"YulBlock","src":"11516:768:27","statements":[{"nodeType":"YulAssignment","src":"11526:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11538:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11549:3:27","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11534:3:27"},"nodeType":"YulFunctionCall","src":"11534:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11526:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11605:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11618:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11629:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11614:3:27"},"nodeType":"YulFunctionCall","src":"11614:17:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"11563:41:27"},"nodeType":"YulFunctionCall","src":"11563:69:27"},"nodeType":"YulExpressionStatement","src":"11563:69:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11684:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11697:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11708:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11693:3:27"},"nodeType":"YulFunctionCall","src":"11693:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"11642:41:27"},"nodeType":"YulFunctionCall","src":"11642:70:27"},"nodeType":"YulExpressionStatement","src":"11642:70:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11764:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11777:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11788:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11773:3:27"},"nodeType":"YulFunctionCall","src":"11773:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"11722:41:27"},"nodeType":"YulFunctionCall","src":"11722:70:27"},"nodeType":"YulExpressionStatement","src":"11722:70:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11844:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11857:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11868:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11853:3:27"},"nodeType":"YulFunctionCall","src":"11853:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"11802:41:27"},"nodeType":"YulFunctionCall","src":"11802:70:27"},"nodeType":"YulExpressionStatement","src":"11802:70:27"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"11924:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11937:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11948:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11933:3:27"},"nodeType":"YulFunctionCall","src":"11933:19:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"11882:41:27"},"nodeType":"YulFunctionCall","src":"11882:71:27"},"nodeType":"YulExpressionStatement","src":"11882:71:27"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"12005:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12018:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12029:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12014:3:27"},"nodeType":"YulFunctionCall","src":"12014:19:27"}],"functionName":{"name":"abi_encode_t_uint24_to_t_uint24_fromStack","nodeType":"YulIdentifier","src":"11963:41:27"},"nodeType":"YulFunctionCall","src":"11963:71:27"},"nodeType":"YulExpressionStatement","src":"11963:71:27"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"12086:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12099:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12110:3:27","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12095:3:27"},"nodeType":"YulFunctionCall","src":"12095:19:27"}],"functionName":{"name":"abi_encode_t_uint24_to_t_uint24_fromStack","nodeType":"YulIdentifier","src":"12044:41:27"},"nodeType":"YulFunctionCall","src":"12044:71:27"},"nodeType":"YulExpressionStatement","src":"12044:71:27"},{"expression":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"12167:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12180:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12191:3:27","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12176:3:27"},"nodeType":"YulFunctionCall","src":"12176:19:27"}],"functionName":{"name":"abi_encode_t_uint24_to_t_uint24_fromStack","nodeType":"YulIdentifier","src":"12125:41:27"},"nodeType":"YulFunctionCall","src":"12125:71:27"},"nodeType":"YulExpressionStatement","src":"12125:71:27"},{"expression":{"arguments":[{"name":"value8","nodeType":"YulIdentifier","src":"12248:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12261:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12272:3:27","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12257:3:27"},"nodeType":"YulFunctionCall","src":"12257:19:27"}],"functionName":{"name":"abi_encode_t_uint24_to_t_uint24_fromStack","nodeType":"YulIdentifier","src":"12206:41:27"},"nodeType":"YulFunctionCall","src":"12206:71:27"},"nodeType":"YulExpressionStatement","src":"12206:71:27"}]},"name":"abi_encode_tuple_t_uint32_t_uint32_t_uint32_t_uint32_t_uint32_t_uint24_t_uint24_t_uint24_t_uint24__to_t_uint32_t_uint32_t_uint32_t_uint32_t_uint32_t_uint24_t_uint24_t_uint24_t_uint24__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11424:9:27","type":""},{"name":"value8","nodeType":"YulTypedName","src":"11436:6:27","type":""},{"name":"value7","nodeType":"YulTypedName","src":"11444:6:27","type":""},{"name":"value6","nodeType":"YulTypedName","src":"11452:6:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11460:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11468:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11476:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11484:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11492:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11500:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11511:4:27","type":""}],"src":"11212:1072:27"},{"body":{"nodeType":"YulBlock","src":"12386:122:27","statements":[{"nodeType":"YulAssignment","src":"12396:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12408:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12419:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12404:3:27"},"nodeType":"YulFunctionCall","src":"12404:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12396:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12474:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12487:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12498:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12483:3:27"},"nodeType":"YulFunctionCall","src":"12483:17:27"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"12432:41:27"},"nodeType":"YulFunctionCall","src":"12432:69:27"},"nodeType":"YulExpressionStatement","src":"12432:69:27"}]},"name":"abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12358:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12370:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12381:4:27","type":""}],"src":"12290:218:27"},{"body":{"nodeType":"YulBlock","src":"12597:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"12643:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12645:77:27"},"nodeType":"YulFunctionCall","src":"12645:79:27"},"nodeType":"YulExpressionStatement","src":"12645:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12618:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"12627:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12614:3:27"},"nodeType":"YulFunctionCall","src":"12614:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"12639:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12610:3:27"},"nodeType":"YulFunctionCall","src":"12610:32:27"},"nodeType":"YulIf","src":"12607:119:27"},{"nodeType":"YulBlock","src":"12736:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12751:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12765:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12755:6:27","type":""}]},{"nodeType":"YulAssignment","src":"12780:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12815:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"12826:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12811:3:27"},"nodeType":"YulFunctionCall","src":"12811:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12835:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"12790:20:27"},"nodeType":"YulFunctionCall","src":"12790:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12780:6:27"}]}]},{"nodeType":"YulBlock","src":"12863:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12878:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12892:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12882:6:27","type":""}]},{"nodeType":"YulAssignment","src":"12908:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12943:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"12954:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12939:3:27"},"nodeType":"YulFunctionCall","src":"12939:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12963:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12918:20:27"},"nodeType":"YulFunctionCall","src":"12918:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12908:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12559:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12570:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12582:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12590:6:27","type":""}],"src":"12514:474:27"},{"body":{"nodeType":"YulBlock","src":"13059:262:27","statements":[{"body":{"nodeType":"YulBlock","src":"13105:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13107:77:27"},"nodeType":"YulFunctionCall","src":"13107:79:27"},"nodeType":"YulExpressionStatement","src":"13107:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13080:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"13089:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13076:3:27"},"nodeType":"YulFunctionCall","src":"13076:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"13101:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13072:3:27"},"nodeType":"YulFunctionCall","src":"13072:32:27"},"nodeType":"YulIf","src":"13069:119:27"},{"nodeType":"YulBlock","src":"13198:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"13213:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"13227:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13217:6:27","type":""}]},{"nodeType":"YulAssignment","src":"13242:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13276:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"13287:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13272:3:27"},"nodeType":"YulFunctionCall","src":"13272:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13296:7:27"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"13252:19:27"},"nodeType":"YulFunctionCall","src":"13252:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13242:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13029:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13040:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13052:6:27","type":""}],"src":"12994:327:27"},{"body":{"nodeType":"YulBlock","src":"13392:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13409:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13432:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"13414:17:27"},"nodeType":"YulFunctionCall","src":"13414:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13402:6:27"},"nodeType":"YulFunctionCall","src":"13402:37:27"},"nodeType":"YulExpressionStatement","src":"13402:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13380:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13387:3:27","type":""}],"src":"13327:118:27"},{"body":{"nodeType":"YulBlock","src":"13549:124:27","statements":[{"nodeType":"YulAssignment","src":"13559:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13571:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13582:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13567:3:27"},"nodeType":"YulFunctionCall","src":"13567:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13559:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13639:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13652:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13663:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13648:3:27"},"nodeType":"YulFunctionCall","src":"13648:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13595:43:27"},"nodeType":"YulFunctionCall","src":"13595:71:27"},"nodeType":"YulExpressionStatement","src":"13595:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13521:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13533:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13544:4:27","type":""}],"src":"13451:222:27"},{"body":{"nodeType":"YulBlock","src":"13742:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13759:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13781:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"13764:16:27"},"nodeType":"YulFunctionCall","src":"13764:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13752:6:27"},"nodeType":"YulFunctionCall","src":"13752:36:27"},"nodeType":"YulExpressionStatement","src":"13752:36:27"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13730:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13737:3:27","type":""}],"src":"13679:115:27"},{"body":{"nodeType":"YulBlock","src":"13896:122:27","statements":[{"nodeType":"YulAssignment","src":"13906:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13918:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13929:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13914:3:27"},"nodeType":"YulFunctionCall","src":"13914:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13906:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13984:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13997:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"14008:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13993:3:27"},"nodeType":"YulFunctionCall","src":"13993:17:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"13942:41:27"},"nodeType":"YulFunctionCall","src":"13942:69:27"},"nodeType":"YulExpressionStatement","src":"13942:69:27"}]},"name":"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13868:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13880:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13891:4:27","type":""}],"src":"13800:218:27"},{"body":{"nodeType":"YulBlock","src":"14098:40:27","statements":[{"nodeType":"YulAssignment","src":"14109:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14125:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14119:5:27"},"nodeType":"YulFunctionCall","src":"14119:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"14109:6:27"}]}]},"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14081:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"14091:6:27","type":""}],"src":"14024:114:27"},{"body":{"nodeType":"YulBlock","src":"14255:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14272:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"14277:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14265:6:27"},"nodeType":"YulFunctionCall","src":"14265:19:27"},"nodeType":"YulExpressionStatement","src":"14265:19:27"},{"nodeType":"YulAssignment","src":"14293:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14312:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14317:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14308:3:27"},"nodeType":"YulFunctionCall","src":"14308:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"14293:11:27"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14227:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"14232:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"14243:11:27","type":""}],"src":"14144:184:27"},{"body":{"nodeType":"YulBlock","src":"14406:60:27","statements":[{"nodeType":"YulAssignment","src":"14416:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"14424:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"14416:4:27"}]},{"nodeType":"YulAssignment","src":"14437:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"14449:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14454:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14445:3:27"},"nodeType":"YulFunctionCall","src":"14445:14:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"14437:4:27"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"14393:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"14401:4:27","type":""}],"src":"14334:132:27"},{"body":{"nodeType":"YulBlock","src":"14527:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14544:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14567:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"14549:17:27"},"nodeType":"YulFunctionCall","src":"14549:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14537:6:27"},"nodeType":"YulFunctionCall","src":"14537:37:27"},"nodeType":"YulExpressionStatement","src":"14537:37:27"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"14515:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14522:3:27","type":""}],"src":"14472:108:27"},{"body":{"nodeType":"YulBlock","src":"14666:99:27","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14710:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"14718:3:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"14676:33:27"},"nodeType":"YulFunctionCall","src":"14676:46:27"},"nodeType":"YulExpressionStatement","src":"14676:46:27"},{"nodeType":"YulAssignment","src":"14731:28:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14749:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14754:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14745:3:27"},"nodeType":"YulFunctionCall","src":"14745:14:27"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"14731:10:27"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"14639:6:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"14647:3:27","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"14655:10:27","type":""}],"src":"14586:179:27"},{"body":{"nodeType":"YulBlock","src":"14846:38:27","statements":[{"nodeType":"YulAssignment","src":"14856:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"14868:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"14873:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14864:3:27"},"nodeType":"YulFunctionCall","src":"14864:14:27"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"14856:4:27"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"14833:3:27","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"14841:4:27","type":""}],"src":"14771:113:27"},{"body":{"nodeType":"YulBlock","src":"15044:608:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15054:68:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15116:5:27"}],"functionName":{"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"15068:47:27"},"nodeType":"YulFunctionCall","src":"15068:54:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"15058:6:27","type":""}]},{"nodeType":"YulAssignment","src":"15131:93:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15212:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"15217:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15138:73:27"},"nodeType":"YulFunctionCall","src":"15138:86:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15131:3:27"}]},{"nodeType":"YulVariableDeclaration","src":"15233:71:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15298:5:27"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"15248:49:27"},"nodeType":"YulFunctionCall","src":"15248:56:27"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"15237:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15313:21:27","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"15327:7:27"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"15317:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"15403:224:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15417:34:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15444:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15438:5:27"},"nodeType":"YulFunctionCall","src":"15438:13:27"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"15421:13:27","type":""}]},{"nodeType":"YulAssignment","src":"15464:70:27","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"15515:13:27"},{"name":"pos","nodeType":"YulIdentifier","src":"15530:3:27"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulIdentifier","src":"15471:43:27"},"nodeType":"YulFunctionCall","src":"15471:63:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15464:3:27"}]},{"nodeType":"YulAssignment","src":"15547:70:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15610:6:27"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"15557:52:27"},"nodeType":"YulFunctionCall","src":"15557:60:27"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"15547:6:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15365:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"15368:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15362:2:27"},"nodeType":"YulFunctionCall","src":"15362:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15376:18:27","statements":[{"nodeType":"YulAssignment","src":"15378:14:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"15387:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"15390:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15383:3:27"},"nodeType":"YulFunctionCall","src":"15383:9:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"15378:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"15347:14:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15349:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15358:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"15353:1:27","type":""}]}]},"src":"15343:284:27"},{"nodeType":"YulAssignment","src":"15636:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"15643:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15636:3:27"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15023:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"15030:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15039:3:27","type":""}],"src":"14920:732:27"},{"body":{"nodeType":"YulBlock","src":"15886:468:27","statements":[{"nodeType":"YulAssignment","src":"15896:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15908:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15919:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15904:3:27"},"nodeType":"YulFunctionCall","src":"15904:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15896:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"15975:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15988:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"15999:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15984:3:27"},"nodeType":"YulFunctionCall","src":"15984:17:27"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"15933:41:27"},"nodeType":"YulFunctionCall","src":"15933:69:27"},"nodeType":"YulExpressionStatement","src":"15933:69:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16054:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16067:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16078:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16063:3:27"},"nodeType":"YulFunctionCall","src":"16063:18:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"16012:41:27"},"nodeType":"YulFunctionCall","src":"16012:70:27"},"nodeType":"YulExpressionStatement","src":"16012:70:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16136:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16149:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16160:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16145:3:27"},"nodeType":"YulFunctionCall","src":"16145:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16092:43:27"},"nodeType":"YulFunctionCall","src":"16092:72:27"},"nodeType":"YulExpressionStatement","src":"16092:72:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16185:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16196:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16181:3:27"},"nodeType":"YulFunctionCall","src":"16181:18:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16205:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"16211:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16201:3:27"},"nodeType":"YulFunctionCall","src":"16201:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16174:6:27"},"nodeType":"YulFunctionCall","src":"16174:48:27"},"nodeType":"YulExpressionStatement","src":"16174:48:27"},{"nodeType":"YulAssignment","src":"16231:116:27","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16333:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"16342:4:27"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16239:93:27"},"nodeType":"YulFunctionCall","src":"16239:108:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16231:4:27"}]}]},"name":"abi_encode_tuple_t_uint96_t_uint64_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_uint96_t_uint64_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15834:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15846:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15854:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15862:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15870:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15881:4:27","type":""}],"src":"15658:696:27"},{"body":{"nodeType":"YulBlock","src":"16402:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"16458:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16467:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16470:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16460:6:27"},"nodeType":"YulFunctionCall","src":"16460:12:27"},"nodeType":"YulExpressionStatement","src":"16460:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16425:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16449:5:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"16432:16:27"},"nodeType":"YulFunctionCall","src":"16432:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16422:2:27"},"nodeType":"YulFunctionCall","src":"16422:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16415:6:27"},"nodeType":"YulFunctionCall","src":"16415:42:27"},"nodeType":"YulIf","src":"16412:62:27"}]},"name":"validator_revert_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16395:5:27","type":""}],"src":"16360:120:27"},{"body":{"nodeType":"YulBlock","src":"16537:86:27","statements":[{"nodeType":"YulAssignment","src":"16547:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16569:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"16556:12:27"},"nodeType":"YulFunctionCall","src":"16556:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"16547:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16611:5:27"}],"functionName":{"name":"validator_revert_t_uint96","nodeType":"YulIdentifier","src":"16585:25:27"},"nodeType":"YulFunctionCall","src":"16585:32:27"},"nodeType":"YulExpressionStatement","src":"16585:32:27"}]},"name":"abi_decode_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16515:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"16523:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"16531:5:27","type":""}],"src":"16486:137:27"},{"body":{"nodeType":"YulBlock","src":"16710:389:27","statements":[{"body":{"nodeType":"YulBlock","src":"16756:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"16758:77:27"},"nodeType":"YulFunctionCall","src":"16758:79:27"},"nodeType":"YulExpressionStatement","src":"16758:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"16731:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"16740:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16727:3:27"},"nodeType":"YulFunctionCall","src":"16727:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"16752:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16723:3:27"},"nodeType":"YulFunctionCall","src":"16723:32:27"},"nodeType":"YulIf","src":"16720:119:27"},{"nodeType":"YulBlock","src":"16849:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16864:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"16878:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16868:6:27","type":""}]},{"nodeType":"YulAssignment","src":"16893:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16927:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"16938:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16923:3:27"},"nodeType":"YulFunctionCall","src":"16923:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"16947:7:27"}],"functionName":{"name":"abi_decode_t_uint64","nodeType":"YulIdentifier","src":"16903:19:27"},"nodeType":"YulFunctionCall","src":"16903:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"16893:6:27"}]}]},{"nodeType":"YulBlock","src":"16975:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"16990:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"17004:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"16994:6:27","type":""}]},{"nodeType":"YulAssignment","src":"17020:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17054:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"17065:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17050:3:27"},"nodeType":"YulFunctionCall","src":"17050:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17074:7:27"}],"functionName":{"name":"abi_decode_t_uint96","nodeType":"YulIdentifier","src":"17030:19:27"},"nodeType":"YulFunctionCall","src":"17030:52:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17020:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint64t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16672:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"16683:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"16695:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16703:6:27","type":""}],"src":"16629:470:27"},{"body":{"nodeType":"YulBlock","src":"17279:363:27","statements":[{"nodeType":"YulAssignment","src":"17289:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17301:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17312:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17297:3:27"},"nodeType":"YulFunctionCall","src":"17297:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17289:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17368:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17381:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17392:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17377:3:27"},"nodeType":"YulFunctionCall","src":"17377:17:27"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"17326:41:27"},"nodeType":"YulFunctionCall","src":"17326:69:27"},"nodeType":"YulExpressionStatement","src":"17326:69:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17447:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17460:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17471:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17456:3:27"},"nodeType":"YulFunctionCall","src":"17456:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"17405:41:27"},"nodeType":"YulFunctionCall","src":"17405:70:27"},"nodeType":"YulExpressionStatement","src":"17405:70:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17527:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17540:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17551:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17536:3:27"},"nodeType":"YulFunctionCall","src":"17536:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"17485:41:27"},"nodeType":"YulFunctionCall","src":"17485:70:27"},"nodeType":"YulExpressionStatement","src":"17485:70:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"17607:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17620:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17631:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17616:3:27"},"nodeType":"YulFunctionCall","src":"17616:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"17565:41:27"},"nodeType":"YulFunctionCall","src":"17565:70:27"},"nodeType":"YulExpressionStatement","src":"17565:70:27"}]},"name":"abi_encode_tuple_t_uint16_t_uint32_t_uint32_t_uint32__to_t_uint16_t_uint32_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17227:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17239:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17247:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17255:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17263:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17274:4:27","type":""}],"src":"17105:537:27"},{"body":{"nodeType":"YulBlock","src":"17690:48:27","statements":[{"nodeType":"YulAssignment","src":"17700:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17725:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17718:6:27"},"nodeType":"YulFunctionCall","src":"17718:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"17711:6:27"},"nodeType":"YulFunctionCall","src":"17711:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"17700:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17672:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"17682:7:27","type":""}],"src":"17648:90:27"},{"body":{"nodeType":"YulBlock","src":"17803:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17820:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17840:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"17825:14:27"},"nodeType":"YulFunctionCall","src":"17825:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17813:6:27"},"nodeType":"YulFunctionCall","src":"17813:34:27"},"nodeType":"YulExpressionStatement","src":"17813:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17791:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17798:3:27","type":""}],"src":"17744:109:27"},{"body":{"nodeType":"YulBlock","src":"17951:118:27","statements":[{"nodeType":"YulAssignment","src":"17961:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17973:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"17984:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17969:3:27"},"nodeType":"YulFunctionCall","src":"17969:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17961:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18035:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18048:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"18059:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18044:3:27"},"nodeType":"YulFunctionCall","src":"18044:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"17997:37:27"},"nodeType":"YulFunctionCall","src":"17997:65:27"},"nodeType":"YulExpressionStatement","src":"17997:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17923:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17935:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17946:4:27","type":""}],"src":"17859:210:27"},{"body":{"nodeType":"YulBlock","src":"18141:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"18187:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18189:77:27"},"nodeType":"YulFunctionCall","src":"18189:79:27"},"nodeType":"YulExpressionStatement","src":"18189:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18162:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"18171:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18158:3:27"},"nodeType":"YulFunctionCall","src":"18158:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"18183:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18154:3:27"},"nodeType":"YulFunctionCall","src":"18154:32:27"},"nodeType":"YulIf","src":"18151:119:27"},{"nodeType":"YulBlock","src":"18280:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"18295:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"18309:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18299:6:27","type":""}]},{"nodeType":"YulAssignment","src":"18324:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18359:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"18370:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18355:3:27"},"nodeType":"YulFunctionCall","src":"18355:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18379:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"18334:20:27"},"nodeType":"YulFunctionCall","src":"18334:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18324:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18111:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18122:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18134:6:27","type":""}],"src":"18075:329:27"},{"body":{"nodeType":"YulBlock","src":"18506:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18523:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"18528:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18516:6:27"},"nodeType":"YulFunctionCall","src":"18516:19:27"},"nodeType":"YulExpressionStatement","src":"18516:19:27"},{"nodeType":"YulAssignment","src":"18544:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18563:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"18568:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18559:3:27"},"nodeType":"YulFunctionCall","src":"18559:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"18544:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18478:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"18483:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"18494:11:27","type":""}],"src":"18410:169:27"},{"body":{"nodeType":"YulBlock","src":"18691:59:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18713:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"18721:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18709:3:27"},"nodeType":"YulFunctionCall","src":"18709:14:27"},{"hexValue":"6e6f7420696d706c656d656e746564","kind":"string","nodeType":"YulLiteral","src":"18725:17:27","type":"","value":"not implemented"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18702:6:27"},"nodeType":"YulFunctionCall","src":"18702:41:27"},"nodeType":"YulExpressionStatement","src":"18702:41:27"}]},"name":"store_literal_in_memory_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18683:6:27","type":""}],"src":"18585:165:27"},{"body":{"nodeType":"YulBlock","src":"18902:220:27","statements":[{"nodeType":"YulAssignment","src":"18912:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18978:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"18983:2:27","type":"","value":"15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18919:58:27"},"nodeType":"YulFunctionCall","src":"18919:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18912:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19084:3:27"}],"functionName":{"name":"store_literal_in_memory_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9","nodeType":"YulIdentifier","src":"18995:88:27"},"nodeType":"YulFunctionCall","src":"18995:93:27"},"nodeType":"YulExpressionStatement","src":"18995:93:27"},{"nodeType":"YulAssignment","src":"19097:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19108:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"19113:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19104:3:27"},"nodeType":"YulFunctionCall","src":"19104:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19097:3:27"}]}]},"name":"abi_encode_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18890:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18898:3:27","type":""}],"src":"18756:366:27"},{"body":{"nodeType":"YulBlock","src":"19299:248:27","statements":[{"nodeType":"YulAssignment","src":"19309:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19321:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19332:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19317:3:27"},"nodeType":"YulFunctionCall","src":"19317:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19309:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19356:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19367:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19352:3:27"},"nodeType":"YulFunctionCall","src":"19352:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19375:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"19381:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19371:3:27"},"nodeType":"YulFunctionCall","src":"19371:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19345:6:27"},"nodeType":"YulFunctionCall","src":"19345:47:27"},"nodeType":"YulExpressionStatement","src":"19345:47:27"},{"nodeType":"YulAssignment","src":"19401:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19535:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19409:124:27"},"nodeType":"YulFunctionCall","src":"19409:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19401:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19279:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19294:4:27","type":""}],"src":"19128:419:27"},{"body":{"nodeType":"YulBlock","src":"19659:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19681:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"19689:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19677:3:27"},"nodeType":"YulFunctionCall","src":"19677:14:27"},{"hexValue":"6e6f6e6578697374656e742072657175657374","kind":"string","nodeType":"YulLiteral","src":"19693:21:27","type":"","value":"nonexistent request"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19670:6:27"},"nodeType":"YulFunctionCall","src":"19670:45:27"},"nodeType":"YulExpressionStatement","src":"19670:45:27"}]},"name":"store_literal_in_memory_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19651:6:27","type":""}],"src":"19553:169:27"},{"body":{"nodeType":"YulBlock","src":"19874:220:27","statements":[{"nodeType":"YulAssignment","src":"19884:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19950:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"19955:2:27","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19891:58:27"},"nodeType":"YulFunctionCall","src":"19891:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19884:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20056:3:27"}],"functionName":{"name":"store_literal_in_memory_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0","nodeType":"YulIdentifier","src":"19967:88:27"},"nodeType":"YulFunctionCall","src":"19967:93:27"},"nodeType":"YulExpressionStatement","src":"19967:93:27"},{"nodeType":"YulAssignment","src":"20069:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20080:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"20085:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20076:3:27"},"nodeType":"YulFunctionCall","src":"20076:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20069:3:27"}]}]},"name":"abi_encode_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19862:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19870:3:27","type":""}],"src":"19728:366:27"},{"body":{"nodeType":"YulBlock","src":"20271:248:27","statements":[{"nodeType":"YulAssignment","src":"20281:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20293:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20304:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20289:3:27"},"nodeType":"YulFunctionCall","src":"20289:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20281:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20328:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20339:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20324:3:27"},"nodeType":"YulFunctionCall","src":"20324:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20347:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"20353:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20343:3:27"},"nodeType":"YulFunctionCall","src":"20343:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20317:6:27"},"nodeType":"YulFunctionCall","src":"20317:47:27"},"nodeType":"YulExpressionStatement","src":"20317:47:27"},{"nodeType":"YulAssignment","src":"20373:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20507:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20381:124:27"},"nodeType":"YulFunctionCall","src":"20381:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20373:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20251:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20266:4:27","type":""}],"src":"20100:419:27"},{"body":{"nodeType":"YulBlock","src":"20651:206:27","statements":[{"nodeType":"YulAssignment","src":"20661:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20673:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20684:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20669:3:27"},"nodeType":"YulFunctionCall","src":"20669:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20661:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"20741:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20754:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20765:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20750:3:27"},"nodeType":"YulFunctionCall","src":"20750:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"20697:43:27"},"nodeType":"YulFunctionCall","src":"20697:71:27"},"nodeType":"YulExpressionStatement","src":"20697:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20822:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20835:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20846:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20831:3:27"},"nodeType":"YulFunctionCall","src":"20831:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"20778:43:27"},"nodeType":"YulFunctionCall","src":"20778:72:27"},"nodeType":"YulExpressionStatement","src":"20778:72:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20615:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20627:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20635:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20646:4:27","type":""}],"src":"20525:332:27"},{"body":{"nodeType":"YulBlock","src":"20891:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20908:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"20911:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20901:6:27"},"nodeType":"YulFunctionCall","src":"20901:88:27"},"nodeType":"YulExpressionStatement","src":"20901:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21005:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21008:4:27","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20998:6:27"},"nodeType":"YulFunctionCall","src":"20998:15:27"},"nodeType":"YulExpressionStatement","src":"20998:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21029:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21032:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21022:6:27"},"nodeType":"YulFunctionCall","src":"21022:15:27"},"nodeType":"YulExpressionStatement","src":"21022:15:27"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"20863:180:27"},{"body":{"nodeType":"YulBlock","src":"21077:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21094:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21097:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21087:6:27"},"nodeType":"YulFunctionCall","src":"21087:88:27"},"nodeType":"YulExpressionStatement","src":"21087:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21191:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21194:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21184:6:27"},"nodeType":"YulFunctionCall","src":"21184:15:27"},"nodeType":"YulExpressionStatement","src":"21184:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21215:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21218:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21208:6:27"},"nodeType":"YulFunctionCall","src":"21208:15:27"},"nodeType":"YulExpressionStatement","src":"21208:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21049:180:27"},{"body":{"nodeType":"YulBlock","src":"21278:190:27","statements":[{"nodeType":"YulAssignment","src":"21288:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21315:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21297:17:27"},"nodeType":"YulFunctionCall","src":"21297:24:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"21288:5:27"}]},{"body":{"nodeType":"YulBlock","src":"21411:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21413:16:27"},"nodeType":"YulFunctionCall","src":"21413:18:27"},"nodeType":"YulExpressionStatement","src":"21413:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21336:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"21343:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"21333:2:27"},"nodeType":"YulFunctionCall","src":"21333:77:27"},"nodeType":"YulIf","src":"21330:103:27"},{"nodeType":"YulAssignment","src":"21442:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21453:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"21460:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21449:3:27"},"nodeType":"YulFunctionCall","src":"21449:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"21442:3:27"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21264:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"21274:3:27","type":""}],"src":"21235:233:27"},{"body":{"nodeType":"YulBlock","src":"21548:40:27","statements":[{"nodeType":"YulAssignment","src":"21559:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21575:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21569:5:27"},"nodeType":"YulFunctionCall","src":"21569:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"21559:6:27"}]}]},"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21531:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"21541:6:27","type":""}],"src":"21474:114:27"},{"body":{"nodeType":"YulBlock","src":"21705:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21722:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"21727:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21715:6:27"},"nodeType":"YulFunctionCall","src":"21715:19:27"},"nodeType":"YulExpressionStatement","src":"21715:19:27"},{"nodeType":"YulAssignment","src":"21743:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21762:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"21767:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21758:3:27"},"nodeType":"YulFunctionCall","src":"21758:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"21743:11:27"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21677:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"21682:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"21693:11:27","type":""}],"src":"21594:184:27"},{"body":{"nodeType":"YulBlock","src":"21856:60:27","statements":[{"nodeType":"YulAssignment","src":"21866:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"21874:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"21866:4:27"}]},{"nodeType":"YulAssignment","src":"21887:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"21899:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"21904:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21895:3:27"},"nodeType":"YulFunctionCall","src":"21895:14:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"21887:4:27"}]}]},"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"21843:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"21851:4:27","type":""}],"src":"21784:132:27"},{"body":{"nodeType":"YulBlock","src":"21977:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21994:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22017:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21999:17:27"},"nodeType":"YulFunctionCall","src":"21999:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21987:6:27"},"nodeType":"YulFunctionCall","src":"21987:37:27"},"nodeType":"YulExpressionStatement","src":"21987:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21965:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21972:3:27","type":""}],"src":"21922:108:27"},{"body":{"nodeType":"YulBlock","src":"22116:99:27","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22160:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"22168:3:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"22126:33:27"},"nodeType":"YulFunctionCall","src":"22126:46:27"},"nodeType":"YulExpressionStatement","src":"22126:46:27"},{"nodeType":"YulAssignment","src":"22181:28:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22199:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"22204:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22195:3:27"},"nodeType":"YulFunctionCall","src":"22195:14:27"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"22181:10:27"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"22089:6:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22097:3:27","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"22105:10:27","type":""}],"src":"22036:179:27"},{"body":{"nodeType":"YulBlock","src":"22296:38:27","statements":[{"nodeType":"YulAssignment","src":"22306:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"22318:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"22323:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22314:3:27"},"nodeType":"YulFunctionCall","src":"22314:14:27"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"22306:4:27"}]}]},"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"22283:3:27","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"22291:4:27","type":""}],"src":"22221:113:27"},{"body":{"nodeType":"YulBlock","src":"22494:608:27","statements":[{"nodeType":"YulVariableDeclaration","src":"22504:68:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22566:5:27"}],"functionName":{"name":"array_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"22518:47:27"},"nodeType":"YulFunctionCall","src":"22518:54:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22508:6:27","type":""}]},{"nodeType":"YulAssignment","src":"22581:93:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22662:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"22667:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22588:73:27"},"nodeType":"YulFunctionCall","src":"22588:86:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22581:3:27"}]},{"nodeType":"YulVariableDeclaration","src":"22683:71:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22748:5:27"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"22698:49:27"},"nodeType":"YulFunctionCall","src":"22698:56:27"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"22687:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"22763:21:27","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"22777:7:27"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"22767:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"22853:224:27","statements":[{"nodeType":"YulVariableDeclaration","src":"22867:34:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"22894:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22888:5:27"},"nodeType":"YulFunctionCall","src":"22888:13:27"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"22871:13:27","type":""}]},{"nodeType":"YulAssignment","src":"22914:70:27","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"22965:13:27"},{"name":"pos","nodeType":"YulIdentifier","src":"22980:3:27"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"22921:43:27"},"nodeType":"YulFunctionCall","src":"22921:63:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22914:3:27"}]},{"nodeType":"YulAssignment","src":"22997:70:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"23060:6:27"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"23007:52:27"},"nodeType":"YulFunctionCall","src":"23007:60:27"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"22997:6:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22815:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"22818:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"22812:2:27"},"nodeType":"YulFunctionCall","src":"22812:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"22826:18:27","statements":[{"nodeType":"YulAssignment","src":"22828:14:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"22837:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"22840:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22833:3:27"},"nodeType":"YulFunctionCall","src":"22833:9:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"22828:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"22797:14:27","statements":[{"nodeType":"YulVariableDeclaration","src":"22799:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"22808:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"22803:1:27","type":""}]}]},"src":"22793:284:27"},{"nodeType":"YulAssignment","src":"23086:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"23093:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23086:3:27"}]}]},"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22473:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22480:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22489:3:27","type":""}],"src":"22370:732:27"},{"body":{"nodeType":"YulBlock","src":"23284:307:27","statements":[{"nodeType":"YulAssignment","src":"23294:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23306:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23317:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23302:3:27"},"nodeType":"YulFunctionCall","src":"23302:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23294:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23374:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23387:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23398:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23383:3:27"},"nodeType":"YulFunctionCall","src":"23383:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23330:43:27"},"nodeType":"YulFunctionCall","src":"23330:71:27"},"nodeType":"YulExpressionStatement","src":"23330:71:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23422:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23433:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23418:3:27"},"nodeType":"YulFunctionCall","src":"23418:18:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23442:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"23448:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23438:3:27"},"nodeType":"YulFunctionCall","src":"23438:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23411:6:27"},"nodeType":"YulFunctionCall","src":"23411:48:27"},"nodeType":"YulExpressionStatement","src":"23411:48:27"},{"nodeType":"YulAssignment","src":"23468:116:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23570:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"23579:4:27"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23476:93:27"},"nodeType":"YulFunctionCall","src":"23476:108:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23468:4:27"}]}]},"name":"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23248:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23260:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23268:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23279:4:27","type":""}],"src":"23108:483:27"},{"body":{"nodeType":"YulBlock","src":"23655:40:27","statements":[{"nodeType":"YulAssignment","src":"23666:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23682:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23676:5:27"},"nodeType":"YulFunctionCall","src":"23676:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23666:6:27"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23638:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"23648:6:27","type":""}],"src":"23597:98:27"},{"body":{"nodeType":"YulBlock","src":"23814:34:27","statements":[{"nodeType":"YulAssignment","src":"23824:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"23839:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"23824:11:27"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23786:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"23791:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"23802:11:27","type":""}],"src":"23701:147:27"},{"body":{"nodeType":"YulBlock","src":"23916:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"23926:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23935:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"23930:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"23995:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24020:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"24025:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24016:3:27"},"nodeType":"YulFunctionCall","src":"24016:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"24039:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"24044:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24035:3:27"},"nodeType":"YulFunctionCall","src":"24035:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24029:5:27"},"nodeType":"YulFunctionCall","src":"24029:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24009:6:27"},"nodeType":"YulFunctionCall","src":"24009:39:27"},"nodeType":"YulExpressionStatement","src":"24009:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23956:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"23959:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"23953:2:27"},"nodeType":"YulFunctionCall","src":"23953:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"23967:19:27","statements":[{"nodeType":"YulAssignment","src":"23969:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"23978:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"23981:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23974:3:27"},"nodeType":"YulFunctionCall","src":"23974:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"23969:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"23949:3:27","statements":[]},"src":"23945:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"24078:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"24083:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24074:3:27"},"nodeType":"YulFunctionCall","src":"24074:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"24092:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24067:6:27"},"nodeType":"YulFunctionCall","src":"24067:27:27"},"nodeType":"YulExpressionStatement","src":"24067:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"23898:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"23903:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"23908:6:27","type":""}],"src":"23854:246:27"},{"body":{"nodeType":"YulBlock","src":"24214:278:27","statements":[{"nodeType":"YulVariableDeclaration","src":"24224:52:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24270:5:27"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"24238:31:27"},"nodeType":"YulFunctionCall","src":"24238:38:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"24228:6:27","type":""}]},{"nodeType":"YulAssignment","src":"24285:95:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24368:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"24373:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24292:75:27"},"nodeType":"YulFunctionCall","src":"24292:88:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24285:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24428:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"24435:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24424:3:27"},"nodeType":"YulFunctionCall","src":"24424:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"24442:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"24447:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"24389:34:27"},"nodeType":"YulFunctionCall","src":"24389:65:27"},"nodeType":"YulExpressionStatement","src":"24389:65:27"},{"nodeType":"YulAssignment","src":"24463:23:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24474:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"24479:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24470:3:27"},"nodeType":"YulFunctionCall","src":"24470:16:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24463:3:27"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24195:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"24202:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24210:3:27","type":""}],"src":"24106:386:27"},{"body":{"nodeType":"YulBlock","src":"24632:137:27","statements":[{"nodeType":"YulAssignment","src":"24643:100:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24730:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"24739:3:27"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24650:79:27"},"nodeType":"YulFunctionCall","src":"24650:93:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24643:3:27"}]},{"nodeType":"YulAssignment","src":"24753:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"24760:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24753:3:27"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24611:3:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"24617:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24628:3:27","type":""}],"src":"24498:271:27"},{"body":{"nodeType":"YulBlock","src":"24820:149:27","statements":[{"nodeType":"YulAssignment","src":"24830:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24853:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24835:17:27"},"nodeType":"YulFunctionCall","src":"24835:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"24830:1:27"}]},{"nodeType":"YulAssignment","src":"24864:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"24887:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24869:17:27"},"nodeType":"YulFunctionCall","src":"24869:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"24864:1:27"}]},{"nodeType":"YulAssignment","src":"24898:17:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24910:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"24913:1:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24906:3:27"},"nodeType":"YulFunctionCall","src":"24906:9:27"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"24898:4:27"}]},{"body":{"nodeType":"YulBlock","src":"24940:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"24942:16:27"},"nodeType":"YulFunctionCall","src":"24942:18:27"},"nodeType":"YulExpressionStatement","src":"24942:18:27"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"24931:4:27"},{"name":"x","nodeType":"YulIdentifier","src":"24937:1:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"24928:2:27"},"nodeType":"YulFunctionCall","src":"24928:11:27"},"nodeType":"YulIf","src":"24925:37:27"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"24806:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"24809:1:27","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"24815:4:27","type":""}],"src":"24775:194:27"},{"body":{"nodeType":"YulBlock","src":"25023:362:27","statements":[{"nodeType":"YulAssignment","src":"25033:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25056:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25038:17:27"},"nodeType":"YulFunctionCall","src":"25038:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25033:1:27"}]},{"nodeType":"YulAssignment","src":"25067:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25090:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25072:17:27"},"nodeType":"YulFunctionCall","src":"25072:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25067:1:27"}]},{"nodeType":"YulVariableDeclaration","src":"25101:28:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25124:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"25127:1:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"25120:3:27"},"nodeType":"YulFunctionCall","src":"25120:9:27"},"variables":[{"name":"product_raw","nodeType":"YulTypedName","src":"25105:11:27","type":""}]},{"nodeType":"YulAssignment","src":"25138:41:27","value":{"arguments":[{"name":"product_raw","nodeType":"YulIdentifier","src":"25167:11:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25149:17:27"},"nodeType":"YulFunctionCall","src":"25149:30:27"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"25138:7:27"}]},{"body":{"nodeType":"YulBlock","src":"25356:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25358:16:27"},"nodeType":"YulFunctionCall","src":"25358:18:27"},"nodeType":"YulExpressionStatement","src":"25358:18:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25289:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25282:6:27"},"nodeType":"YulFunctionCall","src":"25282:9:27"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25312:1:27"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"25319:7:27"},{"name":"x","nodeType":"YulIdentifier","src":"25328:1:27"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"25315:3:27"},"nodeType":"YulFunctionCall","src":"25315:15:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"25309:2:27"},"nodeType":"YulFunctionCall","src":"25309:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"25262:2:27"},"nodeType":"YulFunctionCall","src":"25262:83:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"25242:6:27"},"nodeType":"YulFunctionCall","src":"25242:113:27"},"nodeType":"YulIf","src":"25239:139:27"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25006:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"25009:1:27","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"25015:7:27","type":""}],"src":"24975:410:27"},{"body":{"nodeType":"YulBlock","src":"25435:147:27","statements":[{"nodeType":"YulAssignment","src":"25445:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25468:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25450:17:27"},"nodeType":"YulFunctionCall","src":"25450:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25445:1:27"}]},{"nodeType":"YulAssignment","src":"25479:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25502:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"25484:17:27"},"nodeType":"YulFunctionCall","src":"25484:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25479:1:27"}]},{"nodeType":"YulAssignment","src":"25513:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25524:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"25527:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25520:3:27"},"nodeType":"YulFunctionCall","src":"25520:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"25513:3:27"}]},{"body":{"nodeType":"YulBlock","src":"25553:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25555:16:27"},"nodeType":"YulFunctionCall","src":"25555:18:27"},"nodeType":"YulExpressionStatement","src":"25555:18:27"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25545:1:27"},{"name":"sum","nodeType":"YulIdentifier","src":"25548:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25542:2:27"},"nodeType":"YulFunctionCall","src":"25542:10:27"},"nodeType":"YulIf","src":"25539:36:27"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25422:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"25425:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"25431:3:27","type":""}],"src":"25391:191:27"},{"body":{"nodeType":"YulBlock","src":"25632:172:27","statements":[{"nodeType":"YulAssignment","src":"25642:24:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25664:1:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"25647:16:27"},"nodeType":"YulFunctionCall","src":"25647:19:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"25642:1:27"}]},{"nodeType":"YulAssignment","src":"25675:24:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"25697:1:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"25680:16:27"},"nodeType":"YulFunctionCall","src":"25680:19:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"25675:1:27"}]},{"nodeType":"YulAssignment","src":"25708:17:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"25720:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"25723:1:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25716:3:27"},"nodeType":"YulFunctionCall","src":"25716:9:27"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"25708:4:27"}]},{"body":{"nodeType":"YulBlock","src":"25775:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"25777:16:27"},"nodeType":"YulFunctionCall","src":"25777:18:27"},"nodeType":"YulExpressionStatement","src":"25777:18:27"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"25741:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"25747:26:27","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25738:2:27"},"nodeType":"YulFunctionCall","src":"25738:36:27"},"nodeType":"YulIf","src":"25735:62:27"}]},"name":"checked_sub_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"25618:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"25621:1:27","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"25627:4:27","type":""}],"src":"25588:216:27"},{"body":{"nodeType":"YulBlock","src":"25956:280:27","statements":[{"nodeType":"YulAssignment","src":"25966:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25978:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"25989:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25974:3:27"},"nodeType":"YulFunctionCall","src":"25974:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25966:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26046:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26059:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26070:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26055:3:27"},"nodeType":"YulFunctionCall","src":"26055:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26002:43:27"},"nodeType":"YulFunctionCall","src":"26002:71:27"},"nodeType":"YulExpressionStatement","src":"26002:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26125:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26138:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26149:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26134:3:27"},"nodeType":"YulFunctionCall","src":"26134:18:27"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint96_fromStack","nodeType":"YulIdentifier","src":"26083:41:27"},"nodeType":"YulFunctionCall","src":"26083:70:27"},"nodeType":"YulExpressionStatement","src":"26083:70:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26201:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26214:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26225:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26210:3:27"},"nodeType":"YulFunctionCall","src":"26210:18:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"26163:37:27"},"nodeType":"YulFunctionCall","src":"26163:66:27"},"nodeType":"YulExpressionStatement","src":"26163:66:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint96_t_bool__to_t_uint256_t_uint96_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25912:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"25924:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"25932:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"25940:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25951:4:27","type":""}],"src":"25810:426:27"},{"body":{"nodeType":"YulBlock","src":"26446:448:27","statements":[{"nodeType":"YulAssignment","src":"26456:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26468:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26479:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26464:3:27"},"nodeType":"YulFunctionCall","src":"26464:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26456:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26537:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26550:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26561:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26546:3:27"},"nodeType":"YulFunctionCall","src":"26546:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26493:43:27"},"nodeType":"YulFunctionCall","src":"26493:71:27"},"nodeType":"YulExpressionStatement","src":"26493:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"26618:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26631:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26642:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26627:3:27"},"nodeType":"YulFunctionCall","src":"26627:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"26574:43:27"},"nodeType":"YulFunctionCall","src":"26574:72:27"},"nodeType":"YulExpressionStatement","src":"26574:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"26698:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26711:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26722:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26707:3:27"},"nodeType":"YulFunctionCall","src":"26707:18:27"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"26656:41:27"},"nodeType":"YulFunctionCall","src":"26656:70:27"},"nodeType":"YulExpressionStatement","src":"26656:70:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"26778:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26791:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26802:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26787:3:27"},"nodeType":"YulFunctionCall","src":"26787:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"26736:41:27"},"nodeType":"YulFunctionCall","src":"26736:70:27"},"nodeType":"YulExpressionStatement","src":"26736:70:27"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"26858:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26871:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"26882:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26867:3:27"},"nodeType":"YulFunctionCall","src":"26867:19:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"26816:41:27"},"nodeType":"YulFunctionCall","src":"26816:71:27"},"nodeType":"YulExpressionStatement","src":"26816:71:27"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint16_t_uint32_t_uint32__to_t_uint256_t_uint256_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26386:9:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"26398:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"26406:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"26414:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"26422:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26430:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26441:4:27","type":""}],"src":"26242:652:27"},{"body":{"nodeType":"YulBlock","src":"27006:66:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27028:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"27036:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27024:3:27"},"nodeType":"YulFunctionCall","src":"27024:14:27"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"27040:24:27","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27017:6:27"},"nodeType":"YulFunctionCall","src":"27017:48:27"},"nodeType":"YulExpressionStatement","src":"27017:48:27"}]},"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26998:6:27","type":""}],"src":"26900:172:27"},{"body":{"nodeType":"YulBlock","src":"27224:220:27","statements":[{"nodeType":"YulAssignment","src":"27234:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27300:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"27305:2:27","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27241:58:27"},"nodeType":"YulFunctionCall","src":"27241:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27234:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27406:3:27"}],"functionName":{"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nodeType":"YulIdentifier","src":"27317:88:27"},"nodeType":"YulFunctionCall","src":"27317:93:27"},"nodeType":"YulExpressionStatement","src":"27317:93:27"},{"nodeType":"YulAssignment","src":"27419:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27430:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"27435:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27426:3:27"},"nodeType":"YulFunctionCall","src":"27426:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27419:3:27"}]}]},"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27212:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27220:3:27","type":""}],"src":"27078:366:27"},{"body":{"nodeType":"YulBlock","src":"27621:248:27","statements":[{"nodeType":"YulAssignment","src":"27631:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27643:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27654:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27639:3:27"},"nodeType":"YulFunctionCall","src":"27639:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27631:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27678:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27689:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27674:3:27"},"nodeType":"YulFunctionCall","src":"27674:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27697:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"27703:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27693:3:27"},"nodeType":"YulFunctionCall","src":"27693:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27667:6:27"},"nodeType":"YulFunctionCall","src":"27667:47:27"},"nodeType":"YulExpressionStatement","src":"27667:47:27"},{"nodeType":"YulAssignment","src":"27723:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27857:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27731:124:27"},"nodeType":"YulFunctionCall","src":"27731:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27723:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27601:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27616:4:27","type":""}],"src":"27450:419:27"},{"body":{"nodeType":"YulBlock","src":"27903:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27920:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"27923:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27913:6:27"},"nodeType":"YulFunctionCall","src":"27913:88:27"},"nodeType":"YulExpressionStatement","src":"27913:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28017:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"28020:4:27","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28010:6:27"},"nodeType":"YulFunctionCall","src":"28010:15:27"},"nodeType":"YulExpressionStatement","src":"28010:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28041:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"28044:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"28034:6:27"},"nodeType":"YulFunctionCall","src":"28034:15:27"},"nodeType":"YulExpressionStatement","src":"28034:15:27"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"27875:180:27"},{"body":{"nodeType":"YulBlock","src":"28103:141:27","statements":[{"nodeType":"YulAssignment","src":"28113:32:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28139:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"28122:16:27"},"nodeType":"YulFunctionCall","src":"28122:23:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"28113:5:27"}]},{"body":{"nodeType":"YulBlock","src":"28187:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28189:16:27"},"nodeType":"YulFunctionCall","src":"28189:18:27"},"nodeType":"YulExpressionStatement","src":"28189:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28160:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"28167:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"28157:2:27"},"nodeType":"YulFunctionCall","src":"28157:29:27"},"nodeType":"YulIf","src":"28154:55:27"},{"nodeType":"YulAssignment","src":"28218:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28229:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"28236:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28225:3:27"},"nodeType":"YulFunctionCall","src":"28225:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28218:3:27"}]}]},"name":"increment_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28089:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28099:3:27","type":""}],"src":"28061:183:27"},{"body":{"nodeType":"YulBlock","src":"28293:170:27","statements":[{"nodeType":"YulAssignment","src":"28303:24:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28325:1:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"28308:16:27"},"nodeType":"YulFunctionCall","src":"28308:19:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28303:1:27"}]},{"nodeType":"YulAssignment","src":"28336:24:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"28358:1:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"28341:16:27"},"nodeType":"YulFunctionCall","src":"28341:19:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"28336:1:27"}]},{"nodeType":"YulAssignment","src":"28369:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"28380:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"28383:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28376:3:27"},"nodeType":"YulFunctionCall","src":"28376:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"28369:3:27"}]},{"body":{"nodeType":"YulBlock","src":"28434:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"28436:16:27"},"nodeType":"YulFunctionCall","src":"28436:18:27"},"nodeType":"YulExpressionStatement","src":"28436:18:27"}]},"condition":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"28401:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"28406:26:27","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"28398:2:27"},"nodeType":"YulFunctionCall","src":"28398:35:27"},"nodeType":"YulIf","src":"28395:61:27"}]},"name":"checked_add_t_uint96","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28280:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"28283:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"28289:3:27","type":""}],"src":"28250:213:27"},{"body":{"nodeType":"YulBlock","src":"28501:28:27","statements":[{"nodeType":"YulAssignment","src":"28511:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"28518:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"28511:3:27"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28487:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"28497:3:27","type":""}],"src":"28469:60:27"},{"body":{"nodeType":"YulBlock","src":"28594:81:27","statements":[{"nodeType":"YulAssignment","src":"28604:65:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28661:5:27"}],"functionName":{"name":"cleanup_t_uint96","nodeType":"YulIdentifier","src":"28644:16:27"},"nodeType":"YulFunctionCall","src":"28644:23:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"28635:8:27"},"nodeType":"YulFunctionCall","src":"28635:33:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28617:17:27"},"nodeType":"YulFunctionCall","src":"28617:52:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"28604:9:27"}]}]},"name":"convert_t_uint96_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28574:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"28584:9:27","type":""}],"src":"28535:140:27"},{"body":{"nodeType":"YulBlock","src":"28745:65:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28762:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28797:5:27"}],"functionName":{"name":"convert_t_uint96_to_t_uint256","nodeType":"YulIdentifier","src":"28767:29:27"},"nodeType":"YulFunctionCall","src":"28767:36:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28755:6:27"},"nodeType":"YulFunctionCall","src":"28755:49:27"},"nodeType":"YulExpressionStatement","src":"28755:49:27"}]},"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"28733:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"28740:3:27","type":""}],"src":"28681:129:27"},{"body":{"nodeType":"YulBlock","src":"28940:204:27","statements":[{"nodeType":"YulAssignment","src":"28950:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28962:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28973:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28958:3:27"},"nodeType":"YulFunctionCall","src":"28958:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28950:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29029:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29042:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29053:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29038:3:27"},"nodeType":"YulFunctionCall","src":"29038:17:27"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28986:42:27"},"nodeType":"YulFunctionCall","src":"28986:70:27"},"nodeType":"YulExpressionStatement","src":"28986:70:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29109:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29122:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29133:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29118:3:27"},"nodeType":"YulFunctionCall","src":"29118:18:27"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29066:42:27"},"nodeType":"YulFunctionCall","src":"29066:71:27"},"nodeType":"YulExpressionStatement","src":"29066:71:27"}]},"name":"abi_encode_tuple_t_uint96_t_uint96__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28904:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28916:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28924:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28935:4:27","type":""}],"src":"28816:328:27"},{"body":{"nodeType":"YulBlock","src":"29275:205:27","statements":[{"nodeType":"YulAssignment","src":"29285:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29297:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29308:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29293:3:27"},"nodeType":"YulFunctionCall","src":"29293:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29285:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"29365:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29378:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29389:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29374:3:27"},"nodeType":"YulFunctionCall","src":"29374:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"29321:43:27"},"nodeType":"YulFunctionCall","src":"29321:71:27"},"nodeType":"YulExpressionStatement","src":"29321:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"29445:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29458:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"29469:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29454:3:27"},"nodeType":"YulFunctionCall","src":"29454:18:27"}],"functionName":{"name":"abi_encode_t_uint96_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"29402:42:27"},"nodeType":"YulFunctionCall","src":"29402:71:27"},"nodeType":"YulExpressionStatement","src":"29402:71:27"}]},"name":"abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29239:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29251:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29259:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29270:4:27","type":""}],"src":"29150:330:27"},{"body":{"nodeType":"YulBlock","src":"29592:66:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29614:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"29622:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29610:3:27"},"nodeType":"YulFunctionCall","src":"29610:14:27"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"29626:24:27","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29603:6:27"},"nodeType":"YulFunctionCall","src":"29603:48:27"},"nodeType":"YulExpressionStatement","src":"29603:48:27"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29584:6:27","type":""}],"src":"29486:172:27"},{"body":{"nodeType":"YulBlock","src":"29810:220:27","statements":[{"nodeType":"YulAssignment","src":"29820:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29886:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"29891:2:27","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29827:58:27"},"nodeType":"YulFunctionCall","src":"29827:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29820:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29992:3:27"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulIdentifier","src":"29903:88:27"},"nodeType":"YulFunctionCall","src":"29903:93:27"},"nodeType":"YulExpressionStatement","src":"29903:93:27"},{"nodeType":"YulAssignment","src":"30005:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30016:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30021:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30012:3:27"},"nodeType":"YulFunctionCall","src":"30012:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30005:3:27"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29798:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29806:3:27","type":""}],"src":"29664:366:27"},{"body":{"nodeType":"YulBlock","src":"30207:248:27","statements":[{"nodeType":"YulAssignment","src":"30217:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30229:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"30240:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30225:3:27"},"nodeType":"YulFunctionCall","src":"30225:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30217:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30264:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"30275:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30260:3:27"},"nodeType":"YulFunctionCall","src":"30260:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30283:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"30289:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30279:3:27"},"nodeType":"YulFunctionCall","src":"30279:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30253:6:27"},"nodeType":"YulFunctionCall","src":"30253:47:27"},"nodeType":"YulExpressionStatement","src":"30253:47:27"},{"nodeType":"YulAssignment","src":"30309:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30443:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30317:124:27"},"nodeType":"YulFunctionCall","src":"30317:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30309:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30187:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30202:4:27","type":""}],"src":"30036:419:27"},{"body":{"nodeType":"YulBlock","src":"30567:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30589:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"30597:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30585:3:27"},"nodeType":"YulFunctionCall","src":"30585:14:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"30601:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30578:6:27"},"nodeType":"YulFunctionCall","src":"30578:49:27"},"nodeType":"YulExpressionStatement","src":"30578:49:27"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30559:6:27","type":""}],"src":"30461:173:27"},{"body":{"nodeType":"YulBlock","src":"30786:220:27","statements":[{"nodeType":"YulAssignment","src":"30796:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30862:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30867:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30803:58:27"},"nodeType":"YulFunctionCall","src":"30803:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30796:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30968:3:27"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulIdentifier","src":"30879:88:27"},"nodeType":"YulFunctionCall","src":"30879:93:27"},"nodeType":"YulExpressionStatement","src":"30879:93:27"},{"nodeType":"YulAssignment","src":"30981:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30992:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"30997:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30988:3:27"},"nodeType":"YulFunctionCall","src":"30988:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30981:3:27"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30774:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30782:3:27","type":""}],"src":"30640:366:27"},{"body":{"nodeType":"YulBlock","src":"31183:248:27","statements":[{"nodeType":"YulAssignment","src":"31193:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31205:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"31216:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31201:3:27"},"nodeType":"YulFunctionCall","src":"31201:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31193:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31240:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"31251:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31236:3:27"},"nodeType":"YulFunctionCall","src":"31236:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31259:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"31265:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31255:3:27"},"nodeType":"YulFunctionCall","src":"31255:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31229:6:27"},"nodeType":"YulFunctionCall","src":"31229:47:27"},"nodeType":"YulExpressionStatement","src":"31229:47:27"},{"nodeType":"YulAssignment","src":"31285:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31419:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31293:124:27"},"nodeType":"YulFunctionCall","src":"31293:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31285:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31163:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31178:4:27","type":""}],"src":"31012:419:27"}]},"contents":"{\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function array_length_t_array$_t_bytes32_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_bytes32_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_bytes32_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encodeUpdatedPos_t_bytes32_to_t_bytes32(value0, pos) -> updatedPos {\n        abi_encode_t_bytes32_to_t_bytes32(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_bytes32_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // bytes32[] -> bytes32[]\n    function abi_encode_t_array$_t_bytes32_$dyn_memory_ptr_to_t_array$_t_bytes32_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_bytes32_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_bytes32_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_bytes32_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_bytes32_to_t_bytes32(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_bytes32_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_uint16_t_uint32_t_array$_t_bytes32_$dyn_memory_ptr__to_t_uint16_t_uint32_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value1,  add(headStart, 32))\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_bytes32_$dyn_memory_ptr_to_t_array$_t_bytes32_$dyn_memory_ptr_fromStack(value2,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_uint64t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_int256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_int256_to_t_int256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_int256(value))\n    }\n\n    function abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_int256_to_t_int256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint96(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffff)\n    }\n\n    function abi_encode_t_uint96_to_t_uint96_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint96(value))\n    }\n\n    function abi_encode_tuple_t_uint96__to_t_uint96__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint96_to_t_uint96_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint64t_uint16t_uint32t_uint32(headStart, dataEnd) -> value0, value1, value2, value3, value4 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint24(value) -> cleaned {\n        cleaned := and(value, 0xffffff)\n    }\n\n    function abi_encode_t_uint24_to_t_uint24_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint24(value))\n    }\n\n    function abi_encode_tuple_t_uint32_t_uint32_t_uint32_t_uint32_t_uint32_t_uint24_t_uint24_t_uint24_t_uint24__to_t_uint32_t_uint32_t_uint32_t_uint32_t_uint32_t_uint24_t_uint24_t_uint24_t_uint24__fromStack_reversed(headStart , value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 288)\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value5,  add(headStart, 160))\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value6,  add(headStart, 192))\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value7,  add(headStart, 224))\n\n        abi_encode_t_uint24_to_t_uint24_fromStack(value8,  add(headStart, 256))\n\n    }\n\n    function abi_encode_tuple_t_uint16__to_t_uint16__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_uint96_t_uint64_t_address_t_array$_t_address_$dyn_memory_ptr__to_t_uint96_t_uint64_t_address_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint96_to_t_uint96_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function validator_revert_t_uint96(value) {\n        if iszero(eq(value, cleanup_t_uint96(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint96(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint96(value)\n    }\n\n    function abi_decode_tuple_t_uint64t_uint96(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint96(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint16_t_uint32_t_uint32_t_uint32__to_t_uint16_t_uint32_t_uint32_t_uint32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9(memPtr) {\n\n        mstore(add(memPtr, 0), \"not implemented\")\n\n    }\n\n    function abi_encode_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_32d075b43bd38f25ee5981ec20d2adc90449bf9822d065b5dee1ff7a3dcb82b9_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0(memPtr) {\n\n        mstore(add(memPtr, 0), \"nonexistent request\")\n\n    }\n\n    function abi_encode_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3ef79182ce6d98492afe1a096e15a790f2acf5883840b8ae9a09f74be7e958f0_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function checked_sub_t_uint96(x, y) -> diff {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        diff := sub(x, y)\n\n        if gt(diff, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint96_t_bool__to_t_uint256_t_uint96_t_bool__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint96_to_t_uint96_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint16_t_uint32_t_uint32__to_t_uint256_t_uint256_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint64(value) -> ret {\n        value := cleanup_t_uint64(value)\n        if eq(value, 0xffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function checked_add_t_uint96(x, y) -> sum {\n        x := cleanup_t_uint96(x)\n        y := cleanup_t_uint96(y)\n        sum := add(x, y)\n\n        if gt(sum, 0xffffffffffffffffffffffff) { panic_error_0x11() }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint96_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint96(value)))\n    }\n\n    function abi_encode_t_uint96_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, convert_t_uint96_to_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint96_t_uint96__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint96__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint96_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"107":[{"length":32,"start":2200},{"length":32,"start":2727}],"109":[{"length":32,"start":2131},{"length":32,"start":6364}],"112":[{"length":32,"start":3508},{"length":32,"start":3838}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101575760003560e01c80638b673e7a116100c3578063afc69b531161007c578063afc69b5314610375578063c3f909d414610391578063d7ae1d30146103b2578063e82ad7d4146103ce578063ed5eb06d146103fe578063f2fde38b1461042e57610157565b80638b673e7a146102c25780638da5cb5b146102cc5780639f87fad7146102ea578063a21a23e414610306578063a410347f14610324578063a47c76961461034257610157565b80635fbbc0d2116101155780635fbbc0d21461022057806364d51a2a146102465780637341c10c1461026457806379ba509714610280578063808974ff1461028a57806382359740146102a657610157565b80620122911461015c57806304c357cb1461017c57806308e3898e14610198578063356dac71146101b45780633d18651e146101d25780635d3b1d30146101f0575b600080fd5b61016461044a565b6040516101739392919061239f565b60405180910390f35b6101966004803603810190610191919061248f565b6104aa565b005b6101b260048036038101906101ad919061265e565b6104e5565b005b6101bc610a96565b6040516101c991906126e6565b60405180910390f35b6101da610aa5565b6040516101e79190612728565b60405180910390f35b61020a600480360381019061020591906127c7565b610ac9565b6040516102179190612851565b60405180910390f35b610228610d73565b60405161023d9998979695949392919061288a565b60405180910390f35b61024e610db2565b60405161025b9190612917565b60405180910390f35b61027e6004803603810190610279919061248f565b610dd6565b005b610288611062565b005b6102a4600480360381019061029f9190612932565b6111f7565b005b6102c060048036038101906102bb9190612972565b611299565b005b6102ca6112d4565b005b6102d4611341565b6040516102e191906129ae565b60405180910390f35b61030460048036038101906102ff919061248f565b61136a565b005b61030e61171f565b60405161031b91906129d8565b60405180910390f35b61032c6118da565b6040516103399190612728565b60405180910390f35b61035c60048036038101906103579190612972565b6118fe565b60405161036c9493929190612ab1565b60405180910390f35b61038f600480360381019061038a9190612b29565b611b03565b005b610399611ccd565b6040516103a99493929190612b69565b60405180910390f35b6103cc60048036038101906103c7919061248f565b611ced565b005b6103e860048036038101906103e39190612972565b611f59565b6040516103f59190612bc9565b60405180910390f35b6104186004803603810190610413919061248f565b611f96565b6040516104259190612bc9565b60405180910390f35b61044860048036038101906104439190612be4565b6120cb565b005b60008060606003621e8480600067ffffffffffffffff8111156104705761046f61251b565b5b60405190808252806020026020018201604052801561049e5781602001602082028036833780820191505090505b50925092509250909192565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dc90612c6e565b60405180910390fd5b60005a905060006008600086815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1603610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055890612cda565b60405180910390fd5b6000600860008681526020019081526020016000206040518060600160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905060008351036106d857806040015163ffffffff1667ffffffffffffffff81111561062e5761062d61251b565b5b60405190808252806020026020018201604052801561065c5781602001602082028036833780820191505090505b50925060005b816040015163ffffffff168110156106d2578581604051602001610687929190612cfa565b6040516020818303038152906040528051906020012060001c8482815181106106b3576106b2612d23565b5b60200260200101818152505080806106ca90612d81565b915050610662565b5061071d565b806040015163ffffffff1683511461071c576040517f3f3df5b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600080631fe543e360e01b878660405160240161073b929190612e87565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506001600260000160006101000a81548160ff02191690831515021790555060008673ffffffffffffffffffffffffffffffffffffffff16846020015163ffffffff16836040516107ea9190612f28565b60006040518083038160008787f1925050503d8060008114610828576040519150601f19603f3d011682016040523d82523d6000602084013e61082d565b606091505b505090506000600260000160006101000a81548160ff02191690831515021790555060007f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff165a8761088c9190612f3f565b6108969190612f73565b7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff166108cf9190612fb5565b9050806bffffffffffffffffffffffff1660066000876000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16101561096d576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000876000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff166109c29190612fe9565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550600860008a8152602001908152602001600020600080820160006101000a81549067ffffffffffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff02191690555050887f7dffc5ae5ee4e2e4df1651cf6ad329a73cebdb728f37ea0187b9b17e036756e48a8385604051610a8393929190613029565b60405180910390a2505050505050505050565b6000660e35fa931a0000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260000160009054906101000a900460ff1615610b15576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8433610b218282611f96565b610b57576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610c07576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000815480929190610c1c90612d81565b919050559050600060056000815480929190610c3790612d81565b91905055905060405180606001604052808a67ffffffffffffffff1681526020018863ffffffff1681526020018763ffffffff168152506008600084815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff168967ffffffffffffffff168b7f63373d1c4696214b898952999c9aaec57dac1ee2723cec59bea6888f489a977285858d8d8d604051610d5b959493929190613060565b60405180910390a48194505050505095945050505050565b6000806000806000806000806000620186a080620186a080620186a0600080600080985098509850985098509850985098509850909192939495969798565b7f000000000000000000000000000000000000000000000000000000000000000081565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e8c576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610efc57806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401610ef391906129ae565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061ffff16600760008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208054905003610f83576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f8d8484611f96565b61105c57600760008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff167f752ead9f4536ec1319ee3a5a604e1d65eded22e0924251552ba14ae4faa1bbc38460405161105391906129ae565b60405180910390a25b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e9906130ff565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600260000160009054906101000a900460ff1615611241576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112958282600067ffffffffffffffff8111156112615761126061251b565b5b60405190808252806020026020018201604052801561128f5781602001602082028036833780820191505090505b506104e5565b5050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cb90612c6e565b60405180910390fd5b6112dc6120df565b604051806020016040528060001515815250600260008201518160000160006101000a81548160ff0219169083151502179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611420576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461149057806040517fd8a3fb5200000000000000000000000000000000000000000000000000000000815260040161148791906129ae565b60405180910390fd5b838361149c8282611f96565b6114d2576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260000160009054906101000a900460ff161561151c576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008867ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905060005b81805490508110156116d3578673ffffffffffffffffffffffffffffffffffffffff168282815481106115805761157f612d23565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036116c057600082600184805490506115da9190612f3f565b815481106115eb576115ea612d23565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508083838154811061162c5761162b612d23565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828054806116855761168461311f565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055506116d3565b80806116cb90612d81565b91505061154a565b508667ffffffffffffffff167ff9bc9d5b5733d904409def43a5ecc888dbdac9a95687780d8fd489d3bb3813fc8760405161170e91906129ae565b60405180910390a250505050505050565b60006003600081819054906101000a900467ffffffffffffffff16809291906117479061314e565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff1681525060066000600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff167f464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf336040516118b691906129ae565b60405180910390a2600360009054906101000a900467ffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600660008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036119b5576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166000600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080805480602002602001604051908101604052809291908181526020018280548015611aed57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611aa3575b5050505050905093509350935093509193509193565b600073ffffffffffffffffffffffffffffffffffffffff16600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611bb3576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16905081600660008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff16611c4b919061317e565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508267ffffffffffffffff167fd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8828484611cb2919061317e565b604051611cc09291906131f9565b60405180910390a2505050565b6000806000806004622625a0610a8c618205935093509350935090919293565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611da3576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e1357806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401611e0a91906129ae565b60405180910390fd5b600260000160009054906101000a900460ff1615611e5d576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8367ffffffffffffffff167fe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd4981584600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16604051611edb929190613222565b60405180910390a2600660008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050505050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8d90612c6e565b60405180910390fd5b600080600760008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561204057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ff6575b5050505050905060005b81518110156120be578373ffffffffffffffffffffffffffffffffffffffff1682828151811061207d5761207c612d23565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036120ab576001925050506120c5565b80806120b690612d81565b91505061204a565b5060009150505b92915050565b6120d36120df565b6120dc8161216f565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461216d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216490613297565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121d490613303565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600061ffff82169050919050565b6122b28161229b565b82525050565b600063ffffffff82169050919050565b6122d1816122b8565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61231681612303565b82525050565b6000612328838361230d565b60208301905092915050565b6000602082019050919050565b600061234c826122d7565b61235681856122e2565b9350612361836122f3565b8060005b83811015612392578151612379888261231c565b975061238483612334565b925050600181019050612365565b5085935050505092915050565b60006060820190506123b460008301866122a9565b6123c160208301856122c8565b81810360408301526123d38184612341565b9050949350505050565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b61240e816123f1565b811461241957600080fd5b50565b60008135905061242b81612405565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061245c82612431565b9050919050565b61246c81612451565b811461247757600080fd5b50565b60008135905061248981612463565b92915050565b600080604083850312156124a6576124a56123e7565b5b60006124b48582860161241c565b92505060206124c58582860161247a565b9150509250929050565b6000819050919050565b6124e2816124cf565b81146124ed57600080fd5b50565b6000813590506124ff816124d9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6125538261250a565b810181811067ffffffffffffffff821117156125725761257161251b565b5b80604052505050565b60006125856123dd565b9050612591828261254a565b919050565b600067ffffffffffffffff8211156125b1576125b061251b565b5b602082029050602081019050919050565b600080fd5b60006125da6125d584612596565b61257b565b905080838252602082019050602084028301858111156125fd576125fc6125c2565b5b835b81811015612626578061261288826124f0565b8452602084019350506020810190506125ff565b5050509392505050565b600082601f83011261264557612644612505565b5b81356126558482602086016125c7565b91505092915050565b600080600060608486031215612677576126766123e7565b5b6000612685868287016124f0565b93505060206126968682870161247a565b925050604084013567ffffffffffffffff8111156126b7576126b66123ec565b5b6126c386828701612630565b9150509250925092565b6000819050919050565b6126e0816126cd565b82525050565b60006020820190506126fb60008301846126d7565b92915050565b60006bffffffffffffffffffffffff82169050919050565b61272281612701565b82525050565b600060208201905061273d6000830184612719565b92915050565b61274c81612303565b811461275757600080fd5b50565b60008135905061276981612743565b92915050565b6127788161229b565b811461278357600080fd5b50565b6000813590506127958161276f565b92915050565b6127a4816122b8565b81146127af57600080fd5b50565b6000813590506127c18161279b565b92915050565b600080600080600060a086880312156127e3576127e26123e7565b5b60006127f18882890161275a565b95505060206128028882890161241c565b945050604061281388828901612786565b9350506060612824888289016127b2565b9250506080612835888289016127b2565b9150509295509295909350565b61284b816124cf565b82525050565b60006020820190506128666000830184612842565b92915050565b600062ffffff82169050919050565b6128848161286c565b82525050565b6000610120820190506128a0600083018c6122c8565b6128ad602083018b6122c8565b6128ba604083018a6122c8565b6128c760608301896122c8565b6128d460808301886122c8565b6128e160a083018761287b565b6128ee60c083018661287b565b6128fb60e083018561287b565b61290961010083018461287b565b9a9950505050505050505050565b600060208201905061292c60008301846122a9565b92915050565b60008060408385031215612949576129486123e7565b5b6000612957858286016124f0565b92505060206129688582860161247a565b9150509250929050565b600060208284031215612988576129876123e7565b5b60006129968482850161241c565b91505092915050565b6129a881612451565b82525050565b60006020820190506129c3600083018461299f565b92915050565b6129d2816123f1565b82525050565b60006020820190506129ed60008301846129c9565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a2881612451565b82525050565b6000612a3a8383612a1f565b60208301905092915050565b6000602082019050919050565b6000612a5e826129f3565b612a6881856129fe565b9350612a7383612a0f565b8060005b83811015612aa4578151612a8b8882612a2e565b9750612a9683612a46565b925050600181019050612a77565b5085935050505092915050565b6000608082019050612ac66000830187612719565b612ad360208301866129c9565b612ae0604083018561299f565b8181036060830152612af28184612a53565b905095945050505050565b612b0681612701565b8114612b1157600080fd5b50565b600081359050612b2381612afd565b92915050565b60008060408385031215612b4057612b3f6123e7565b5b6000612b4e8582860161241c565b9250506020612b5f85828601612b14565b9150509250929050565b6000608082019050612b7e60008301876122a9565b612b8b60208301866122c8565b612b9860408301856122c8565b612ba560608301846122c8565b95945050505050565b60008115159050919050565b612bc381612bae565b82525050565b6000602082019050612bde6000830184612bba565b92915050565b600060208284031215612bfa57612bf96123e7565b5b6000612c088482850161247a565b91505092915050565b600082825260208201905092915050565b7f6e6f7420696d706c656d656e7465640000000000000000000000000000000000600082015250565b6000612c58600f83612c11565b9150612c6382612c22565b602082019050919050565b60006020820190508181036000830152612c8781612c4b565b9050919050565b7f6e6f6e6578697374656e74207265717565737400000000000000000000000000600082015250565b6000612cc4601383612c11565b9150612ccf82612c8e565b602082019050919050565b60006020820190508181036000830152612cf381612cb7565b9050919050565b6000604082019050612d0f6000830185612842565b612d1c6020830184612842565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d8c826124cf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612dbe57612dbd612d52565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612dfe816124cf565b82525050565b6000612e108383612df5565b60208301905092915050565b6000602082019050919050565b6000612e3482612dc9565b612e3e8185612dd4565b9350612e4983612de5565b8060005b83811015612e7a578151612e618882612e04565b9750612e6c83612e1c565b925050600181019050612e4d565b5085935050505092915050565b6000604082019050612e9c6000830185612842565b8181036020830152612eae8184612e29565b90509392505050565b600081519050919050565b600081905092915050565b60005b83811015612eeb578082015181840152602081019050612ed0565b60008484015250505050565b6000612f0282612eb7565b612f0c8185612ec2565b9350612f1c818560208601612ecd565b80840191505092915050565b6000612f348284612ef7565b915081905092915050565b6000612f4a826124cf565b9150612f55836124cf565b9250828203905081811115612f6d57612f6c612d52565b5b92915050565b6000612f7e826124cf565b9150612f89836124cf565b9250828202612f97816124cf565b91508282048414831517612fae57612fad612d52565b5b5092915050565b6000612fc0826124cf565b9150612fcb836124cf565b9250828201905080821115612fe357612fe2612d52565b5b92915050565b6000612ff482612701565b9150612fff83612701565b925082820390506bffffffffffffffffffffffff81111561302357613022612d52565b5b92915050565b600060608201905061303e6000830186612842565b61304b6020830185612719565b6130586040830184612bba565b949350505050565b600060a0820190506130756000830188612842565b6130826020830187612842565b61308f60408301866122a9565b61309c60608301856122c8565b6130a960808301846122c8565b9695505050505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006130e9601683612c11565b91506130f4826130b3565b602082019050919050565b60006020820190508181036000830152613118816130dc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000613159826123f1565b915067ffffffffffffffff820361317357613172612d52565b5b600182019050919050565b600061318982612701565b915061319483612701565b925082820190506bffffffffffffffffffffffff8111156131b8576131b7612d52565b5b92915050565b6000819050919050565b60006131e36131de6131d984612701565b6131be565b6124cf565b9050919050565b6131f3816131c8565b82525050565b600060408201905061320e60008301856131ea565b61321b60208301846131ea565b9392505050565b6000604082019050613237600083018561299f565b61324460208301846131ea565b9392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000613281601683612c11565b915061328c8261324b565b602082019050919050565b600060208201905081810360008301526132b081613274565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006132ed601783612c11565b91506132f8826132b7565b602082019050919050565b6000602082019050818103600083015261331c816132e0565b905091905056fea26469706673582212205de4fdc958923e3a22dfb88fa01b0acc06102f9f19127e6af59358bb01baeb0c64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x157 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8B673E7A GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xAFC69B53 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xAFC69B53 EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0xC3F909D4 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0xD7AE1D30 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0xE82AD7D4 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xED5EB06D EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42E JUMPI PUSH2 0x157 JUMP JUMPDEST DUP1 PUSH4 0x8B673E7A EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x9F87FAD7 EQ PUSH2 0x2EA JUMPI DUP1 PUSH4 0xA21A23E4 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0xA410347F EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0xA47C7696 EQ PUSH2 0x342 JUMPI PUSH2 0x157 JUMP JUMPDEST DUP1 PUSH4 0x5FBBC0D2 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x5FBBC0D2 EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x64D51A2A EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0x7341C10C EQ PUSH2 0x264 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x808974FF EQ PUSH2 0x28A JUMPI DUP1 PUSH4 0x82359740 EQ PUSH2 0x2A6 JUMPI PUSH2 0x157 JUMP JUMPDEST DUP1 PUSH3 0x12291 EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0x4C357CB EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0x8E3898E EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x356DAC71 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x3D18651E EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x5D3B1D30 EQ PUSH2 0x1F0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x164 PUSH2 0x44A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x173 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x239F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x196 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x4AA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0x265E JUMP JUMPDEST PUSH2 0x4E5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BC PUSH2 0xA96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C9 SWAP2 SWAP1 PUSH2 0x26E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DA PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x205 SWAP2 SWAP1 PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0xAC9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x217 SWAP2 SWAP1 PUSH2 0x2851 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x228 PUSH2 0xD73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x288A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x24E PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25B SWAP2 SWAP1 PUSH2 0x2917 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x279 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0xDD6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x288 PUSH2 0x1062 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x29F SWAP2 SWAP1 PUSH2 0x2932 JUMP JUMPDEST PUSH2 0x11F7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2BB SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x1299 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CA PUSH2 0x12D4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D4 PUSH2 0x1341 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2E1 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x304 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x136A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x30E PUSH2 0x171F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x29D8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x32C PUSH2 0x18DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x339 SWAP2 SWAP1 PUSH2 0x2728 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x35C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x357 SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x18FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x36C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x38F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38A SWAP2 SWAP1 PUSH2 0x2B29 JUMP JUMPDEST PUSH2 0x1B03 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x399 PUSH2 0x1CCD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3A9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C7 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x1CED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3E3 SWAP2 SWAP1 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x1F59 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x418 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x413 SWAP2 SWAP1 PUSH2 0x248F JUMP JUMPDEST PUSH2 0x1F96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x425 SWAP2 SWAP1 PUSH2 0x2BC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x448 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x443 SWAP2 SWAP1 PUSH2 0x2BE4 JUMP JUMPDEST PUSH2 0x20CB JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x3 PUSH3 0x1E8480 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x470 JUMPI PUSH2 0x46F PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x49E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4DC SWAP1 PUSH2 0x2C6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND SUB PUSH2 0x561 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x558 SWAP1 PUSH2 0x2CDA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x8 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x8 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0xC SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x6D8 JUMPI DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x62E JUMPI PUSH2 0x62D PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x65C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP2 LT ISZERO PUSH2 0x6D2 JUMPI DUP6 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x687 SWAP3 SWAP2 SWAP1 PUSH2 0x2CFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6B3 JUMPI PUSH2 0x6B2 PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH2 0x6CA SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x662 JUMP JUMPDEST POP PUSH2 0x71D JUMP JUMPDEST DUP1 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 MLOAD EQ PUSH2 0x71C JUMPI PUSH1 0x40 MLOAD PUSH32 0x3F3DF5B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x1FE543E3 PUSH1 0xE0 SHL DUP8 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x73B SWAP3 SWAP2 SWAP1 PUSH2 0x2E87 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x1 PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH1 0x20 ADD MLOAD PUSH4 0xFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x7EA SWAP2 SWAP1 PUSH2 0x2F28 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP8 CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x828 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x82D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND GAS DUP8 PUSH2 0x88C SWAP2 SWAP1 PUSH2 0x2F3F JUMP JUMPDEST PUSH2 0x896 SWAP2 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST PUSH32 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8CF SWAP2 SWAP1 PUSH2 0x2FB5 JUMP JUMPDEST SWAP1 POP DUP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND LT ISZERO PUSH2 0x96D JUMPI PUSH1 0x40 MLOAD PUSH32 0xF4D678B800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP8 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9C2 SWAP2 SWAP1 PUSH2 0x2FE9 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x8 PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP DUP9 PUSH32 0x7DFFC5AE5EE4E2E4DF1651CF6AD329A73CEBDB728F37EA0187B9B17E036756E4 DUP11 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH2 0xA83 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3029 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH7 0xE35FA931A0000 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xB15 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 CALLER PUSH2 0xB21 DUP3 DUP3 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0xB57 JUMPI PUSH1 0x40 MLOAD PUSH32 0x71E8313700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC07 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xC1C SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0xC37 SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x8 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x8 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0xC PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP12 PUSH32 0x63373D1C4696214B898952999C9AAEC57DAC1EE2723CEC59BEA6888F489A9772 DUP6 DUP6 DUP14 DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0xD5B SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3060 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP2 SWAP5 POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x186A0 DUP1 PUSH3 0x186A0 DUP1 PUSH3 0x186A0 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP9 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xEFC JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD8A3FB5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF3 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH2 0xFFFF AND PUSH1 0x7 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 POP SUB PUSH2 0xF83 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5A48E0F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF8D DUP5 DUP5 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x105C JUMPI PUSH1 0x7 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP4 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x752EAD9F4536EC1319EE3A5A604E1D65EDED22E0924251552BA14AE4FAA1BBC3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1053 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x10F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10E9 SWAP1 PUSH2 0x30FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1241 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1295 DUP3 DUP3 PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1261 JUMPI PUSH2 0x1260 PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x128F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH2 0x4E5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12CB SWAP1 PUSH2 0x2C6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12DC PUSH2 0x20DF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH32 0x4B2974A542484CBA2783812FF8033F7FC682CAC2FE0905C28C5E27869B3155BE PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1420 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1490 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD8A3FB5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1487 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP4 PUSH2 0x149C DUP3 DUP3 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x14D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x71E8313700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x151C JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 0x16D3 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1580 JUMPI PUSH2 0x157F PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x16C0 JUMPI PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 DUP1 SLOAD SWAP1 POP PUSH2 0x15DA SWAP2 SWAP1 PUSH2 0x2F3F JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x15EB JUMPI PUSH2 0x15EA PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 DUP4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x162C JUMPI PUSH2 0x162B PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 DUP1 SLOAD DUP1 PUSH2 0x1685 JUMPI PUSH2 0x1684 PUSH2 0x311F JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE POP PUSH2 0x16D3 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x16CB SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x154A JUMP JUMPDEST POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0xF9BC9D5B5733D904409DEF43A5ECC888DBDAC9A95687780D8FD489D3BB3813FC DUP8 PUSH1 0x40 MLOAD PUSH2 0x170E SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP2 DUP2 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x1747 SWAP1 PUSH2 0x314E JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH8 0xFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP PUSH1 0x6 PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0x464722B4166576D3DCBBA877B999BC35CF911F4EAF434B7EBA68FA113951D0BF CALLER PUSH1 0x40 MLOAD PUSH2 0x18B6 SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP8 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19B5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x7 PUSH1 0x0 DUP10 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1AED JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1AA3 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x6 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1BB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C4B SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0xD39EC07F4E209F627A4C427971473820DC129761BA28DE8906BD56F57101D4F8 DUP3 DUP5 DUP5 PUSH2 0x1CB2 SWAP2 SWAP1 PUSH2 0x317E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CC0 SWAP3 SWAP2 SWAP1 PUSH2 0x31F9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x4 PUSH3 0x2625A0 PUSH2 0xA8C PUSH2 0x8205 SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1F6A65B600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1E13 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD8A3FB5200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E0A SWAP2 SWAP1 PUSH2 0x29AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x1E5D JUMPI PUSH1 0x40 MLOAD PUSH32 0xED3BA6A600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH32 0xE8ED5B475A5B5987AA9165E8731BB78043F39EEE32EC5A1169A89E27FCD49815 DUP5 PUSH1 0x6 PUSH1 0x0 DUP9 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH2 0x1EDB SWAP3 SWAP2 SWAP1 PUSH2 0x3222 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1F8D SWAP1 PUSH2 0x2C6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x7 PUSH1 0x0 DUP6 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2040 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1FF6 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x20BE JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x207D JUMPI PUSH2 0x207C PUSH2 0x2D23 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x20AB JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x20C5 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x20B6 SWAP1 PUSH2 0x2D81 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x204A JUMP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x20D3 PUSH2 0x20DF JUMP JUMPDEST PUSH2 0x20DC DUP2 PUSH2 0x216F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x216D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2164 SWAP1 PUSH2 0x3297 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x21DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21D4 SWAP1 PUSH2 0x3303 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22B2 DUP2 PUSH2 0x229B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22D1 DUP2 PUSH2 0x22B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2316 DUP2 PUSH2 0x2303 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2328 DUP4 DUP4 PUSH2 0x230D JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x234C DUP3 PUSH2 0x22D7 JUMP JUMPDEST PUSH2 0x2356 DUP2 DUP6 PUSH2 0x22E2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2361 DUP4 PUSH2 0x22F3 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2392 JUMPI DUP2 MLOAD PUSH2 0x2379 DUP9 DUP3 PUSH2 0x231C JUMP JUMPDEST SWAP8 POP PUSH2 0x2384 DUP4 PUSH2 0x2334 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2365 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x23B4 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x22A9 JUMP JUMPDEST PUSH2 0x23C1 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x22C8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x23D3 DUP2 DUP5 PUSH2 0x2341 JUMP JUMPDEST SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x240E DUP2 PUSH2 0x23F1 JUMP JUMPDEST DUP2 EQ PUSH2 0x2419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x242B DUP2 PUSH2 0x2405 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x245C DUP3 PUSH2 0x2431 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x246C DUP2 PUSH2 0x2451 JUMP JUMPDEST DUP2 EQ PUSH2 0x2477 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2489 DUP2 PUSH2 0x2463 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24A6 JUMPI PUSH2 0x24A5 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24B4 DUP6 DUP3 DUP7 ADD PUSH2 0x241C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24C5 DUP6 DUP3 DUP7 ADD PUSH2 0x247A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x24E2 DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP2 EQ PUSH2 0x24ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x24FF DUP2 PUSH2 0x24D9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2553 DUP3 PUSH2 0x250A JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2572 JUMPI PUSH2 0x2571 PUSH2 0x251B JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2585 PUSH2 0x23DD JUMP JUMPDEST SWAP1 POP PUSH2 0x2591 DUP3 DUP3 PUSH2 0x254A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x25B1 JUMPI PUSH2 0x25B0 PUSH2 0x251B JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x25DA PUSH2 0x25D5 DUP5 PUSH2 0x2596 JUMP JUMPDEST PUSH2 0x257B JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x25FD JUMPI PUSH2 0x25FC PUSH2 0x25C2 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2626 JUMPI DUP1 PUSH2 0x2612 DUP9 DUP3 PUSH2 0x24F0 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25FF JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2645 JUMPI PUSH2 0x2644 PUSH2 0x2505 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2655 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x25C7 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2677 JUMPI PUSH2 0x2676 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2685 DUP7 DUP3 DUP8 ADD PUSH2 0x24F0 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2696 DUP7 DUP3 DUP8 ADD PUSH2 0x247A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26B7 JUMPI PUSH2 0x26B6 PUSH2 0x23EC JUMP JUMPDEST JUMPDEST PUSH2 0x26C3 DUP7 DUP3 DUP8 ADD PUSH2 0x2630 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x26E0 DUP2 PUSH2 0x26CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26FB PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2722 DUP2 PUSH2 0x2701 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x273D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2719 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x274C DUP2 PUSH2 0x2303 JUMP JUMPDEST DUP2 EQ PUSH2 0x2757 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2769 DUP2 PUSH2 0x2743 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2778 DUP2 PUSH2 0x229B JUMP JUMPDEST DUP2 EQ PUSH2 0x2783 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2795 DUP2 PUSH2 0x276F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27A4 DUP2 PUSH2 0x22B8 JUMP JUMPDEST DUP2 EQ PUSH2 0x27AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27C1 DUP2 PUSH2 0x279B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x27E3 JUMPI PUSH2 0x27E2 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x27F1 DUP9 DUP3 DUP10 ADD PUSH2 0x275A JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0x2802 DUP9 DUP3 DUP10 ADD PUSH2 0x241C JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x2813 DUP9 DUP3 DUP10 ADD PUSH2 0x2786 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0x2824 DUP9 DUP3 DUP10 ADD PUSH2 0x27B2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x2835 DUP9 DUP3 DUP10 ADD PUSH2 0x27B2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH2 0x284B DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2866 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2842 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2884 DUP2 PUSH2 0x286C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP3 ADD SWAP1 POP PUSH2 0x28A0 PUSH1 0x0 DUP4 ADD DUP13 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28AD PUSH1 0x20 DUP4 ADD DUP12 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28BA PUSH1 0x40 DUP4 ADD DUP11 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28C7 PUSH1 0x60 DUP4 ADD DUP10 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28D4 PUSH1 0x80 DUP4 ADD DUP9 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x28E1 PUSH1 0xA0 DUP4 ADD DUP8 PUSH2 0x287B JUMP JUMPDEST PUSH2 0x28EE PUSH1 0xC0 DUP4 ADD DUP7 PUSH2 0x287B JUMP JUMPDEST PUSH2 0x28FB PUSH1 0xE0 DUP4 ADD DUP6 PUSH2 0x287B JUMP JUMPDEST PUSH2 0x2909 PUSH2 0x100 DUP4 ADD DUP5 PUSH2 0x287B JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x292C PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22A9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2949 JUMPI PUSH2 0x2948 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2957 DUP6 DUP3 DUP7 ADD PUSH2 0x24F0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2968 DUP6 DUP3 DUP7 ADD PUSH2 0x247A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2988 JUMPI PUSH2 0x2987 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2996 DUP5 DUP3 DUP6 ADD PUSH2 0x241C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29A8 DUP2 PUSH2 0x2451 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29C3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x299F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29D2 DUP2 PUSH2 0x23F1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x29ED PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x29C9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2A28 DUP2 PUSH2 0x2451 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3A DUP4 DUP4 PUSH2 0x2A1F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A5E DUP3 PUSH2 0x29F3 JUMP JUMPDEST PUSH2 0x2A68 DUP2 DUP6 PUSH2 0x29FE JUMP JUMPDEST SWAP4 POP PUSH2 0x2A73 DUP4 PUSH2 0x2A0F JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2AA4 JUMPI DUP2 MLOAD PUSH2 0x2A8B DUP9 DUP3 PUSH2 0x2A2E JUMP JUMPDEST SWAP8 POP PUSH2 0x2A96 DUP4 PUSH2 0x2A46 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2A77 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2AC6 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2719 JUMP JUMPDEST PUSH2 0x2AD3 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x29C9 JUMP JUMPDEST PUSH2 0x2AE0 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x299F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2AF2 DUP2 DUP5 PUSH2 0x2A53 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2B06 DUP2 PUSH2 0x2701 JUMP JUMPDEST DUP2 EQ PUSH2 0x2B11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2B23 DUP2 PUSH2 0x2AFD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2B40 JUMPI PUSH2 0x2B3F PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B4E DUP6 DUP3 DUP7 ADD PUSH2 0x241C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2B5F DUP6 DUP3 DUP7 ADD PUSH2 0x2B14 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2B7E PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x22A9 JUMP JUMPDEST PUSH2 0x2B8B PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x2B98 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x2BA5 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x22C8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BC3 DUP2 PUSH2 0x2BAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2BDE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2BFA JUMPI PUSH2 0x2BF9 PUSH2 0x23E7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C08 DUP5 DUP3 DUP6 ADD PUSH2 0x247A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x6E6F7420696D706C656D656E7465640000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C58 PUSH1 0xF DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C63 DUP3 PUSH2 0x2C22 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C87 DUP2 PUSH2 0x2C4B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F6E6578697374656E74207265717565737400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC4 PUSH1 0x13 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CCF DUP3 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF3 DUP2 PUSH2 0x2CB7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2D0F PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x2D1C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2842 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D8C DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2DBE JUMPI PUSH2 0x2DBD PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2DFE DUP2 PUSH2 0x24CF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E10 DUP4 DUP4 PUSH2 0x2DF5 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E34 DUP3 PUSH2 0x2DC9 JUMP JUMPDEST PUSH2 0x2E3E DUP2 DUP6 PUSH2 0x2DD4 JUMP JUMPDEST SWAP4 POP PUSH2 0x2E49 DUP4 PUSH2 0x2DE5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2E7A JUMPI DUP2 MLOAD PUSH2 0x2E61 DUP9 DUP3 PUSH2 0x2E04 JUMP JUMPDEST SWAP8 POP PUSH2 0x2E6C DUP4 PUSH2 0x2E1C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2E4D JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2E9C PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2842 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2EAE DUP2 DUP5 PUSH2 0x2E29 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2EEB JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2ED0 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F02 DUP3 PUSH2 0x2EB7 JUMP JUMPDEST PUSH2 0x2F0C DUP2 DUP6 PUSH2 0x2EC2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2F1C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2ECD JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F34 DUP3 DUP5 PUSH2 0x2EF7 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F4A DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2F55 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2F6D JUMPI PUSH2 0x2F6C PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F7E DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2F89 DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x2F97 DUP2 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x2FAE JUMPI PUSH2 0x2FAD PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FC0 DUP3 PUSH2 0x24CF JUMP JUMPDEST SWAP2 POP PUSH2 0x2FCB DUP4 PUSH2 0x24CF JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2FE3 JUMPI PUSH2 0x2FE2 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FF4 DUP3 PUSH2 0x2701 JUMP JUMPDEST SWAP2 POP PUSH2 0x2FFF DUP4 PUSH2 0x2701 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3023 JUMPI PUSH2 0x3022 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x303E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x304B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x2719 JUMP JUMPDEST PUSH2 0x3058 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BBA JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x3075 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x3082 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2842 JUMP JUMPDEST PUSH2 0x308F PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x22A9 JUMP JUMPDEST PUSH2 0x309C PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x22C8 JUMP JUMPDEST PUSH2 0x30A9 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x22C8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30E9 PUSH1 0x16 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x30F4 DUP3 PUSH2 0x30B3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3118 DUP2 PUSH2 0x30DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3159 DUP3 PUSH2 0x23F1 JUMP JUMPDEST SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x3173 JUMPI PUSH2 0x3172 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3189 DUP3 PUSH2 0x2701 JUMP JUMPDEST SWAP2 POP PUSH2 0x3194 DUP4 PUSH2 0x2701 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31B8 JUMPI PUSH2 0x31B7 PUSH2 0x2D52 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31E3 PUSH2 0x31DE PUSH2 0x31D9 DUP5 PUSH2 0x2701 JUMP JUMPDEST PUSH2 0x31BE JUMP JUMPDEST PUSH2 0x24CF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x31F3 DUP2 PUSH2 0x31C8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x320E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x31EA JUMP JUMPDEST PUSH2 0x321B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x31EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3237 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x299F JUMP JUMPDEST PUSH2 0x3244 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x31EA JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3281 PUSH1 0x16 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x328C DUP3 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32B0 DUP2 PUSH2 0x3274 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32ED PUSH1 0x17 DUP4 PUSH2 0x2C11 JUMP JUMPDEST SWAP2 POP PUSH2 0x32F8 DUP3 PUSH2 0x32B7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x331C DUP2 PUSH2 0x32E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D 0xE4 REVERT 0xC9 PC SWAP3 RETURNDATACOPY GASPRICE 0x22 0xDF 0xB8 DUP16 LOG0 SHL EXP 0xCC MOD LT 0x2F SWAP16 NOT SLT PUSH31 0x6AF59358BB01BAEB0C64736F6C634300081400330000000000000000000000 ","sourceMap":"311:9652:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7500:142;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;9571:143;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3862:1199;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9450:117;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;390:32;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5609:769;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8749:590;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;468:43;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7646:345;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1001:265:3;;;:::i;:::-;;3411:171:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9718:119;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2288:113;;;:::i;:::-;;1317:81:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;7995:496:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6382:269;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;426:38;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6655:359;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;5263:342;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;8495:250;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;7018:228;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9841:120;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2405:290;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;811:98:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7500:142:1;7560:6;7568;7576:16;7608:1;7611:7;7634:1;7620:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7600:37;;;;;;7500:142;;;:::o;9571:143::-;9684:25;;;;;;;;;;:::i;:::-;;;;;;;;3862:1199;3979:16;3998:9;3979:28;;4049:1;4017:10;:22;4028:10;4017:22;;;;;;;;;;;:28;;;;;;;;;;;;:33;;;4013:83;;4060:29;;;;;;;;;;:::i;:::-;;;;;;;;4013:83;4101:18;4122:10;:22;4133:10;4122:22;;;;;;;;;;;4101:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4172:1;4155:6;:13;:18;4151:284;;4206:3;:12;;;4192:27;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4183:36;;4232:9;4227:119;4251:3;:12;;;4247:16;;:1;:16;4227:119;;;4321:10;4333:1;4310:25;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4300:36;;;;;;4292:45;;4280:6;4287:1;4280:9;;;;;;;;:::i;:::-;;;;;;;:57;;;;;4265:3;;;;;:::i;:::-;;;;4227:119;;;;4151:284;;;4379:3;:12;;;4362:29;;:6;:13;:29;4358:77;;4408:20;;;;;;;;;;;;;;4358:77;4151:284;4441:19;4466:20;4512:32;;;4546:10;4558:6;4489:76;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4466:99;;4597:4;4571:8;:23;;;:30;;;;;;;;;;;;;;;;;;4608:12;4626:9;:14;;4646:3;:20;;;4626:50;;4668:7;4626:50;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4607:69;;;4708:5;4682:8;:23;;;:31;;;;;;;;;;;;;;;;;;4720:14;4781;4756:39;;4768:9;4757:8;:20;;;;:::i;:::-;4756:39;;;;:::i;:::-;4744:8;:52;;;;;;:::i;:::-;4720:77;;4844:7;4807:44;;:15;:26;4823:3;:9;;;4807:26;;;;;;;;;;;;;;;:34;;;;;;;;;;;;:44;;;4803:93;;;4868:21;;;;;;;;;;;;;;4803:93;4939:7;4901:15;:26;4917:3;:9;;;4901:26;;;;;;;;;;;;;;;:34;;;:45;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;4960:10;:22;4971:10;4960:22;;;;;;;;;;;;4952:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5015:10;4994:62;5027:10;5039:7;5048;4994:62;;;;;;;;:::i;:::-;;;;;;;;3973:1088;;;;;;3862:1199;;;:::o;9450:117::-;9510:6;9531:16;9524:23;;9450:117;:::o;390:32::-;;;:::o;5609:769::-;5853:7;9377:8;:23;;;;;;;;;;;;9373:62;;;9417:11;;;;;;;;;;;;;;9373:62;5824:6:::1;5832:10;2771:34;2787:6;2795:9;2771:15;:34::i;:::-;2766:80;;2822:17;;;;;;;;;;;;;;2766:80;5913:1:::2;5872:43;;:15;:23;5888:6;5872:23;;;;;;;;;;;;;;;:29;;;;;;;;;;;;:43;;::::0;5868:92:::2;;5932:21;;;;;;;;;;;;;;5868:92;5966:17;5986:15;;:17;;;;;;;;;:::i;:::-;;;;;5966:37;;6009:15;6027:13;;:15;;;;;;;;;:::i;:::-;;;;;6009:33;;6073:82;;;;;;;;6089:6;6073:82;;;;;;6115:17;6073:82;;;;;;6144:9;6073:82;;;;::::0;6049:10:::2;:21;6060:9;6049:21;;;;;;;;;;;:106;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6335:10;6167:184;;6243:6;6167:184;;6195:8;6167:184;6211:9;6228:7;6257:28;6293:17;6318:9;6167:184;;;;;;;;;;:::i;:::-;;;;;;;;6364:9;6357:16;;;;9440:1:::1;;5609:769:::0;;;;;;;:::o;8749:590::-;8815:37;8860;8905;8950;8995;9040:19;9067;9094;9121;9170:6;9196;9222;9248;9274;9300:1;9309;9318;9327;9155:179;;;;;;;;;;;;;;;;;;8749:590;;;;;;;;;:::o;468:43::-;;;:::o;7646:345::-;7732:6;7293:13;7309:15;:23;7325:6;7309:23;;;;;;;;;;;;;;;:29;;;;;;;;;;;;7293:45;;7365:1;7348:19;;:5;:19;;;7344:68;;7384:21;;;;;;;;;;;;;;7344:68;7435:5;7421:19;;:10;:19;;;7417:68;;7472:5;7457:21;;;;;;;;;;;:::i;:::-;;;;;;;;7417:68;7780:13:::1;7750:43;;:11;:19;7762:6;7750:19;;;;;;;;;;;;;;;:26;;;;:43:::0;7746:89:::1;;7810:18;;;;;;;;;;;;;;7746:89;7845:34;7861:6;7869:9;7845:15;:34::i;:::-;7889:7;7841:61;7908:11;:19;7920:6;7908:19;;;;;;;;;;;;;;;7933:9;7908:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7968:6;7954:32;;;7976:9;7954:32;;;;;;:::i;:::-;;;;;;;;7490:1;7287:209:::0;7646:345;;;:::o;1001:265:3:-;1074:14;;;;;;;;;;;1060:28;;:10;:28;;;1052:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1122:16;1141:7;;;;;;;;;;;1122:26;;1164:10;1154:7;;:20;;;;;;;;;;;;;;;;;;1205:1;1180:14;;:27;;;;;;;;;;;;;;;;;;1250:10;1219:42;;1240:8;1219:42;;;;;;;;;;;;1046:220;1001:265::o;3411:171:1:-;9377:8;:23;;;;;;;;;;;;9373:62;;;9417:11;;;;;;;;;;;;;;9373:62;3506:71:::1;3537:10;3549:9;3574:1;3560:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3506:30;:71::i;:::-;3411:171:::0;;:::o;9718:119::-;9807:25;;;;;;;;;;:::i;:::-;;;;;;;;2288:113;1941:20:3;:18;:20::i;:::-;2343:31:1::1;;;;;;;;2367:5;2343:31;;;;::::0;2332:8:::1;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2385:11;;;;;;;;;;2288:113::o:0;1317:81:3:-;1364:7;1386;;;;;;;;;;;1379:14;;1317:81;:::o;7995:496:1:-;8096:6;7293:13;7309:15;:23;7325:6;7309:23;;;;;;;;;;;;;;;:29;;;;;;;;;;;;7293:45;;7365:1;7348:19;;:5;:19;;;7344:68;;7384:21;;;;;;;;;;;;;;7344:68;7435:5;7421:19;;:10;:19;;;7417:68;;7472:5;7457:21;;;;;;;;;;;:::i;:::-;;;;;;;;7417:68;8122:6:::1;8130:9;2771:34;2787:6;2795:9;2771:15;:34::i;:::-;2766:80;;2822:17;;;;;;;;;;;;;;2766:80;9377:8:::2;:23;;;;;;;;;;;;9373:62;;;9417:11;;;;;;;;;;;;;;9373:62;8160:27:::3;8190:11;:19;8202:6;8190:19;;;;;;;;;;;;;;;8160:49;;8220:9;8215:226;8239:9;:16;;;;8235:1;:20;8215:226;;;8290:9;8274:25;;:9;8284:1;8274:12;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:25;;::::0;8270:165:::3;;8311:12;8326:9;8355:1;8336:9;:16;;;;:20;;;;:::i;:::-;8326:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8311:46;;8382:4;8367:9;8377:1;8367:12;;;;;;;;:::i;:::-;;;;;;;;;;:19;;;;;;;;;;;;;;;;;;8396:9;:15;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;8421:5;;;8270:165;8257:3;;;;;:::i;:::-;;;;8215:226;;;;8468:6;8452:34;;;8476:9;8452:34;;;;;;:::i;:::-;;;;;;;;8154:337;7490:1:::1;;7287:209:::0;7995:496;;;:::o;6382:269::-;6439:13;6460:14;;:16;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;6516:45;;;;;;;;6537:10;6516:45;;;;;;6558:1;6516:45;;;;;6482:15;:31;6498:14;;;;;;;;;;;6482:31;;;;;;;;;;;;;;;:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6592:14;;;;;;;;;;;6572:47;;;6608:10;6572:47;;;;;;:::i;:::-;;;;;;;;6632:14;;;;;;;;;;;6625:21;;6382:269;:::o;426:38::-;;;:::o;6655:359::-;6735:14;6751:15;6768:13;6783:26;6862:1;6821:43;;:15;:23;6837:6;6821:23;;;;;;;;;;;;;;;:29;;;;;;;;;;;;:43;;;6817:92;;6881:21;;;;;;;;;;;;;;6817:92;6922:15;:23;6938:6;6922:23;;;;;;;;;;;;;;;:31;;;;;;;;;;;;6955:1;6958:15;:23;6974:6;6958:23;;;;;;;;;;;;;;;:29;;;;;;;;;;;;6989:11;:19;7001:6;6989:19;;;;;;;;;;;;;;;6914:95;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6655:359;;;;;:::o;5263:342::-;5378:1;5337:43;;:15;:23;5353:6;5337:23;;;;;;;;;;;;;;;:29;;;;;;;;;;;;:43;;;5333:92;;5397:21;;;;;;;;;;;;;;5333:92;5430:17;5450:15;:23;5466:6;5450:23;;;;;;;;;;;;;;;:31;;;;;;;;;;;;5430:51;;5522:7;5487:15;:23;5503:6;5487:23;;;;;;;;;;;;;;;:31;;;:42;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;5559:6;5540:60;;;5567:10;5592:7;5579:10;:20;;;;:::i;:::-;5540:60;;;;;;;:::i;:::-;;;;;;;;5327:278;5263:342;;:::o;8495:250::-;8558:34;8600:18;8626:23;8657:33;8713:1;8716:9;8727:5;8734;8705:35;;;;;;;;8495:250;;;;:::o;7018:228::-;7105:6;7293:13;7309:15;:23;7325:6;7309:23;;;;;;;;;;;;;;;:29;;;;;;;;;;;;7293:45;;7365:1;7348:19;;:5;:19;;;7344:68;;7384:21;;;;;;;;;;;;;;7344:68;7435:5;7421:19;;:10;:19;;;7417:68;;7472:5;7457:21;;;;;;;;;;;:::i;:::-;;;;;;;;7417:68;9377:8:::1;:23;;;;;;;;;;;;9373:62;;;9417:11;;;;;;;;;;;;;;9373:62;7158:6:::2;7137:66;;;7166:3;7171:15;:23;7187:6;7171:23;;;;;;;;;;;;;;;:31;;;;;;;;;;;;7137:66;;;;;;;:::i;:::-;;;;;;;;7217:15;:23;7233:6;7217:23;;;;;;;;;;;;;;;;7209:32:::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7287:209:::0;7018:228;;;:::o;9841:120::-;9919:4;9931:25;;;;;;;;;;:::i;:::-;;;;;;;;2405:290;2485:4;2497:26;2526:11;:19;2538:6;2526:19;;;;;;;;;;;;;;;2497:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2556:9;2551:122;2575:9;:16;2571:1;:20;2551:122;;;2626:9;2610:25;;:9;2620:1;2610:12;;;;;;;;:::i;:::-;;;;;;;;:25;;;2606:61;;2654:4;2647:11;;;;;;2606:61;2593:3;;;;;:::i;:::-;;;;2551:122;;;;2685:5;2678:12;;;2405:290;;;;;:::o;811:98:3:-;1941:20;:18;:20::i;:::-;882:22:::1;901:2;882:18;:22::i;:::-;811:98:::0;:::o;1715:111::-;1787:7;;;;;;;;;;1773:21;;:10;:21;;;1765:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1715:111::o;1482:188::-;1550:10;1544:16;;:2;:16;;;1536:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1612:2;1595:14;;:19;;;;;;;;;;;;;;;;;;1662:2;1626:39;;1653:7;;;;;;;;;;1626:39;;;;;;;;;;;;1482:188;:::o;7:89:27:-;43:7;83:6;76:5;72:18;61:29;;7:89;;;:::o;102:115::-;187:23;204:5;187:23;:::i;:::-;182:3;175:36;102:115;;:::o;223:93::-;259:7;299:10;292:5;288:22;277:33;;223:93;;;:::o;322:115::-;407:23;424:5;407:23;:::i;:::-;402:3;395:36;322:115;;:::o;443:114::-;510:6;544:5;538:12;528:22;;443:114;;;:::o;563:184::-;662:11;696:6;691:3;684:19;736:4;731:3;727:14;712:29;;563:184;;;;:::o;753:132::-;820:4;843:3;835:11;;873:4;868:3;864:14;856:22;;753:132;;;:::o;891:77::-;928:7;957:5;946:16;;891:77;;;:::o;974:108::-;1051:24;1069:5;1051:24;:::i;:::-;1046:3;1039:37;974:108;;:::o;1088:179::-;1157:10;1178:46;1220:3;1212:6;1178:46;:::i;:::-;1256:4;1251:3;1247:14;1233:28;;1088:179;;;;:::o;1273:113::-;1343:4;1375;1370:3;1366:14;1358:22;;1273:113;;;:::o;1422:732::-;1541:3;1570:54;1618:5;1570:54;:::i;:::-;1640:86;1719:6;1714:3;1640:86;:::i;:::-;1633:93;;1750:56;1800:5;1750:56;:::i;:::-;1829:7;1860:1;1845:284;1870:6;1867:1;1864:13;1845:284;;;1946:6;1940:13;1973:63;2032:3;2017:13;1973:63;:::i;:::-;1966:70;;2059:60;2112:6;2059:60;:::i;:::-;2049:70;;1905:224;1892:1;1889;1885:9;1880:14;;1845:284;;;1849:14;2145:3;2138:10;;1546:608;;;1422:732;;;;:::o;2160:585::-;2355:4;2393:2;2382:9;2378:18;2370:26;;2406:69;2472:1;2461:9;2457:17;2448:6;2406:69;:::i;:::-;2485:70;2551:2;2540:9;2536:18;2527:6;2485:70;:::i;:::-;2602:9;2596:4;2592:20;2587:2;2576:9;2572:18;2565:48;2630:108;2733:4;2724:6;2630:108;:::i;:::-;2622:116;;2160:585;;;;;;:::o;2751:75::-;2784:6;2817:2;2811:9;2801:19;;2751:75;:::o;2832:117::-;2941:1;2938;2931:12;2955:117;3064:1;3061;3054:12;3078:101;3114:7;3154:18;3147:5;3143:30;3132:41;;3078:101;;;:::o;3185:120::-;3257:23;3274:5;3257:23;:::i;:::-;3250:5;3247:34;3237:62;;3295:1;3292;3285:12;3237:62;3185:120;:::o;3311:137::-;3356:5;3394:6;3381:20;3372:29;;3410:32;3436:5;3410:32;:::i;:::-;3311:137;;;;:::o;3454:126::-;3491:7;3531:42;3524:5;3520:54;3509:65;;3454:126;;;:::o;3586:96::-;3623:7;3652:24;3670:5;3652:24;:::i;:::-;3641:35;;3586:96;;;:::o;3688:122::-;3761:24;3779:5;3761:24;:::i;:::-;3754:5;3751:35;3741:63;;3800:1;3797;3790:12;3741:63;3688:122;:::o;3816:139::-;3862:5;3900:6;3887:20;3878:29;;3916:33;3943:5;3916:33;:::i;:::-;3816:139;;;;:::o;3961:472::-;4028:6;4036;4085:2;4073:9;4064:7;4060:23;4056:32;4053:119;;;4091:79;;:::i;:::-;4053:119;4211:1;4236:52;4280:7;4271:6;4260:9;4256:22;4236:52;:::i;:::-;4226:62;;4182:116;4337:2;4363:53;4408:7;4399:6;4388:9;4384:22;4363:53;:::i;:::-;4353:63;;4308:118;3961:472;;;;;:::o;4439:77::-;4476:7;4505:5;4494:16;;4439:77;;;:::o;4522:122::-;4595:24;4613:5;4595:24;:::i;:::-;4588:5;4585:35;4575:63;;4634:1;4631;4624:12;4575:63;4522:122;:::o;4650:139::-;4696:5;4734:6;4721:20;4712:29;;4750:33;4777:5;4750:33;:::i;:::-;4650:139;;;;:::o;4795:117::-;4904:1;4901;4894:12;4918:102;4959:6;5010:2;5006:7;5001:2;4994:5;4990:14;4986:28;4976:38;;4918:102;;;:::o;5026:180::-;5074:77;5071:1;5064:88;5171:4;5168:1;5161:15;5195:4;5192:1;5185:15;5212:281;5295:27;5317:4;5295:27;:::i;:::-;5287:6;5283:40;5425:6;5413:10;5410:22;5389:18;5377:10;5374:34;5371:62;5368:88;;;5436:18;;:::i;:::-;5368:88;5476:10;5472:2;5465:22;5255:238;5212:281;;:::o;5499:129::-;5533:6;5560:20;;:::i;:::-;5550:30;;5589:33;5617:4;5609:6;5589:33;:::i;:::-;5499:129;;;:::o;5634:311::-;5711:4;5801:18;5793:6;5790:30;5787:56;;;5823:18;;:::i;:::-;5787:56;5873:4;5865:6;5861:17;5853:25;;5933:4;5927;5923:15;5915:23;;5634:311;;;:::o;5951:117::-;6060:1;6057;6050:12;6091:710;6187:5;6212:81;6228:64;6285:6;6228:64;:::i;:::-;6212:81;:::i;:::-;6203:90;;6313:5;6342:6;6335:5;6328:21;6376:4;6369:5;6365:16;6358:23;;6429:4;6421:6;6417:17;6409:6;6405:30;6458:3;6450:6;6447:15;6444:122;;;6477:79;;:::i;:::-;6444:122;6592:6;6575:220;6609:6;6604:3;6601:15;6575:220;;;6684:3;6713:37;6746:3;6734:10;6713:37;:::i;:::-;6708:3;6701:50;6780:4;6775:3;6771:14;6764:21;;6651:144;6635:4;6630:3;6626:14;6619:21;;6575:220;;;6579:21;6193:608;;6091:710;;;;;:::o;6824:370::-;6895:5;6944:3;6937:4;6929:6;6925:17;6921:27;6911:122;;6952:79;;:::i;:::-;6911:122;7069:6;7056:20;7094:94;7184:3;7176:6;7169:4;7161:6;7157:17;7094:94;:::i;:::-;7085:103;;6901:293;6824:370;;;;:::o;7200:829::-;7302:6;7310;7318;7367:2;7355:9;7346:7;7342:23;7338:32;7335:119;;;7373:79;;:::i;:::-;7335:119;7493:1;7518:53;7563:7;7554:6;7543:9;7539:22;7518:53;:::i;:::-;7508:63;;7464:117;7620:2;7646:53;7691:7;7682:6;7671:9;7667:22;7646:53;:::i;:::-;7636:63;;7591:118;7776:2;7765:9;7761:18;7748:32;7807:18;7799:6;7796:30;7793:117;;;7829:79;;:::i;:::-;7793:117;7934:78;8004:7;7995:6;7984:9;7980:22;7934:78;:::i;:::-;7924:88;;7719:303;7200:829;;;;;:::o;8035:76::-;8071:7;8100:5;8089:16;;8035:76;;;:::o;8117:115::-;8202:23;8219:5;8202:23;:::i;:::-;8197:3;8190:36;8117:115;;:::o;8238:218::-;8329:4;8367:2;8356:9;8352:18;8344:26;;8380:69;8446:1;8435:9;8431:17;8422:6;8380:69;:::i;:::-;8238:218;;;;:::o;8462:109::-;8498:7;8538:26;8531:5;8527:38;8516:49;;8462:109;;;:::o;8577:115::-;8662:23;8679:5;8662:23;:::i;:::-;8657:3;8650:36;8577:115;;:::o;8698:218::-;8789:4;8827:2;8816:9;8812:18;8804:26;;8840:69;8906:1;8895:9;8891:17;8882:6;8840:69;:::i;:::-;8698:218;;;;:::o;8922:122::-;8995:24;9013:5;8995:24;:::i;:::-;8988:5;8985:35;8975:63;;9034:1;9031;9024:12;8975:63;8922:122;:::o;9050:139::-;9096:5;9134:6;9121:20;9112:29;;9150:33;9177:5;9150:33;:::i;:::-;9050:139;;;;:::o;9195:120::-;9267:23;9284:5;9267:23;:::i;:::-;9260:5;9257:34;9247:62;;9305:1;9302;9295:12;9247:62;9195:120;:::o;9321:137::-;9366:5;9404:6;9391:20;9382:29;;9420:32;9446:5;9420:32;:::i;:::-;9321:137;;;;:::o;9464:120::-;9536:23;9553:5;9536:23;:::i;:::-;9529:5;9526:34;9516:62;;9574:1;9571;9564:12;9516:62;9464:120;:::o;9590:137::-;9635:5;9673:6;9660:20;9651:29;;9689:32;9715:5;9689:32;:::i;:::-;9590:137;;;;:::o;9733:903::-;9824:6;9832;9840;9848;9856;9905:3;9893:9;9884:7;9880:23;9876:33;9873:120;;;9912:79;;:::i;:::-;9873:120;10032:1;10057:53;10102:7;10093:6;10082:9;10078:22;10057:53;:::i;:::-;10047:63;;10003:117;10159:2;10185:52;10229:7;10220:6;10209:9;10205:22;10185:52;:::i;:::-;10175:62;;10130:117;10286:2;10312:52;10356:7;10347:6;10336:9;10332:22;10312:52;:::i;:::-;10302:62;;10257:117;10413:2;10439:52;10483:7;10474:6;10463:9;10459:22;10439:52;:::i;:::-;10429:62;;10384:117;10540:3;10567:52;10611:7;10602:6;10591:9;10587:22;10567:52;:::i;:::-;10557:62;;10511:118;9733:903;;;;;;;;:::o;10642:118::-;10729:24;10747:5;10729:24;:::i;:::-;10724:3;10717:37;10642:118;;:::o;10766:222::-;10859:4;10897:2;10886:9;10882:18;10874:26;;10910:71;10978:1;10967:9;10963:17;10954:6;10910:71;:::i;:::-;10766:222;;;;:::o;10994:91::-;11030:7;11070:8;11063:5;11059:20;11048:31;;10994:91;;;:::o;11091:115::-;11176:23;11193:5;11176:23;:::i;:::-;11171:3;11164:36;11091:115;;:::o;11212:1072::-;11511:4;11549:3;11538:9;11534:19;11526:27;;11563:69;11629:1;11618:9;11614:17;11605:6;11563:69;:::i;:::-;11642:70;11708:2;11697:9;11693:18;11684:6;11642:70;:::i;:::-;11722;11788:2;11777:9;11773:18;11764:6;11722:70;:::i;:::-;11802;11868:2;11857:9;11853:18;11844:6;11802:70;:::i;:::-;11882:71;11948:3;11937:9;11933:19;11924:6;11882:71;:::i;:::-;11963;12029:3;12018:9;12014:19;12005:6;11963:71;:::i;:::-;12044;12110:3;12099:9;12095:19;12086:6;12044:71;:::i;:::-;12125;12191:3;12180:9;12176:19;12167:6;12125:71;:::i;:::-;12206;12272:3;12261:9;12257:19;12248:6;12206:71;:::i;:::-;11212:1072;;;;;;;;;;;;:::o;12290:218::-;12381:4;12419:2;12408:9;12404:18;12396:26;;12432:69;12498:1;12487:9;12483:17;12474:6;12432:69;:::i;:::-;12290:218;;;;:::o;12514:474::-;12582:6;12590;12639:2;12627:9;12618:7;12614:23;12610:32;12607:119;;;12645:79;;:::i;:::-;12607:119;12765:1;12790:53;12835:7;12826:6;12815:9;12811:22;12790:53;:::i;:::-;12780:63;;12736:117;12892:2;12918:53;12963:7;12954:6;12943:9;12939:22;12918:53;:::i;:::-;12908:63;;12863:118;12514:474;;;;;:::o;12994:327::-;13052:6;13101:2;13089:9;13080:7;13076:23;13072:32;13069:119;;;13107:79;;:::i;:::-;13069:119;13227:1;13252:52;13296:7;13287:6;13276:9;13272:22;13252:52;:::i;:::-;13242:62;;13198:116;12994:327;;;;:::o;13327:118::-;13414:24;13432:5;13414:24;:::i;:::-;13409:3;13402:37;13327:118;;:::o;13451:222::-;13544:4;13582:2;13571:9;13567:18;13559:26;;13595:71;13663:1;13652:9;13648:17;13639:6;13595:71;:::i;:::-;13451:222;;;;:::o;13679:115::-;13764:23;13781:5;13764:23;:::i;:::-;13759:3;13752:36;13679:115;;:::o;13800:218::-;13891:4;13929:2;13918:9;13914:18;13906:26;;13942:69;14008:1;13997:9;13993:17;13984:6;13942:69;:::i;:::-;13800:218;;;;:::o;14024:114::-;14091:6;14125:5;14119:12;14109:22;;14024:114;;;:::o;14144:184::-;14243:11;14277:6;14272:3;14265:19;14317:4;14312:3;14308:14;14293:29;;14144:184;;;;:::o;14334:132::-;14401:4;14424:3;14416:11;;14454:4;14449:3;14445:14;14437:22;;14334:132;;;:::o;14472:108::-;14549:24;14567:5;14549:24;:::i;:::-;14544:3;14537:37;14472:108;;:::o;14586:179::-;14655:10;14676:46;14718:3;14710:6;14676:46;:::i;:::-;14754:4;14749:3;14745:14;14731:28;;14586:179;;;;:::o;14771:113::-;14841:4;14873;14868:3;14864:14;14856:22;;14771:113;;;:::o;14920:732::-;15039:3;15068:54;15116:5;15068:54;:::i;:::-;15138:86;15217:6;15212:3;15138:86;:::i;:::-;15131:93;;15248:56;15298:5;15248:56;:::i;:::-;15327:7;15358:1;15343:284;15368:6;15365:1;15362:13;15343:284;;;15444:6;15438:13;15471:63;15530:3;15515:13;15471:63;:::i;:::-;15464:70;;15557:60;15610:6;15557:60;:::i;:::-;15547:70;;15403:224;15390:1;15387;15383:9;15378:14;;15343:284;;;15347:14;15643:3;15636:10;;15044:608;;;14920:732;;;;:::o;15658:696::-;15881:4;15919:3;15908:9;15904:19;15896:27;;15933:69;15999:1;15988:9;15984:17;15975:6;15933:69;:::i;:::-;16012:70;16078:2;16067:9;16063:18;16054:6;16012:70;:::i;:::-;16092:72;16160:2;16149:9;16145:18;16136:6;16092:72;:::i;:::-;16211:9;16205:4;16201:20;16196:2;16185:9;16181:18;16174:48;16239:108;16342:4;16333:6;16239:108;:::i;:::-;16231:116;;15658:696;;;;;;;:::o;16360:120::-;16432:23;16449:5;16432:23;:::i;:::-;16425:5;16422:34;16412:62;;16470:1;16467;16460:12;16412:62;16360:120;:::o;16486:137::-;16531:5;16569:6;16556:20;16547:29;;16585:32;16611:5;16585:32;:::i;:::-;16486:137;;;;:::o;16629:470::-;16695:6;16703;16752:2;16740:9;16731:7;16727:23;16723:32;16720:119;;;16758:79;;:::i;:::-;16720:119;16878:1;16903:52;16947:7;16938:6;16927:9;16923:22;16903:52;:::i;:::-;16893:62;;16849:116;17004:2;17030:52;17074:7;17065:6;17054:9;17050:22;17030:52;:::i;:::-;17020:62;;16975:117;16629:470;;;;;:::o;17105:537::-;17274:4;17312:3;17301:9;17297:19;17289:27;;17326:69;17392:1;17381:9;17377:17;17368:6;17326:69;:::i;:::-;17405:70;17471:2;17460:9;17456:18;17447:6;17405:70;:::i;:::-;17485;17551:2;17540:9;17536:18;17527:6;17485:70;:::i;:::-;17565;17631:2;17620:9;17616:18;17607:6;17565:70;:::i;:::-;17105:537;;;;;;;:::o;17648:90::-;17682:7;17725:5;17718:13;17711:21;17700:32;;17648:90;;;:::o;17744:109::-;17825:21;17840:5;17825:21;:::i;:::-;17820:3;17813:34;17744:109;;:::o;17859:210::-;17946:4;17984:2;17973:9;17969:18;17961:26;;17997:65;18059:1;18048:9;18044:17;18035:6;17997:65;:::i;:::-;17859:210;;;;:::o;18075:329::-;18134:6;18183:2;18171:9;18162:7;18158:23;18154:32;18151:119;;;18189:79;;:::i;:::-;18151:119;18309:1;18334:53;18379:7;18370:6;18359:9;18355:22;18334:53;:::i;:::-;18324:63;;18280:117;18075:329;;;;:::o;18410:169::-;18494:11;18528:6;18523:3;18516:19;18568:4;18563:3;18559:14;18544:29;;18410:169;;;;:::o;18585:165::-;18725:17;18721:1;18713:6;18709:14;18702:41;18585:165;:::o;18756:366::-;18898:3;18919:67;18983:2;18978:3;18919:67;:::i;:::-;18912:74;;18995:93;19084:3;18995:93;:::i;:::-;19113:2;19108:3;19104:12;19097:19;;18756:366;;;:::o;19128:419::-;19294:4;19332:2;19321:9;19317:18;19309:26;;19381:9;19375:4;19371:20;19367:1;19356:9;19352:17;19345:47;19409:131;19535:4;19409:131;:::i;:::-;19401:139;;19128:419;;;:::o;19553:169::-;19693:21;19689:1;19681:6;19677:14;19670:45;19553:169;:::o;19728:366::-;19870:3;19891:67;19955:2;19950:3;19891:67;:::i;:::-;19884:74;;19967:93;20056:3;19967:93;:::i;:::-;20085:2;20080:3;20076:12;20069:19;;19728:366;;;:::o;20100:419::-;20266:4;20304:2;20293:9;20289:18;20281:26;;20353:9;20347:4;20343:20;20339:1;20328:9;20324:17;20317:47;20381:131;20507:4;20381:131;:::i;:::-;20373:139;;20100:419;;;:::o;20525:332::-;20646:4;20684:2;20673:9;20669:18;20661:26;;20697:71;20765:1;20754:9;20750:17;20741:6;20697:71;:::i;:::-;20778:72;20846:2;20835:9;20831:18;20822:6;20778:72;:::i;:::-;20525:332;;;;;:::o;20863:180::-;20911:77;20908:1;20901:88;21008:4;21005:1;20998:15;21032:4;21029:1;21022:15;21049:180;21097:77;21094:1;21087:88;21194:4;21191:1;21184:15;21218:4;21215:1;21208:15;21235:233;21274:3;21297:24;21315:5;21297:24;:::i;:::-;21288:33;;21343:66;21336:5;21333:77;21330:103;;21413:18;;:::i;:::-;21330:103;21460:1;21453:5;21449:13;21442:20;;21235:233;;;:::o;21474:114::-;21541:6;21575:5;21569:12;21559:22;;21474:114;;;:::o;21594:184::-;21693:11;21727:6;21722:3;21715:19;21767:4;21762:3;21758:14;21743:29;;21594:184;;;;:::o;21784:132::-;21851:4;21874:3;21866:11;;21904:4;21899:3;21895:14;21887:22;;21784:132;;;:::o;21922:108::-;21999:24;22017:5;21999:24;:::i;:::-;21994:3;21987:37;21922:108;;:::o;22036:179::-;22105:10;22126:46;22168:3;22160:6;22126:46;:::i;:::-;22204:4;22199:3;22195:14;22181:28;;22036:179;;;;:::o;22221:113::-;22291:4;22323;22318:3;22314:14;22306:22;;22221:113;;;:::o;22370:732::-;22489:3;22518:54;22566:5;22518:54;:::i;:::-;22588:86;22667:6;22662:3;22588:86;:::i;:::-;22581:93;;22698:56;22748:5;22698:56;:::i;:::-;22777:7;22808:1;22793:284;22818:6;22815:1;22812:13;22793:284;;;22894:6;22888:13;22921:63;22980:3;22965:13;22921:63;:::i;:::-;22914:70;;23007:60;23060:6;23007:60;:::i;:::-;22997:70;;22853:224;22840:1;22837;22833:9;22828:14;;22793:284;;;22797:14;23093:3;23086:10;;22494:608;;;22370:732;;;;:::o;23108:483::-;23279:4;23317:2;23306:9;23302:18;23294:26;;23330:71;23398:1;23387:9;23383:17;23374:6;23330:71;:::i;:::-;23448:9;23442:4;23438:20;23433:2;23422:9;23418:18;23411:48;23476:108;23579:4;23570:6;23476:108;:::i;:::-;23468:116;;23108:483;;;;;:::o;23597:98::-;23648:6;23682:5;23676:12;23666:22;;23597:98;;;:::o;23701:147::-;23802:11;23839:3;23824:18;;23701:147;;;;:::o;23854:246::-;23935:1;23945:113;23959:6;23956:1;23953:13;23945:113;;;24044:1;24039:3;24035:11;24029:18;24025:1;24020:3;24016:11;24009:39;23981:2;23978:1;23974:10;23969:15;;23945:113;;;24092:1;24083:6;24078:3;24074:16;24067:27;23916:184;23854:246;;;:::o;24106:386::-;24210:3;24238:38;24270:5;24238:38;:::i;:::-;24292:88;24373:6;24368:3;24292:88;:::i;:::-;24285:95;;24389:65;24447:6;24442:3;24435:4;24428:5;24424:16;24389:65;:::i;:::-;24479:6;24474:3;24470:16;24463:23;;24214:278;24106:386;;;;:::o;24498:271::-;24628:3;24650:93;24739:3;24730:6;24650:93;:::i;:::-;24643:100;;24760:3;24753:10;;24498:271;;;;:::o;24775:194::-;24815:4;24835:20;24853:1;24835:20;:::i;:::-;24830:25;;24869:20;24887:1;24869:20;:::i;:::-;24864:25;;24913:1;24910;24906:9;24898:17;;24937:1;24931:4;24928:11;24925:37;;;24942:18;;:::i;:::-;24925:37;24775:194;;;;:::o;24975:410::-;25015:7;25038:20;25056:1;25038:20;:::i;:::-;25033:25;;25072:20;25090:1;25072:20;:::i;:::-;25067:25;;25127:1;25124;25120:9;25149:30;25167:11;25149:30;:::i;:::-;25138:41;;25328:1;25319:7;25315:15;25312:1;25309:22;25289:1;25282:9;25262:83;25239:139;;25358:18;;:::i;:::-;25239:139;25023:362;24975:410;;;;:::o;25391:191::-;25431:3;25450:20;25468:1;25450:20;:::i;:::-;25445:25;;25484:20;25502:1;25484:20;:::i;:::-;25479:25;;25527:1;25524;25520:9;25513:16;;25548:3;25545:1;25542:10;25539:36;;;25555:18;;:::i;:::-;25539:36;25391:191;;;;:::o;25588:216::-;25627:4;25647:19;25664:1;25647:19;:::i;:::-;25642:24;;25680:19;25697:1;25680:19;:::i;:::-;25675:24;;25723:1;25720;25716:9;25708:17;;25747:26;25741:4;25738:36;25735:62;;;25777:18;;:::i;:::-;25735:62;25588:216;;;;:::o;25810:426::-;25951:4;25989:2;25978:9;25974:18;25966:26;;26002:71;26070:1;26059:9;26055:17;26046:6;26002:71;:::i;:::-;26083:70;26149:2;26138:9;26134:18;26125:6;26083:70;:::i;:::-;26163:66;26225:2;26214:9;26210:18;26201:6;26163:66;:::i;:::-;25810:426;;;;;;:::o;26242:652::-;26441:4;26479:3;26468:9;26464:19;26456:27;;26493:71;26561:1;26550:9;26546:17;26537:6;26493:71;:::i;:::-;26574:72;26642:2;26631:9;26627:18;26618:6;26574:72;:::i;:::-;26656:70;26722:2;26711:9;26707:18;26698:6;26656:70;:::i;:::-;26736;26802:2;26791:9;26787:18;26778:6;26736:70;:::i;:::-;26816:71;26882:3;26871:9;26867:19;26858:6;26816:71;:::i;:::-;26242:652;;;;;;;;:::o;26900:172::-;27040:24;27036:1;27028:6;27024:14;27017:48;26900:172;:::o;27078:366::-;27220:3;27241:67;27305:2;27300:3;27241:67;:::i;:::-;27234:74;;27317:93;27406:3;27317:93;:::i;:::-;27435:2;27430:3;27426:12;27419:19;;27078:366;;;:::o;27450:419::-;27616:4;27654:2;27643:9;27639:18;27631:26;;27703:9;27697:4;27693:20;27689:1;27678:9;27674:17;27667:47;27731:131;27857:4;27731:131;:::i;:::-;27723:139;;27450:419;;;:::o;27875:180::-;27923:77;27920:1;27913:88;28020:4;28017:1;28010:15;28044:4;28041:1;28034:15;28061:183;28099:3;28122:23;28139:5;28122:23;:::i;:::-;28113:32;;28167:18;28160:5;28157:29;28154:55;;28189:18;;:::i;:::-;28154:55;28236:1;28229:5;28225:13;28218:20;;28061:183;;;:::o;28250:213::-;28289:3;28308:19;28325:1;28308:19;:::i;:::-;28303:24;;28341:19;28358:1;28341:19;:::i;:::-;28336:24;;28383:1;28380;28376:9;28369:16;;28406:26;28401:3;28398:35;28395:61;;;28436:18;;:::i;:::-;28395:61;28250:213;;;;:::o;28469:60::-;28497:3;28518:5;28511:12;;28469:60;;;:::o;28535:140::-;28584:9;28617:52;28635:33;28644:23;28661:5;28644:23;:::i;:::-;28635:33;:::i;:::-;28617:52;:::i;:::-;28604:65;;28535:140;;;:::o;28681:129::-;28767:36;28797:5;28767:36;:::i;:::-;28762:3;28755:49;28681:129;;:::o;28816:328::-;28935:4;28973:2;28962:9;28958:18;28950:26;;28986:70;29053:1;29042:9;29038:17;29029:6;28986:70;:::i;:::-;29066:71;29133:2;29122:9;29118:18;29109:6;29066:71;:::i;:::-;28816:328;;;;;:::o;29150:330::-;29270:4;29308:2;29297:9;29293:18;29285:26;;29321:71;29389:1;29378:9;29374:17;29365:6;29321:71;:::i;:::-;29402;29469:2;29458:9;29454:18;29445:6;29402:71;:::i;:::-;29150:330;;;;;:::o;29486:172::-;29626:24;29622:1;29614:6;29610:14;29603:48;29486:172;:::o;29664:366::-;29806:3;29827:67;29891:2;29886:3;29827:67;:::i;:::-;29820:74;;29903:93;29992:3;29903:93;:::i;:::-;30021:2;30016:3;30012:12;30005:19;;29664:366;;;:::o;30036:419::-;30202:4;30240:2;30229:9;30225:18;30217:26;;30289:9;30283:4;30279:20;30275:1;30264:9;30260:17;30253:47;30317:131;30443:4;30317:131;:::i;:::-;30309:139;;30036:419;;;:::o;30461:173::-;30601:25;30597:1;30589:6;30585:14;30578:49;30461:173;:::o;30640:366::-;30782:3;30803:67;30867:2;30862:3;30803:67;:::i;:::-;30796:74;;30879:93;30968:3;30879:93;:::i;:::-;30997:2;30992:3;30988:12;30981:19;;30640:366;;;:::o;31012:419::-;31178:4;31216:2;31205:9;31201:18;31193:26;;31265:9;31259:4;31255:20;31251:1;31240:9;31236:17;31229:47;31293:131;31419:4;31293:131;:::i;:::-;31285:139;;31012:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2629000","executionCost":"infinite","totalCost":"infinite"},"external":{"BASE_FEE()":"infinite","GAS_PRICE_LINK()":"infinite","MAX_CONSUMERS()":"infinite","acceptOwnership()":"54629","acceptSubscriptionOwnerTransfer(uint64)":"833","addConsumer(uint64,address)":"infinite","cancelSubscription(uint64,address)":"infinite","consumerIsAdded(uint64,address)":"infinite","createSubscription()":"infinite","fulfillRandomWords(uint256,address)":"infinite","fulfillRandomWordsWithOverride(uint256,address,uint256[])":"infinite","fundSubscription(uint64,uint96)":"infinite","getConfig()":"infinite","getFallbackWeiPerUnitLink()":"427","getFeeConfig()":"infinite","getRequestConfig()":"908","getSubscription(uint64)":"infinite","owner()":"2567","pendingRequestExists(uint64)":"791","removeConsumer(uint64,address)":"infinite","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"infinite","requestSubscriptionOwnerTransfer(uint64,address)":"966","setConfig()":"27474","transferOwnership(address)":"30786"}},"methodIdentifiers":{"BASE_FEE()":"3d18651e","GAS_PRICE_LINK()":"a410347f","MAX_CONSUMERS()":"64d51a2a","acceptOwnership()":"79ba5097","acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","consumerIsAdded(uint64,address)":"ed5eb06d","createSubscription()":"a21a23e4","fulfillRandomWords(uint256,address)":"808974ff","fulfillRandomWordsWithOverride(uint256,address,uint256[])":"08e3898e","fundSubscription(uint64,uint96)":"afc69b53","getConfig()":"c3f909d4","getFallbackWeiPerUnitLink()":"356dac71","getFeeConfig()":"5fbbc0d2","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","owner()":"8da5cb5b","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb","setConfig()":"8b673e7a","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_baseFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_gasPriceLink\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRandomWords\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_FEE\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_PRICE_LINK\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"consumerIsAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_words\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWordsWithOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"_amount\",\"type\":\"uint96\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackWeiPerUnitLink\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"_subId\":\"- A unique subscription id.\"}},\"fulfillRandomWords(uint256,address)\":{\"details\":\"This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.\",\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\"}},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\",\"_words\":\"user-provided random words\"}},\"fundSubscription(uint64,uint96)\":{\"params\":{\"_amount\":\"the amount to fund\",\"_subId\":\"the subscription to fund\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fulfillRandomWords(uint256,address)\":{\"notice\":\"fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer.\"},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"notice\":\"fulfillRandomWordsWithOverride allows the user to pass in their own random words.\"},\"fundSubscription(uint64,uint96)\":{\"notice\":\"fundSubscription allows funding a subscription with an arbitrary amount for testing.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setConfig()\":{\"notice\":\"Sets the configuration of the vrfv2 mock coordinator\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\":\"VRFCoordinatorV2Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// A mock for testing code that relies on VRFCoordinatorV2.\\npragma solidity ^0.8.4;\\n\\nimport \\\"../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"../vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"../shared/access/ConfirmedOwner.sol\\\";\\n\\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\\n  uint96 public immutable BASE_FEE;\\n  uint96 public immutable GAS_PRICE_LINK;\\n  uint16 public immutable MAX_CONSUMERS = 100;\\n\\n  error InvalidSubscription();\\n  error InsufficientBalance();\\n  error MustBeSubOwner(address owner);\\n  error TooManyConsumers();\\n  error InvalidConsumer();\\n  error InvalidRandomWords();\\n  error Reentrant();\\n\\n  event RandomWordsRequested(\\n    bytes32 indexed keyHash,\\n    uint256 requestId,\\n    uint256 preSeed,\\n    uint64 indexed subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords,\\n    address indexed sender\\n  );\\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\\n  event SubscriptionCreated(uint64 indexed subId, address owner);\\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\\n  event ConsumerAdded(uint64 indexed subId, address consumer);\\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\\n  event ConfigSet();\\n\\n  struct Config {\\n    // Reentrancy protection.\\n    bool reentrancyLock;\\n  }\\n  Config private s_config;\\n  uint64 s_currentSubId;\\n  uint256 s_nextRequestId = 1;\\n  uint256 s_nextPreSeed = 100;\\n  struct Subscription {\\n    address owner;\\n    uint96 balance;\\n  }\\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\\n\\n  struct Request {\\n    uint64 subId;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n  }\\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\\n\\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) ConfirmedOwner(msg.sender) {\\n    BASE_FEE = _baseFee;\\n    GAS_PRICE_LINK = _gasPriceLink;\\n    setConfig();\\n  }\\n\\n  /**\\n   * @notice Sets the configuration of the vrfv2 mock coordinator\\n   */\\n  function setConfig() public onlyOwner {\\n    s_config = Config({reentrancyLock: false});\\n    emit ConfigSet();\\n  }\\n\\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\\n    address[] memory consumers = s_consumers[_subId];\\n    for (uint256 i = 0; i < consumers.length; i++) {\\n      if (consumers[i] == _consumer) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\\n    if (!consumerIsAdded(_subId, _consumer)) {\\n      revert InvalidConsumer();\\n    }\\n    _;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\\n   * @notice consumer.\\n   *\\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\\n   * @dev against the real coordinator a small amount of additional LINK is required.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   */\\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   * @param _words user-provided random words\\n   */\\n  function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\\n    uint256 startGas = gasleft();\\n    if (s_requests[_requestId].subId == 0) {\\n      revert(\\\"nonexistent request\\\");\\n    }\\n    Request memory req = s_requests[_requestId];\\n\\n    if (_words.length == 0) {\\n      _words = new uint256[](req.numWords);\\n      for (uint256 i = 0; i < req.numWords; i++) {\\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\\n      }\\n    } else if (_words.length != req.numWords) {\\n      revert InvalidRandomWords();\\n    }\\n\\n    VRFConsumerBaseV2 v;\\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\\n    s_config.reentrancyLock = true;\\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\\n    s_config.reentrancyLock = false;\\n\\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\\n    if (s_subscriptions[req.subId].balance < payment) {\\n      revert InsufficientBalance();\\n    }\\n    s_subscriptions[req.subId].balance -= payment;\\n    delete (s_requests[_requestId]);\\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\\n  }\\n\\n  /**\\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\\n   *\\n   * @param _subId the subscription to fund\\n   * @param _amount the amount to fund\\n   */\\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    uint96 oldBalance = s_subscriptions[_subId].balance;\\n    s_subscriptions[_subId].balance += _amount;\\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\\n  }\\n\\n  function requestRandomWords(\\n    bytes32 _keyHash,\\n    uint64 _subId,\\n    uint16 _minimumRequestConfirmations,\\n    uint32 _callbackGasLimit,\\n    uint32 _numWords\\n  ) external override nonReentrant onlyValidConsumer(_subId, msg.sender) returns (uint256) {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n\\n    uint256 requestId = s_nextRequestId++;\\n    uint256 preSeed = s_nextPreSeed++;\\n\\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\\n\\n    emit RandomWordsRequested(\\n      _keyHash,\\n      requestId,\\n      preSeed,\\n      _subId,\\n      _minimumRequestConfirmations,\\n      _callbackGasLimit,\\n      _numWords,\\n      msg.sender\\n    );\\n    return requestId;\\n  }\\n\\n  function createSubscription() external override returns (uint64 _subId) {\\n    s_currentSubId++;\\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\\n    return s_currentSubId;\\n  }\\n\\n  function getSubscription(\\n    uint64 _subId\\n  ) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\\n    if (s_subscriptions[_subId].owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\\n  }\\n\\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\\n    delete (s_subscriptions[_subId]);\\n  }\\n\\n  modifier onlySubOwner(uint64 _subId) {\\n    address owner = s_subscriptions[_subId].owner;\\n    if (owner == address(0)) {\\n      revert InvalidSubscription();\\n    }\\n    if (msg.sender != owner) {\\n      revert MustBeSubOwner(owner);\\n    }\\n    _;\\n  }\\n\\n  function getRequestConfig() external pure override returns (uint16, uint32, bytes32[] memory) {\\n    return (3, 2000000, new bytes32[](0));\\n  }\\n\\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\\n      revert TooManyConsumers();\\n    }\\n\\n    if (consumerIsAdded(_subId, _consumer)) {\\n      return;\\n    }\\n\\n    s_consumers[_subId].push(_consumer);\\n    emit ConsumerAdded(_subId, _consumer);\\n  }\\n\\n  function removeConsumer(\\n    uint64 _subId,\\n    address _consumer\\n  ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\\n    address[] storage consumers = s_consumers[_subId];\\n    for (uint256 i = 0; i < consumers.length; i++) {\\n      if (consumers[i] == _consumer) {\\n        address last = consumers[consumers.length - 1];\\n        consumers[i] = last;\\n        consumers.pop();\\n        break;\\n      }\\n    }\\n\\n    emit ConsumerRemoved(_subId, _consumer);\\n  }\\n\\n  function getConfig()\\n    external\\n    pure\\n    returns (\\n      uint16 minimumRequestConfirmations,\\n      uint32 maxGasLimit,\\n      uint32 stalenessSeconds,\\n      uint32 gasAfterPaymentCalculation\\n    )\\n  {\\n    return (4, 2_500_000, 2_700, 33285);\\n  }\\n\\n  function getFeeConfig()\\n    external\\n    pure\\n    returns (\\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\\n      uint24 reqsForTier2,\\n      uint24 reqsForTier3,\\n      uint24 reqsForTier4,\\n      uint24 reqsForTier5\\n    )\\n  {\\n    return (\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      100000, // 0.1 LINK\\n      0,\\n      0,\\n      0,\\n      0\\n    );\\n  }\\n\\n  modifier nonReentrant() {\\n    if (s_config.reentrancyLock) {\\n      revert Reentrant();\\n    }\\n    _;\\n  }\\n\\n  function getFallbackWeiPerUnitLink() external pure returns (int256) {\\n    return 4000000000000000; // 0.004 Ether\\n  }\\n\\n  function requestSubscriptionOwnerTransfer(uint64 /*_subId*/, address /*_newOwner*/) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  function acceptSubscriptionOwnerTransfer(uint64 /*_subId*/) external pure override {\\n    revert(\\\"not implemented\\\");\\n  }\\n\\n  function pendingRequestExists(uint64 /*subId*/) public pure override returns (bool) {\\n    revert(\\\"not implemented\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x6955686a8e9f2a6458adcf8c202b5ad82ec85540832b2eda27518449beb3b3a8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1053,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1055,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"},{"astId":198,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_config","offset":0,"slot":"2","type":"t_struct(Config)195_storage"},{"astId":200,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_currentSubId","offset":0,"slot":"3","type":"t_uint64"},{"astId":203,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_nextRequestId","offset":0,"slot":"4","type":"t_uint256"},{"astId":206,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_nextPreSeed","offset":0,"slot":"5","type":"t_uint256"},{"astId":216,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_subscriptions","offset":0,"slot":"6","type":"t_mapping(t_uint64,t_struct(Subscription)211_storage)"},{"astId":221,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_consumers","offset":0,"slot":"7","type":"t_mapping(t_uint64,t_array(t_address)dyn_storage)"},{"astId":233,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"s_requests","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_struct(Request)228_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_uint256,t_struct(Request)228_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct VRFCoordinatorV2Mock.Request)","numberOfBytes":"32","value":"t_struct(Request)228_storage"},"t_mapping(t_uint64,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"},"t_mapping(t_uint64,t_struct(Subscription)211_storage)":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription)","numberOfBytes":"32","value":"t_struct(Subscription)211_storage"},"t_struct(Config)195_storage":{"encoding":"inplace","label":"struct VRFCoordinatorV2Mock.Config","members":[{"astId":194,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"reentrancyLock","offset":0,"slot":"0","type":"t_bool"}],"numberOfBytes":"32"},"t_struct(Request)228_storage":{"encoding":"inplace","label":"struct VRFCoordinatorV2Mock.Request","members":[{"astId":223,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"subId","offset":0,"slot":"0","type":"t_uint64"},{"astId":225,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"callbackGasLimit","offset":8,"slot":"0","type":"t_uint32"},{"astId":227,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"numWords","offset":12,"slot":"0","type":"t_uint32"}],"numberOfBytes":"32"},"t_struct(Subscription)211_storage":{"encoding":"inplace","label":"struct VRFCoordinatorV2Mock.Subscription","members":[{"astId":208,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":210,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock","label":"balance","offset":20,"slot":"0","type":"t_uint96"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"},"t_uint96":{"encoding":"inplace","label":"uint96","numberOfBytes":"12"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"createSubscription()":{"notice":"Create a VRF subscription."},"fulfillRandomWords(uint256,address)":{"notice":"fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer."},"fulfillRandomWordsWithOverride(uint256,address,uint256[])":{"notice":"fulfillRandomWordsWithOverride allows the user to pass in their own random words."},"fundSubscription(uint64,uint96)":{"notice":"fundSubscription allows funding a subscription with an arbitrary amount for testing."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"owner()":{"notice":"Get the current owner"},"setConfig()":{"notice":"Sets the configuration of the vrfv2 mock coordinator"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol":{"ConfirmedOwner":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1044":{"entryPoint":null,"id":1044,"parameterSlots":1,"returnSlots":0},"@_1101":{"entryPoint":null,"id":1101,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_1185":{"entryPoint":303,"id":1185,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":681,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack":{"entryPoint":805,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":913,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":840,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":948,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":747,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":640,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":608,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":603,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2":{"entryPoint":764,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":872,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":658,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3327:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"379:81:27","statements":[{"nodeType":"YulAssignment","src":"389:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:27"},"nodeType":"YulFunctionCall","src":"400:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:27","type":""}],"src":"334:126:27"},{"body":{"nodeType":"YulBlock","src":"511:51:27","statements":[{"nodeType":"YulAssignment","src":"521:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:27"},"nodeType":"YulFunctionCall","src":"532:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:27","type":""}],"src":"466:96:27"},{"body":{"nodeType":"YulBlock","src":"611:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:27"},"nodeType":"YulFunctionCall","src":"670:12:27"},"nodeType":"YulExpressionStatement","src":"670:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:27"},"nodeType":"YulFunctionCall","src":"641:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:27"},"nodeType":"YulFunctionCall","src":"631:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:27"},"nodeType":"YulFunctionCall","src":"624:43:27"},"nodeType":"YulIf","src":"621:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:27","type":""}],"src":"568:122:27"},{"body":{"nodeType":"YulBlock","src":"759:80:27","statements":[{"nodeType":"YulAssignment","src":"769:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:27"},"nodeType":"YulFunctionCall","src":"778:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:27"},"nodeType":"YulFunctionCall","src":"800:33:27"},"nodeType":"YulExpressionStatement","src":"800:33:27"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:27","type":""}],"src":"696:143:27"},{"body":{"nodeType":"YulBlock","src":"922:274:27","statements":[{"body":{"nodeType":"YulBlock","src":"968:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"970:77:27"},"nodeType":"YulFunctionCall","src":"970:79:27"},"nodeType":"YulExpressionStatement","src":"970:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"943:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"952:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"939:3:27"},"nodeType":"YulFunctionCall","src":"939:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"964:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"935:3:27"},"nodeType":"YulFunctionCall","src":"935:32:27"},"nodeType":"YulIf","src":"932:119:27"},{"nodeType":"YulBlock","src":"1061:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1076:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1090:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1080:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1105:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1151:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1162:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1147:3:27"},"nodeType":"YulFunctionCall","src":"1147:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1171:7:27"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1115:31:27"},"nodeType":"YulFunctionCall","src":"1115:64:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1105:6:27"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"892:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"903:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"915:6:27","type":""}],"src":"845:351:27"},{"body":{"nodeType":"YulBlock","src":"1298:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1315:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1320:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1308:6:27"},"nodeType":"YulFunctionCall","src":"1308:19:27"},"nodeType":"YulExpressionStatement","src":"1308:19:27"},{"nodeType":"YulAssignment","src":"1336:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1355:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1360:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1351:3:27"},"nodeType":"YulFunctionCall","src":"1351:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1336:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1270:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1275:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1286:11:27","type":""}],"src":"1202:169:27"},{"body":{"nodeType":"YulBlock","src":"1483:68:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1505:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"1513:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1501:3:27"},"nodeType":"YulFunctionCall","src":"1501:14:27"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"1517:26:27","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1494:6:27"},"nodeType":"YulFunctionCall","src":"1494:50:27"},"nodeType":"YulExpressionStatement","src":"1494:50:27"}]},"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1475:6:27","type":""}],"src":"1377:174:27"},{"body":{"nodeType":"YulBlock","src":"1703:220:27","statements":[{"nodeType":"YulAssignment","src":"1713:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1779:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1784:2:27","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1720:58:27"},"nodeType":"YulFunctionCall","src":"1720:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1713:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1885:3:27"}],"functionName":{"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nodeType":"YulIdentifier","src":"1796:88:27"},"nodeType":"YulFunctionCall","src":"1796:93:27"},"nodeType":"YulExpressionStatement","src":"1796:93:27"},{"nodeType":"YulAssignment","src":"1898:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1909:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1914:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:27"},"nodeType":"YulFunctionCall","src":"1905:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1898:3:27"}]}]},"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1699:3:27","type":""}],"src":"1557:366:27"},{"body":{"nodeType":"YulBlock","src":"2100:248:27","statements":[{"nodeType":"YulAssignment","src":"2110:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2122:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2118:3:27"},"nodeType":"YulFunctionCall","src":"2118:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2110:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2157:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2168:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:27"},"nodeType":"YulFunctionCall","src":"2153:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2176:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2182:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2172:3:27"},"nodeType":"YulFunctionCall","src":"2172:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2146:6:27"},"nodeType":"YulFunctionCall","src":"2146:47:27"},"nodeType":"YulExpressionStatement","src":"2146:47:27"},{"nodeType":"YulAssignment","src":"2202:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2336:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2210:124:27"},"nodeType":"YulFunctionCall","src":"2210:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2202:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2080:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2095:4:27","type":""}],"src":"1929:419:27"},{"body":{"nodeType":"YulBlock","src":"2460:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2482:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2490:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2478:3:27"},"nodeType":"YulFunctionCall","src":"2478:14:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"2494:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2471:6:27"},"nodeType":"YulFunctionCall","src":"2471:49:27"},"nodeType":"YulExpressionStatement","src":"2471:49:27"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2452:6:27","type":""}],"src":"2354:173:27"},{"body":{"nodeType":"YulBlock","src":"2679:220:27","statements":[{"nodeType":"YulAssignment","src":"2689:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2755:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2760:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2696:58:27"},"nodeType":"YulFunctionCall","src":"2696:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2689:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2861:3:27"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulIdentifier","src":"2772:88:27"},"nodeType":"YulFunctionCall","src":"2772:93:27"},"nodeType":"YulExpressionStatement","src":"2772:93:27"},{"nodeType":"YulAssignment","src":"2874:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2885:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2890:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2881:3:27"},"nodeType":"YulFunctionCall","src":"2881:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2874:3:27"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2667:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2675:3:27","type":""}],"src":"2533:366:27"},{"body":{"nodeType":"YulBlock","src":"3076:248:27","statements":[{"nodeType":"YulAssignment","src":"3086:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3098:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3109:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3094:3:27"},"nodeType":"YulFunctionCall","src":"3094:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3086:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3133:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3144:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3129:3:27"},"nodeType":"YulFunctionCall","src":"3129:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3152:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3158:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3148:3:27"},"nodeType":"YulFunctionCall","src":"3148:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3122:6:27"},"nodeType":"YulFunctionCall","src":"3122:47:27"},"nodeType":"YulExpressionStatement","src":"3122:47:27"},{"nodeType":"YulAssignment","src":"3178:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3312:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3186:124:27"},"nodeType":"YulFunctionCall","src":"3186:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3178:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3056:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3071:4:27","type":""}],"src":"2905:419:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610a40380380610a40833981810160405281019061003291906102be565b8060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009a90610348565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610127576101268161012f60201b60201c565b5b5050506103d4565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610194906103b4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061028b82610260565b9050919050565b61029b81610280565b81146102a657600080fd5b50565b6000815190506102b881610292565b92915050565b6000602082840312156102d4576102d361025b565b5b60006102e2848285016102a9565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006103326018836102eb565b915061033d826102fc565b602082019050919050565b6000602082019050818103600083015261036181610325565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061039e6017836102eb565b91506103a982610368565b602082019050919050565b600060208201905081810360008301526103cd81610391565b9050919050565b61065d806103e36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea264697066735822122093f7a33f5e83b1cb80bf2fa5865a285258ddacf05c7d0ab1114cd6df7a2365d564736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA40 CODESIZE SUB DUP1 PUSH2 0xA40 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x2BE JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A SWAP1 PUSH2 0x348 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x127 JUMPI PUSH2 0x126 DUP2 PUSH2 0x12F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP POP PUSH2 0x3D4 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x194 SWAP1 PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28B DUP3 PUSH2 0x260 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x29B DUP2 PUSH2 0x280 JUMP JUMPDEST DUP2 EQ PUSH2 0x2A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B8 DUP2 PUSH2 0x292 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2D4 JUMPI PUSH2 0x2D3 PUSH2 0x25B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E2 DUP5 DUP3 DUP6 ADD PUSH2 0x2A9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x332 PUSH1 0x18 DUP4 PUSH2 0x2EB JUMP JUMPDEST SWAP2 POP PUSH2 0x33D DUP3 PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x361 DUP2 PUSH2 0x325 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39E PUSH1 0x17 DUP4 PUSH2 0x2EB JUMP JUMPDEST SWAP2 POP PUSH2 0x3A9 DUP3 PUSH2 0x368 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3CD DUP2 PUSH2 0x391 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x65D DUP1 PUSH2 0x3E3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xF7 LOG3 EXTCODEHASH 0x5E DUP4 0xB1 0xCB DUP1 0xBF 0x2F 0xA5 DUP7 GAS 0x28 MSTORE PC 0xDD 0xAC CREATE 0x5C PUSH30 0xAB1114CD6DF7A2365D564736F6C63430008140033000000000000000000 ","sourceMap":"212:141:2:-:0;;;270:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;327:8;345:1;557::3;537:22;;:8;:22;;;529:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;605:8;595:7;;:18;;;;;;;;;;;;;;;;;;647:1;623:26;;:12;:26;;;619:79;;659:32;678:12;659:18;;;:32;;:::i;:::-;619:79;471:231;;270:81:2;212:141;;1482:188:3;1550:10;1544:16;;:2;:16;;;1536:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1612:2;1595:14;;:19;;;;;;;;;;;;;;;;;;1662:2;1626:39;;1653:7;;;;;;;;;;1626:39;;;;;;;;;;;;1482:188;:::o;88:117:27:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:169::-;1286:11;1320:6;1315:3;1308:19;1360:4;1355:3;1351:14;1336:29;;1202:169;;;;:::o;1377:174::-;1517:26;1513:1;1505:6;1501:14;1494:50;1377:174;:::o;1557:366::-;1699:3;1720:67;1784:2;1779:3;1720:67;:::i;:::-;1713:74;;1796:93;1885:3;1796:93;:::i;:::-;1914:2;1909:3;1905:12;1898:19;;1557:366;;;:::o;1929:419::-;2095:4;2133:2;2122:9;2118:18;2110:26;;2182:9;2176:4;2172:20;2168:1;2157:9;2153:17;2146:47;2210:131;2336:4;2210:131;:::i;:::-;2202:139;;1929:419;;;:::o;2354:173::-;2494:25;2490:1;2482:6;2478:14;2471:49;2354:173;:::o;2533:366::-;2675:3;2696:67;2760:2;2755:3;2696:67;:::i;:::-;2689:74;;2772:93;2861:3;2772:93;:::i;:::-;2890:2;2885:3;2881:12;2874:19;;2533:366;;;:::o;2905:419::-;3071:4;3109:2;3098:9;3094:18;3086:26;;3158:9;3152:4;3148:20;3144:1;3133:9;3129:17;3122:47;3186:131;3312:4;3186:131;:::i;:::-;3178:139;;2905:419;;;:::o;212:141:2:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_1185":{"entryPoint":748,"id":1185,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_1198":{"entryPoint":604,"id":1198,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_1151":{"entryPoint":138,"id":1151,"parameterSlots":0,"returnSlots":0},"@owner_1161":{"entryPoint":543,"id":1161,"parameterSlots":0,"returnSlots":1},"@transferOwnership_1115":{"entryPoint":584,"id":1115,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":1168,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1098,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack":{"entryPoint":1292,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":1400,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":1508,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1113,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1327,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1435,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1543,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1234,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1080,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1048,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1140,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c":{"entryPoint":1251,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":1359,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":1467,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1145,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4626:27","statements":[{"body":{"nodeType":"YulBlock","src":"52:81:27","statements":[{"nodeType":"YulAssignment","src":"62:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"77:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"84:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"73:3:27"},"nodeType":"YulFunctionCall","src":"73:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:27","type":""}],"src":"7:126:27"},{"body":{"nodeType":"YulBlock","src":"184:51:27","statements":[{"nodeType":"YulAssignment","src":"194:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"205:17:27"},"nodeType":"YulFunctionCall","src":"205:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"194:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"166:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"176:7:27","type":""}],"src":"139:96:27"},{"body":{"nodeType":"YulBlock","src":"306:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"323:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"346:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"328:17:27"},"nodeType":"YulFunctionCall","src":"328:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"316:6:27"},"nodeType":"YulFunctionCall","src":"316:37:27"},"nodeType":"YulExpressionStatement","src":"316:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"294:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"301:3:27","type":""}],"src":"241:118:27"},{"body":{"nodeType":"YulBlock","src":"463:124:27","statements":[{"nodeType":"YulAssignment","src":"473:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"485:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"496:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"481:3:27"},"nodeType":"YulFunctionCall","src":"481:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"473:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"553:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"566:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"577:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"562:3:27"},"nodeType":"YulFunctionCall","src":"562:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"509:43:27"},"nodeType":"YulFunctionCall","src":"509:71:27"},"nodeType":"YulExpressionStatement","src":"509:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"435:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"447:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"458:4:27","type":""}],"src":"365:222:27"},{"body":{"nodeType":"YulBlock","src":"633:35:27","statements":[{"nodeType":"YulAssignment","src":"643:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"659:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"653:5:27"},"nodeType":"YulFunctionCall","src":"653:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"643:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"626:6:27","type":""}],"src":"593:75:27"},{"body":{"nodeType":"YulBlock","src":"763:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"780:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"783:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"773:6:27"},"nodeType":"YulFunctionCall","src":"773:12:27"},"nodeType":"YulExpressionStatement","src":"773:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"674:117:27"},{"body":{"nodeType":"YulBlock","src":"886:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"903:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"906:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"896:6:27"},"nodeType":"YulFunctionCall","src":"896:12:27"},"nodeType":"YulExpressionStatement","src":"896:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"797:117:27"},{"body":{"nodeType":"YulBlock","src":"963:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"1020:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1029:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1032:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1022:6:27"},"nodeType":"YulFunctionCall","src":"1022:12:27"},"nodeType":"YulExpressionStatement","src":"1022:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"986:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1011:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"993:17:27"},"nodeType":"YulFunctionCall","src":"993:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"983:2:27"},"nodeType":"YulFunctionCall","src":"983:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"976:6:27"},"nodeType":"YulFunctionCall","src":"976:43:27"},"nodeType":"YulIf","src":"973:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"956:5:27","type":""}],"src":"920:122:27"},{"body":{"nodeType":"YulBlock","src":"1100:87:27","statements":[{"nodeType":"YulAssignment","src":"1110:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1132:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1119:12:27"},"nodeType":"YulFunctionCall","src":"1119:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1110:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1175:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1148:26:27"},"nodeType":"YulFunctionCall","src":"1148:33:27"},"nodeType":"YulExpressionStatement","src":"1148:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1078:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1086:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1094:5:27","type":""}],"src":"1048:139:27"},{"body":{"nodeType":"YulBlock","src":"1259:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"1305:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1307:77:27"},"nodeType":"YulFunctionCall","src":"1307:79:27"},"nodeType":"YulExpressionStatement","src":"1307:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1280:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"1289:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1276:3:27"},"nodeType":"YulFunctionCall","src":"1276:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"1301:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1272:3:27"},"nodeType":"YulFunctionCall","src":"1272:32:27"},"nodeType":"YulIf","src":"1269:119:27"},{"nodeType":"YulBlock","src":"1398:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1413:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1427:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1417:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1442:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1477:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1488:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1473:3:27"},"nodeType":"YulFunctionCall","src":"1473:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1497:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1452:20:27"},"nodeType":"YulFunctionCall","src":"1452:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1442:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1229:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1240:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1252:6:27","type":""}],"src":"1193:329:27"},{"body":{"nodeType":"YulBlock","src":"1624:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1641:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1646:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1634:6:27"},"nodeType":"YulFunctionCall","src":"1634:19:27"},"nodeType":"YulExpressionStatement","src":"1634:19:27"},{"nodeType":"YulAssignment","src":"1662:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1681:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1686:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1677:3:27"},"nodeType":"YulFunctionCall","src":"1677:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1662:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1596:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1601:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1612:11:27","type":""}],"src":"1528:169:27"},{"body":{"nodeType":"YulBlock","src":"1809:66:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1831:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"1839:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1827:3:27"},"nodeType":"YulFunctionCall","src":"1827:14:27"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1843:24:27","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1820:6:27"},"nodeType":"YulFunctionCall","src":"1820:48:27"},"nodeType":"YulExpressionStatement","src":"1820:48:27"}]},"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1801:6:27","type":""}],"src":"1703:172:27"},{"body":{"nodeType":"YulBlock","src":"2027:220:27","statements":[{"nodeType":"YulAssignment","src":"2037:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2103:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2108:2:27","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2044:58:27"},"nodeType":"YulFunctionCall","src":"2044:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2037:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2209:3:27"}],"functionName":{"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nodeType":"YulIdentifier","src":"2120:88:27"},"nodeType":"YulFunctionCall","src":"2120:93:27"},"nodeType":"YulExpressionStatement","src":"2120:93:27"},{"nodeType":"YulAssignment","src":"2222:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2233:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2238:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2229:3:27"},"nodeType":"YulFunctionCall","src":"2229:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2222:3:27"}]}]},"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2015:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2023:3:27","type":""}],"src":"1881:366:27"},{"body":{"nodeType":"YulBlock","src":"2424:248:27","statements":[{"nodeType":"YulAssignment","src":"2434:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2446:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2457:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2442:3:27"},"nodeType":"YulFunctionCall","src":"2442:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2434:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2481:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2492:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2477:3:27"},"nodeType":"YulFunctionCall","src":"2477:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2500:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2506:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2496:3:27"},"nodeType":"YulFunctionCall","src":"2496:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2470:6:27"},"nodeType":"YulFunctionCall","src":"2470:47:27"},"nodeType":"YulExpressionStatement","src":"2470:47:27"},{"nodeType":"YulAssignment","src":"2526:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2660:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2534:124:27"},"nodeType":"YulFunctionCall","src":"2534:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2526:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2404:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2419:4:27","type":""}],"src":"2253:419:27"},{"body":{"nodeType":"YulBlock","src":"2784:66:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2806:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2814:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2802:3:27"},"nodeType":"YulFunctionCall","src":"2802:14:27"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"2818:24:27","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2795:6:27"},"nodeType":"YulFunctionCall","src":"2795:48:27"},"nodeType":"YulExpressionStatement","src":"2795:48:27"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2776:6:27","type":""}],"src":"2678:172:27"},{"body":{"nodeType":"YulBlock","src":"3002:220:27","statements":[{"nodeType":"YulAssignment","src":"3012:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3078:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3083:2:27","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3019:58:27"},"nodeType":"YulFunctionCall","src":"3019:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3012:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3184:3:27"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulIdentifier","src":"3095:88:27"},"nodeType":"YulFunctionCall","src":"3095:93:27"},"nodeType":"YulExpressionStatement","src":"3095:93:27"},{"nodeType":"YulAssignment","src":"3197:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3208:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3213:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3204:3:27"},"nodeType":"YulFunctionCall","src":"3204:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3197:3:27"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2990:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2998:3:27","type":""}],"src":"2856:366:27"},{"body":{"nodeType":"YulBlock","src":"3399:248:27","statements":[{"nodeType":"YulAssignment","src":"3409:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3421:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3432:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3417:3:27"},"nodeType":"YulFunctionCall","src":"3417:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3409:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3456:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3467:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3452:3:27"},"nodeType":"YulFunctionCall","src":"3452:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3475:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3481:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3471:3:27"},"nodeType":"YulFunctionCall","src":"3471:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3445:6:27"},"nodeType":"YulFunctionCall","src":"3445:47:27"},"nodeType":"YulExpressionStatement","src":"3445:47:27"},{"nodeType":"YulAssignment","src":"3501:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3635:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3509:124:27"},"nodeType":"YulFunctionCall","src":"3509:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3501:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3379:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3394:4:27","type":""}],"src":"3228:419:27"},{"body":{"nodeType":"YulBlock","src":"3759:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3781:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"3789:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3777:3:27"},"nodeType":"YulFunctionCall","src":"3777:14:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"3793:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3770:6:27"},"nodeType":"YulFunctionCall","src":"3770:49:27"},"nodeType":"YulExpressionStatement","src":"3770:49:27"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3751:6:27","type":""}],"src":"3653:173:27"},{"body":{"nodeType":"YulBlock","src":"3978:220:27","statements":[{"nodeType":"YulAssignment","src":"3988:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4054:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"4059:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3995:58:27"},"nodeType":"YulFunctionCall","src":"3995:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3988:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4160:3:27"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulIdentifier","src":"4071:88:27"},"nodeType":"YulFunctionCall","src":"4071:93:27"},"nodeType":"YulExpressionStatement","src":"4071:93:27"},{"nodeType":"YulAssignment","src":"4173:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4184:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"4189:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4180:3:27"},"nodeType":"YulFunctionCall","src":"4180:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4173:3:27"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3966:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3974:3:27","type":""}],"src":"3832:366:27"},{"body":{"nodeType":"YulBlock","src":"4375:248:27","statements":[{"nodeType":"YulAssignment","src":"4385:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4397:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4408:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:27"},"nodeType":"YulFunctionCall","src":"4393:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4385:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4432:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4443:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4428:3:27"},"nodeType":"YulFunctionCall","src":"4428:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4451:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4457:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4447:3:27"},"nodeType":"YulFunctionCall","src":"4447:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4421:6:27"},"nodeType":"YulFunctionCall","src":"4421:47:27"},"nodeType":"YulExpressionStatement","src":"4421:47:27"},{"nodeType":"YulAssignment","src":"4477:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4611:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4485:124:27"},"nodeType":"YulFunctionCall","src":"4485:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4477:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4355:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4370:4:27","type":""}],"src":"4204:419:27"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea264697066735822122093f7a33f5e83b1cb80bf2fa5865a285258ddacf05c7d0ab1114cd6df7a2365d564736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xF7 LOG3 EXTCODEHASH 0x5E DUP4 0xB1 0xCB DUP1 0xBF 0x2F 0xA5 DUP7 GAS 0x28 MSTORE PC 0xDD 0xAC CREATE 0x5C PUSH30 0xAB1114CD6DF7A2365D564736F6C63430008140033000000000000000000 ","sourceMap":"212:141:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:265:3;;;:::i;:::-;;1317:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;811:98;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1001:265;1074:14;;;;;;;;;;;1060:28;;:10;:28;;;1052:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1122:16;1141:7;;;;;;;;;;;1122:26;;1164:10;1154:7;;:20;;;;;;;;;;;;;;;;;;1205:1;1180:14;;:27;;;;;;;;;;;;;;;;;;1250:10;1219:42;;1240:8;1219:42;;;;;;;;;;;;1046:220;1001:265::o;1317:81::-;1364:7;1386;;;;;;;;;;;1379:14;;1317:81;:::o;811:98::-;1941:20;:18;:20::i;:::-;882:22:::1;901:2;882:18;:22::i;:::-;811:98:::0;:::o;1715:111::-;1787:7;;;;;;;;;;1773:21;;:10;:21;;;1765:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1715:111::o;1482:188::-;1550:10;1544:16;;:2;:16;;;1536:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1612:2;1595:14;;:19;;;;;;;;;;;;;;;;;;1662:2;1626:39;;1653:7;;;;;;;;;;1626:39;;;;;;;;;;;;1482:188;:::o;7:126:27:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o;1528:169::-;1612:11;1646:6;1641:3;1634:19;1686:4;1681:3;1677:14;1662:29;;1528:169;;;;:::o;1703:172::-;1843:24;1839:1;1831:6;1827:14;1820:48;1703:172;:::o;1881:366::-;2023:3;2044:67;2108:2;2103:3;2044:67;:::i;:::-;2037:74;;2120:93;2209:3;2120:93;:::i;:::-;2238:2;2233:3;2229:12;2222:19;;1881:366;;;:::o;2253:419::-;2419:4;2457:2;2446:9;2442:18;2434:26;;2506:9;2500:4;2496:20;2492:1;2481:9;2477:17;2470:47;2534:131;2660:4;2534:131;:::i;:::-;2526:139;;2253:419;;;:::o;2678:172::-;2818:24;2814:1;2806:6;2802:14;2795:48;2678:172;:::o;2856:366::-;2998:3;3019:67;3083:2;3078:3;3019:67;:::i;:::-;3012:74;;3095:93;3184:3;3095:93;:::i;:::-;3213:2;3208:3;3204:12;3197:19;;2856:366;;;:::o;3228:419::-;3394:4;3432:2;3421:9;3417:18;3409:26;;3481:9;3475:4;3471:20;3467:1;3456:9;3452:17;3445:47;3509:131;3635:4;3509:131;:::i;:::-;3501:139;;3228:419;;;:::o;3653:173::-;3793:25;3789:1;3781:6;3777:14;3770:49;3653:173;:::o;3832:366::-;3974:3;3995:67;4059:2;4054:3;3995:67;:::i;:::-;3988:74;;4071:93;4160:3;4071:93;:::i;:::-;4189:2;4184:3;4180:12;4173:19;;3832:366;;;:::o;4204:419::-;4370:4;4408:2;4397:9;4393:18;4385:26;;4457:9;4451:4;4447:20;4443:1;4432:9;4428:17;4421:47;4485:131;4611:4;4485:131;:::i;:::-;4477:139;;4204:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"325800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"54518","owner()":"2522","transferOwnership(address)":"30676"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":\"ConfirmedOwner\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1053,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1055,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol:ConfirmedOwner","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol":{"ConfirmedOwnerWithProposal":{"abi":[{"inputs":[{"internalType":"address","name":"newOwner","type":"address"},{"internalType":"address","name":"pendingOwner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"The ConfirmedOwner contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1101":{"entryPoint":null,"id":1101,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_1185":{"entryPoint":300,"id":1185,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":678,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address_fromMemory":{"entryPoint":699,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack":{"entryPoint":821,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":929,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":856,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":964,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":763,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":637,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":605,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":600,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2":{"entryPoint":780,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":888,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":655,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3483:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"379:81:27","statements":[{"nodeType":"YulAssignment","src":"389:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:27"},"nodeType":"YulFunctionCall","src":"400:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:27","type":""}],"src":"334:126:27"},{"body":{"nodeType":"YulBlock","src":"511:51:27","statements":[{"nodeType":"YulAssignment","src":"521:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:27"},"nodeType":"YulFunctionCall","src":"532:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:27","type":""}],"src":"466:96:27"},{"body":{"nodeType":"YulBlock","src":"611:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:27"},"nodeType":"YulFunctionCall","src":"670:12:27"},"nodeType":"YulExpressionStatement","src":"670:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:27"},"nodeType":"YulFunctionCall","src":"641:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:27"},"nodeType":"YulFunctionCall","src":"631:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:27"},"nodeType":"YulFunctionCall","src":"624:43:27"},"nodeType":"YulIf","src":"621:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:27","type":""}],"src":"568:122:27"},{"body":{"nodeType":"YulBlock","src":"759:80:27","statements":[{"nodeType":"YulAssignment","src":"769:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:27"},"nodeType":"YulFunctionCall","src":"778:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:27"},"nodeType":"YulFunctionCall","src":"800:33:27"},"nodeType":"YulExpressionStatement","src":"800:33:27"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:27","type":""}],"src":"696:143:27"},{"body":{"nodeType":"YulBlock","src":"939:413:27","statements":[{"body":{"nodeType":"YulBlock","src":"985:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"987:77:27"},"nodeType":"YulFunctionCall","src":"987:79:27"},"nodeType":"YulExpressionStatement","src":"987:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"960:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"969:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"956:3:27"},"nodeType":"YulFunctionCall","src":"956:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"981:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"952:3:27"},"nodeType":"YulFunctionCall","src":"952:32:27"},"nodeType":"YulIf","src":"949:119:27"},{"nodeType":"YulBlock","src":"1078:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1093:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1107:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1097:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1122:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1168:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1179:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1164:3:27"},"nodeType":"YulFunctionCall","src":"1164:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1188:7:27"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1132:31:27"},"nodeType":"YulFunctionCall","src":"1132:64:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1122:6:27"}]}]},{"nodeType":"YulBlock","src":"1216:129:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1231:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1245:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1235:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1261:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1307:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1318:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1303:3:27"},"nodeType":"YulFunctionCall","src":"1303:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1327:7:27"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1271:31:27"},"nodeType":"YulFunctionCall","src":"1271:64:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1261:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"901:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"912:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"924:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"932:6:27","type":""}],"src":"845:507:27"},{"body":{"nodeType":"YulBlock","src":"1454:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1471:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1476:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1464:6:27"},"nodeType":"YulFunctionCall","src":"1464:19:27"},"nodeType":"YulExpressionStatement","src":"1464:19:27"},{"nodeType":"YulAssignment","src":"1492:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1511:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1516:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1507:3:27"},"nodeType":"YulFunctionCall","src":"1507:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1492:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1426:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1431:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1442:11:27","type":""}],"src":"1358:169:27"},{"body":{"nodeType":"YulBlock","src":"1639:68:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1661:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"1669:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1657:3:27"},"nodeType":"YulFunctionCall","src":"1657:14:27"},{"hexValue":"43616e6e6f7420736574206f776e657220746f207a65726f","kind":"string","nodeType":"YulLiteral","src":"1673:26:27","type":"","value":"Cannot set owner to zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1650:6:27"},"nodeType":"YulFunctionCall","src":"1650:50:27"},"nodeType":"YulExpressionStatement","src":"1650:50:27"}]},"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1631:6:27","type":""}],"src":"1533:174:27"},{"body":{"nodeType":"YulBlock","src":"1859:220:27","statements":[{"nodeType":"YulAssignment","src":"1869:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1935:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1940:2:27","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1876:58:27"},"nodeType":"YulFunctionCall","src":"1876:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1869:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2041:3:27"}],"functionName":{"name":"store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2","nodeType":"YulIdentifier","src":"1952:88:27"},"nodeType":"YulFunctionCall","src":"1952:93:27"},"nodeType":"YulExpressionStatement","src":"1952:93:27"},{"nodeType":"YulAssignment","src":"2054:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2065:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2070:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2061:3:27"},"nodeType":"YulFunctionCall","src":"2061:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2054:3:27"}]}]},"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1847:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1855:3:27","type":""}],"src":"1713:366:27"},{"body":{"nodeType":"YulBlock","src":"2256:248:27","statements":[{"nodeType":"YulAssignment","src":"2266:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2278:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2289:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2274:3:27"},"nodeType":"YulFunctionCall","src":"2274:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2266:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2313:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2324:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2309:3:27"},"nodeType":"YulFunctionCall","src":"2309:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2332:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2338:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2328:3:27"},"nodeType":"YulFunctionCall","src":"2328:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2302:6:27"},"nodeType":"YulFunctionCall","src":"2302:47:27"},"nodeType":"YulExpressionStatement","src":"2302:47:27"},{"nodeType":"YulAssignment","src":"2358:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2492:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2366:124:27"},"nodeType":"YulFunctionCall","src":"2366:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2358:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2236:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2251:4:27","type":""}],"src":"2085:419:27"},{"body":{"nodeType":"YulBlock","src":"2616:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2638:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2646:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:27"},"nodeType":"YulFunctionCall","src":"2634:14:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"2650:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2627:6:27"},"nodeType":"YulFunctionCall","src":"2627:49:27"},"nodeType":"YulExpressionStatement","src":"2627:49:27"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2608:6:27","type":""}],"src":"2510:173:27"},{"body":{"nodeType":"YulBlock","src":"2835:220:27","statements":[{"nodeType":"YulAssignment","src":"2845:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2911:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2916:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2852:58:27"},"nodeType":"YulFunctionCall","src":"2852:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2845:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3017:3:27"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulIdentifier","src":"2928:88:27"},"nodeType":"YulFunctionCall","src":"2928:93:27"},"nodeType":"YulExpressionStatement","src":"2928:93:27"},{"nodeType":"YulAssignment","src":"3030:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3041:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3046:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3037:3:27"},"nodeType":"YulFunctionCall","src":"3037:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3030:3:27"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2823:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2831:3:27","type":""}],"src":"2689:366:27"},{"body":{"nodeType":"YulBlock","src":"3232:248:27","statements":[{"nodeType":"YulAssignment","src":"3242:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3254:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3265:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3250:3:27"},"nodeType":"YulFunctionCall","src":"3250:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3242:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3289:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3300:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3285:3:27"},"nodeType":"YulFunctionCall","src":"3285:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3308:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3314:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3304:3:27"},"nodeType":"YulFunctionCall","src":"3304:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3278:6:27"},"nodeType":"YulFunctionCall","src":"3278:47:27"},"nodeType":"YulExpressionStatement","src":"3278:47:27"},{"nodeType":"YulAssignment","src":"3334:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3468:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3342:124:27"},"nodeType":"YulFunctionCall","src":"3342:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3334:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3212:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3227:4:27","type":""}],"src":"3061:419:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b50604051610a50380380610a50833981810160405281019061003291906102bb565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610358565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610125576101248161012c60201b60201c565b5b50506103e4565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610191906103c4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102888261025d565b9050919050565b6102988161027d565b81146102a357600080fd5b50565b6000815190506102b58161028f565b92915050565b600080604083850312156102d2576102d1610258565b5b60006102e0858286016102a6565b92505060206102f1858286016102a6565b9150509250929050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006103426018836102fb565b915061034d8261030c565b602082019050919050565b6000602082019050818103600083015261037181610335565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006103ae6017836102fb565b91506103b982610378565b602082019050919050565b600060208201905081810360008301526103dd816103a1565b9050919050565b61065d806103f36000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea2646970667358221220117b076e0997bdd134bdec5f56d627594b31caba18fd1b20cfba66d9afea0b4164736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xA50 CODESIZE SUB DUP1 PUSH2 0xA50 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x2BB JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x98 SWAP1 PUSH2 0x358 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x125 JUMPI PUSH2 0x124 DUP2 PUSH2 0x12C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP PUSH2 0x3E4 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x19A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x191 SWAP1 PUSH2 0x3C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x288 DUP3 PUSH2 0x25D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x298 DUP2 PUSH2 0x27D JUMP JUMPDEST DUP2 EQ PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B5 DUP2 PUSH2 0x28F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D2 JUMPI PUSH2 0x2D1 PUSH2 0x258 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E0 DUP6 DUP3 DUP7 ADD PUSH2 0x2A6 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2F1 DUP6 DUP3 DUP7 ADD PUSH2 0x2A6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x342 PUSH1 0x18 DUP4 PUSH2 0x2FB JUMP JUMPDEST SWAP2 POP PUSH2 0x34D DUP3 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x371 DUP2 PUSH2 0x335 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3AE PUSH1 0x17 DUP4 PUSH2 0x2FB JUMP JUMPDEST SWAP2 POP PUSH2 0x3B9 DUP3 PUSH2 0x378 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3DD DUP2 PUSH2 0x3A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x65D DUP1 PUSH2 0x3F3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT PUSH28 0x76E0997BDD134BDEC5F56D627594B31CABA18FD1B20CFBA66D9AFEA SIGNEXTEND COINBASE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"206:1769:3:-:0;;;471:231;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;557:1;537:22;;:8;:22;;;529:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;605:8;595:7;;:18;;;;;;;;;;;;;;;;;;647:1;623:26;;:12;:26;;;619:79;;659:32;678:12;659:18;;;:32;;:::i;:::-;619:79;471:231;;206:1769;;1482:188;1550:10;1544:16;;:2;:16;;;1536:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1612:2;1595:14;;:19;;;;;;;;;;;;;;;;;;1662:2;1626:39;;1653:7;;;;;;;;;;1626:39;;;;;;;;;;;;1482:188;:::o;88:117:27:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:507::-;924:6;932;981:2;969:9;960:7;956:23;952:32;949:119;;;987:79;;:::i;:::-;949:119;1107:1;1132:64;1188:7;1179:6;1168:9;1164:22;1132:64;:::i;:::-;1122:74;;1078:128;1245:2;1271:64;1327:7;1318:6;1307:9;1303:22;1271:64;:::i;:::-;1261:74;;1216:129;845:507;;;;;:::o;1358:169::-;1442:11;1476:6;1471:3;1464:19;1516:4;1511:3;1507:14;1492:29;;1358:169;;;;:::o;1533:174::-;1673:26;1669:1;1661:6;1657:14;1650:50;1533:174;:::o;1713:366::-;1855:3;1876:67;1940:2;1935:3;1876:67;:::i;:::-;1869:74;;1952:93;2041:3;1952:93;:::i;:::-;2070:2;2065:3;2061:12;2054:19;;1713:366;;;:::o;2085:419::-;2251:4;2289:2;2278:9;2274:18;2266:26;;2338:9;2332:4;2328:20;2324:1;2313:9;2309:17;2302:47;2366:131;2492:4;2366:131;:::i;:::-;2358:139;;2085:419;;;:::o;2510:173::-;2650:25;2646:1;2638:6;2634:14;2627:49;2510:173;:::o;2689:366::-;2831:3;2852:67;2916:2;2911:3;2852:67;:::i;:::-;2845:74;;2928:93;3017:3;2928:93;:::i;:::-;3046:2;3041:3;3037:12;3030:19;;2689:366;;;:::o;3061:419::-;3227:4;3265:2;3254:9;3250:18;3242:26;;3314:9;3308:4;3304:20;3300:1;3289:9;3285:17;3278:47;3342:131;3468:4;3342:131;:::i;:::-;3334:139;;3061:419;;;:::o;206:1769:3:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_transferOwnership_1185":{"entryPoint":748,"id":1185,"parameterSlots":1,"returnSlots":0},"@_validateOwnership_1198":{"entryPoint":604,"id":1198,"parameterSlots":0,"returnSlots":0},"@acceptOwnership_1151":{"entryPoint":138,"id":1151,"parameterSlots":0,"returnSlots":0},"@owner_1161":{"entryPoint":543,"id":1161,"parameterSlots":0,"returnSlots":1},"@transferOwnership_1115":{"entryPoint":584,"id":1115,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address":{"entryPoint":1168,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1098,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack":{"entryPoint":1292,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack":{"entryPoint":1400,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack":{"entryPoint":1508,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1113,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1327,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1435,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1543,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1234,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1080,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1048,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1140,"id":null,"parameterSlots":0,"returnSlots":0},"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c":{"entryPoint":1251,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3":{"entryPoint":1359,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2":{"entryPoint":1467,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1145,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4626:27","statements":[{"body":{"nodeType":"YulBlock","src":"52:81:27","statements":[{"nodeType":"YulAssignment","src":"62:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"77:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"84:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"73:3:27"},"nodeType":"YulFunctionCall","src":"73:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:27","type":""}],"src":"7:126:27"},{"body":{"nodeType":"YulBlock","src":"184:51:27","statements":[{"nodeType":"YulAssignment","src":"194:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"205:17:27"},"nodeType":"YulFunctionCall","src":"205:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"194:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"166:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"176:7:27","type":""}],"src":"139:96:27"},{"body":{"nodeType":"YulBlock","src":"306:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"323:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"346:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"328:17:27"},"nodeType":"YulFunctionCall","src":"328:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"316:6:27"},"nodeType":"YulFunctionCall","src":"316:37:27"},"nodeType":"YulExpressionStatement","src":"316:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"294:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"301:3:27","type":""}],"src":"241:118:27"},{"body":{"nodeType":"YulBlock","src":"463:124:27","statements":[{"nodeType":"YulAssignment","src":"473:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"485:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"496:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"481:3:27"},"nodeType":"YulFunctionCall","src":"481:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"473:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"553:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"566:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"577:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"562:3:27"},"nodeType":"YulFunctionCall","src":"562:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"509:43:27"},"nodeType":"YulFunctionCall","src":"509:71:27"},"nodeType":"YulExpressionStatement","src":"509:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"435:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"447:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"458:4:27","type":""}],"src":"365:222:27"},{"body":{"nodeType":"YulBlock","src":"633:35:27","statements":[{"nodeType":"YulAssignment","src":"643:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"659:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"653:5:27"},"nodeType":"YulFunctionCall","src":"653:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"643:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"626:6:27","type":""}],"src":"593:75:27"},{"body":{"nodeType":"YulBlock","src":"763:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"780:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"783:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"773:6:27"},"nodeType":"YulFunctionCall","src":"773:12:27"},"nodeType":"YulExpressionStatement","src":"773:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"674:117:27"},{"body":{"nodeType":"YulBlock","src":"886:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"903:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"906:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"896:6:27"},"nodeType":"YulFunctionCall","src":"896:12:27"},"nodeType":"YulExpressionStatement","src":"896:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"797:117:27"},{"body":{"nodeType":"YulBlock","src":"963:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"1020:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1029:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1032:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1022:6:27"},"nodeType":"YulFunctionCall","src":"1022:12:27"},"nodeType":"YulExpressionStatement","src":"1022:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"986:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1011:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"993:17:27"},"nodeType":"YulFunctionCall","src":"993:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"983:2:27"},"nodeType":"YulFunctionCall","src":"983:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"976:6:27"},"nodeType":"YulFunctionCall","src":"976:43:27"},"nodeType":"YulIf","src":"973:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"956:5:27","type":""}],"src":"920:122:27"},{"body":{"nodeType":"YulBlock","src":"1100:87:27","statements":[{"nodeType":"YulAssignment","src":"1110:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1132:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1119:12:27"},"nodeType":"YulFunctionCall","src":"1119:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1110:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1175:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"1148:26:27"},"nodeType":"YulFunctionCall","src":"1148:33:27"},"nodeType":"YulExpressionStatement","src":"1148:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1078:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1086:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1094:5:27","type":""}],"src":"1048:139:27"},{"body":{"nodeType":"YulBlock","src":"1259:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"1305:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1307:77:27"},"nodeType":"YulFunctionCall","src":"1307:79:27"},"nodeType":"YulExpressionStatement","src":"1307:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1280:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"1289:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1276:3:27"},"nodeType":"YulFunctionCall","src":"1276:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"1301:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1272:3:27"},"nodeType":"YulFunctionCall","src":"1272:32:27"},"nodeType":"YulIf","src":"1269:119:27"},{"nodeType":"YulBlock","src":"1398:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1413:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1427:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1417:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1442:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1477:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1488:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1473:3:27"},"nodeType":"YulFunctionCall","src":"1473:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1497:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1452:20:27"},"nodeType":"YulFunctionCall","src":"1452:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1442:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1229:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1240:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1252:6:27","type":""}],"src":"1193:329:27"},{"body":{"nodeType":"YulBlock","src":"1624:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1641:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1646:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1634:6:27"},"nodeType":"YulFunctionCall","src":"1634:19:27"},"nodeType":"YulExpressionStatement","src":"1634:19:27"},{"nodeType":"YulAssignment","src":"1662:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1681:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1686:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1677:3:27"},"nodeType":"YulFunctionCall","src":"1677:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1662:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1596:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1601:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1612:11:27","type":""}],"src":"1528:169:27"},{"body":{"nodeType":"YulBlock","src":"1809:66:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1831:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"1839:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1827:3:27"},"nodeType":"YulFunctionCall","src":"1827:14:27"},{"hexValue":"4d7573742062652070726f706f736564206f776e6572","kind":"string","nodeType":"YulLiteral","src":"1843:24:27","type":"","value":"Must be proposed owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1820:6:27"},"nodeType":"YulFunctionCall","src":"1820:48:27"},"nodeType":"YulExpressionStatement","src":"1820:48:27"}]},"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1801:6:27","type":""}],"src":"1703:172:27"},{"body":{"nodeType":"YulBlock","src":"2027:220:27","statements":[{"nodeType":"YulAssignment","src":"2037:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2103:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2108:2:27","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2044:58:27"},"nodeType":"YulFunctionCall","src":"2044:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2037:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2209:3:27"}],"functionName":{"name":"store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c","nodeType":"YulIdentifier","src":"2120:88:27"},"nodeType":"YulFunctionCall","src":"2120:93:27"},"nodeType":"YulExpressionStatement","src":"2120:93:27"},{"nodeType":"YulAssignment","src":"2222:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2233:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2238:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2229:3:27"},"nodeType":"YulFunctionCall","src":"2229:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2222:3:27"}]}]},"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2015:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2023:3:27","type":""}],"src":"1881:366:27"},{"body":{"nodeType":"YulBlock","src":"2424:248:27","statements":[{"nodeType":"YulAssignment","src":"2434:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2446:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2457:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2442:3:27"},"nodeType":"YulFunctionCall","src":"2442:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2434:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2481:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2492:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2477:3:27"},"nodeType":"YulFunctionCall","src":"2477:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2500:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2506:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2496:3:27"},"nodeType":"YulFunctionCall","src":"2496:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2470:6:27"},"nodeType":"YulFunctionCall","src":"2470:47:27"},"nodeType":"YulExpressionStatement","src":"2470:47:27"},{"nodeType":"YulAssignment","src":"2526:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2660:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2534:124:27"},"nodeType":"YulFunctionCall","src":"2534:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2526:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2404:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2419:4:27","type":""}],"src":"2253:419:27"},{"body":{"nodeType":"YulBlock","src":"2784:66:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2806:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2814:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2802:3:27"},"nodeType":"YulFunctionCall","src":"2802:14:27"},{"hexValue":"4f6e6c792063616c6c61626c65206279206f776e6572","kind":"string","nodeType":"YulLiteral","src":"2818:24:27","type":"","value":"Only callable by owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2795:6:27"},"nodeType":"YulFunctionCall","src":"2795:48:27"},"nodeType":"YulExpressionStatement","src":"2795:48:27"}]},"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2776:6:27","type":""}],"src":"2678:172:27"},{"body":{"nodeType":"YulBlock","src":"3002:220:27","statements":[{"nodeType":"YulAssignment","src":"3012:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3078:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3083:2:27","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3019:58:27"},"nodeType":"YulFunctionCall","src":"3019:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3012:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3184:3:27"}],"functionName":{"name":"store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3","nodeType":"YulIdentifier","src":"3095:88:27"},"nodeType":"YulFunctionCall","src":"3095:93:27"},"nodeType":"YulExpressionStatement","src":"3095:93:27"},{"nodeType":"YulAssignment","src":"3197:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3208:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"3213:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3204:3:27"},"nodeType":"YulFunctionCall","src":"3204:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3197:3:27"}]}]},"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2990:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2998:3:27","type":""}],"src":"2856:366:27"},{"body":{"nodeType":"YulBlock","src":"3399:248:27","statements":[{"nodeType":"YulAssignment","src":"3409:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3421:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3432:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3417:3:27"},"nodeType":"YulFunctionCall","src":"3417:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3409:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3456:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"3467:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3452:3:27"},"nodeType":"YulFunctionCall","src":"3452:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3475:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3481:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3471:3:27"},"nodeType":"YulFunctionCall","src":"3471:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3445:6:27"},"nodeType":"YulFunctionCall","src":"3445:47:27"},"nodeType":"YulExpressionStatement","src":"3445:47:27"},{"nodeType":"YulAssignment","src":"3501:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"3635:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3509:124:27"},"nodeType":"YulFunctionCall","src":"3509:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3501:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3379:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3394:4:27","type":""}],"src":"3228:419:27"},{"body":{"nodeType":"YulBlock","src":"3759:67:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3781:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"3789:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3777:3:27"},"nodeType":"YulFunctionCall","src":"3777:14:27"},{"hexValue":"43616e6e6f74207472616e7366657220746f2073656c66","kind":"string","nodeType":"YulLiteral","src":"3793:25:27","type":"","value":"Cannot transfer to self"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3770:6:27"},"nodeType":"YulFunctionCall","src":"3770:49:27"},"nodeType":"YulExpressionStatement","src":"3770:49:27"}]},"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"3751:6:27","type":""}],"src":"3653:173:27"},{"body":{"nodeType":"YulBlock","src":"3978:220:27","statements":[{"nodeType":"YulAssignment","src":"3988:74:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4054:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"4059:2:27","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"3995:58:27"},"nodeType":"YulFunctionCall","src":"3995:67:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3988:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4160:3:27"}],"functionName":{"name":"store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2","nodeType":"YulIdentifier","src":"4071:88:27"},"nodeType":"YulFunctionCall","src":"4071:93:27"},"nodeType":"YulExpressionStatement","src":"4071:93:27"},{"nodeType":"YulAssignment","src":"4173:19:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4184:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"4189:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4180:3:27"},"nodeType":"YulFunctionCall","src":"4180:12:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4173:3:27"}]}]},"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3966:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3974:3:27","type":""}],"src":"3832:366:27"},{"body":{"nodeType":"YulBlock","src":"4375:248:27","statements":[{"nodeType":"YulAssignment","src":"4385:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4397:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4408:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:27"},"nodeType":"YulFunctionCall","src":"4393:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4385:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4432:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4443:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4428:3:27"},"nodeType":"YulFunctionCall","src":"4428:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4451:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4457:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4447:3:27"},"nodeType":"YulFunctionCall","src":"4447:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4421:6:27"},"nodeType":"YulFunctionCall","src":"4421:47:27"},"nodeType":"YulExpressionStatement","src":"4421:47:27"},{"nodeType":"YulAssignment","src":"4477:139:27","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4611:4:27"}],"functionName":{"name":"abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4485:124:27"},"nodeType":"YulFunctionCall","src":"4485:131:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4477:4:27"}]}]},"name":"abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4355:9:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4370:4:27","type":""}],"src":"4204:419:27"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c806379ba5097146100465780638da5cb5b14610050578063f2fde38b1461006e575b600080fd5b61004e61008a565b005b61005861021f565b6040516100659190610459565b60405180910390f35b610088600480360381019061008391906104a5565b610248565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101119061052f565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61025061025c565b610259816102ec565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e19061059b565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035190610607565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044382610418565b9050919050565b61045381610438565b82525050565b600060208201905061046e600083018461044a565b92915050565b600080fd5b61048281610438565b811461048d57600080fd5b50565b60008135905061049f81610479565b92915050565b6000602082840312156104bb576104ba610474565b5b60006104c984828501610490565b91505092915050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006105196016836104d2565b9150610524826104e3565b602082019050919050565b600060208201905081810360008301526105488161050c565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006105856016836104d2565b91506105908261054f565b602082019050919050565b600060208201905081810360008301526105b481610578565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006105f16017836104d2565b91506105fc826105bb565b602082019050919050565b60006020820190508181036000830152610620816105e4565b905091905056fea2646970667358221220117b076e0997bdd134bdec5f56d627594b31caba18fd1b20cfba66d9afea0b4164736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x6E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x8A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x65 SWAP2 SWAP1 PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x248 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x111 SWAP1 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x250 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x259 DUP2 PUSH2 0x2EC JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E1 SWAP1 PUSH2 0x59B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x35A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x351 SWAP1 PUSH2 0x607 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x443 DUP3 PUSH2 0x418 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x453 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x46E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x44A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x482 DUP2 PUSH2 0x438 JUMP JUMPDEST DUP2 EQ PUSH2 0x48D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x49F DUP2 PUSH2 0x479 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BA PUSH2 0x474 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4C9 DUP5 DUP3 DUP6 ADD PUSH2 0x490 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x519 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x524 DUP3 PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x548 DUP2 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x585 PUSH1 0x16 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x590 DUP3 PUSH2 0x54F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5B4 DUP2 PUSH2 0x578 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F1 PUSH1 0x17 DUP4 PUSH2 0x4D2 JUMP JUMPDEST SWAP2 POP PUSH2 0x5FC DUP3 PUSH2 0x5BB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x620 DUP2 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT PUSH28 0x76E0997BDD134BDEC5F56D627594B31CABA18FD1B20CFBA66D9AFEA SIGNEXTEND COINBASE PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"206:1769:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:265;;;:::i;:::-;;1317:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;811:98;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1001:265;1074:14;;;;;;;;;;;1060:28;;:10;:28;;;1052:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1122:16;1141:7;;;;;;;;;;;1122:26;;1164:10;1154:7;;:20;;;;;;;;;;;;;;;;;;1205:1;1180:14;;:27;;;;;;;;;;;;;;;;;;1250:10;1219:42;;1240:8;1219:42;;;;;;;;;;;;1046:220;1001:265::o;1317:81::-;1364:7;1386;;;;;;;;;;;1379:14;;1317:81;:::o;811:98::-;1941:20;:18;:20::i;:::-;882:22:::1;901:2;882:18;:22::i;:::-;811:98:::0;:::o;1715:111::-;1787:7;;;;;;;;;;1773:21;;:10;:21;;;1765:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1715:111::o;1482:188::-;1550:10;1544:16;;:2;:16;;;1536:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1612:2;1595:14;;:19;;;;;;;;;;;;;;;;;;1662:2;1626:39;;1653:7;;;;;;;;;;1626:39;;;;;;;;;;;;1482:188;:::o;7:126:27:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:118::-;328:24;346:5;328:24;:::i;:::-;323:3;316:37;241:118;;:::o;365:222::-;458:4;496:2;485:9;481:18;473:26;;509:71;577:1;566:9;562:17;553:6;509:71;:::i;:::-;365:222;;;;:::o;674:117::-;783:1;780;773:12;920:122;993:24;1011:5;993:24;:::i;:::-;986:5;983:35;973:63;;1032:1;1029;1022:12;973:63;920:122;:::o;1048:139::-;1094:5;1132:6;1119:20;1110:29;;1148:33;1175:5;1148:33;:::i;:::-;1048:139;;;;:::o;1193:329::-;1252:6;1301:2;1289:9;1280:7;1276:23;1272:32;1269:119;;;1307:79;;:::i;:::-;1269:119;1427:1;1452:53;1497:7;1488:6;1477:9;1473:22;1452:53;:::i;:::-;1442:63;;1398:117;1193:329;;;;:::o;1528:169::-;1612:11;1646:6;1641:3;1634:19;1686:4;1681:3;1677:14;1662:29;;1528:169;;;;:::o;1703:172::-;1843:24;1839:1;1831:6;1827:14;1820:48;1703:172;:::o;1881:366::-;2023:3;2044:67;2108:2;2103:3;2044:67;:::i;:::-;2037:74;;2120:93;2209:3;2120:93;:::i;:::-;2238:2;2233:3;2229:12;2222:19;;1881:366;;;:::o;2253:419::-;2419:4;2457:2;2446:9;2442:18;2434:26;;2506:9;2500:4;2496:20;2492:1;2481:9;2477:17;2470:47;2534:131;2660:4;2534:131;:::i;:::-;2526:139;;2253:419;;;:::o;2678:172::-;2818:24;2814:1;2806:6;2802:14;2795:48;2678:172;:::o;2856:366::-;2998:3;3019:67;3083:2;3078:3;3019:67;:::i;:::-;3012:74;;3095:93;3184:3;3095:93;:::i;:::-;3213:2;3208:3;3204:12;3197:19;;2856:366;;;:::o;3228:419::-;3394:4;3432:2;3421:9;3417:18;3409:26;;3481:9;3475:4;3471:20;3467:1;3456:9;3452:17;3445:47;3509:131;3635:4;3509:131;:::i;:::-;3501:139;;3228:419;;;:::o;3653:173::-;3793:25;3789:1;3781:6;3777:14;3770:49;3653:173;:::o;3832:366::-;3974:3;3995:67;4059:2;4054:3;3995:67;:::i;:::-;3988:74;;4071:93;4160:3;4071:93;:::i;:::-;4189:2;4184:3;4180:12;4173:19;;3832:366;;;:::o;4204:419::-;4370:4;4408:2;4397:9;4393:18;4385:26;;4457:9;4451:4;4447:20;4443:1;4432:9;4428:17;4421:47;4485:131;4611:4;4485:131;:::i;:::-;4477:139;;4204:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"325800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptOwnership()":"54518","owner()":"2522","transferOwnership(address)":"30676"},"internal":{"_transferOwnership(address)":"infinite","_validateOwnership()":"infinite"}},"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"The ConfirmedOwner contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"notice\":\"A contract with helpers for basic contract ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":\"ConfirmedOwnerWithProposal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1053,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_owner","offset":0,"slot":"0","type":"t_address"},{"astId":1055,"contract":"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol:ConfirmedOwnerWithProposal","label":"s_pendingOwner","offset":0,"slot":"1","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"acceptOwnership()":{"notice":"Allows an ownership transfer to be completed by the recipient."},"owner()":{"notice":"Get the current owner"},"transferOwnership(address)":{"notice":"Allows an owner to begin transferring ownership to a new address, pending."}},"notice":"A contract with helpers for basic contract ownership.","version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol":{"IOwnable":{"abi":[{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1385,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"IERC4906":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"EIP-721 Metadata Update Extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"EIP-721 Metadata Update Extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4906.sol\":\"IERC4906\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1726,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1728,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1732,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1736,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1740,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1746,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1726,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1728,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1732,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1736,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1740,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1746,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2865,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"length","type":"uint256"}],"name":"StringsInsufficientHexLength","type":"error"}],"devdoc":{"details":"String operations.","errors":{"StringsInsufficientHexLength(uint256,uint256)":[{"details":"The `value` string doesn't fit in the specified `length`."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011d1a1503b94e67b1140e37648e2b81c7ec8d2834b954c500654eb5772ec9e9164736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xD1 LOG1 POP EXTCODESIZE SWAP5 0xE6 PUSH28 0x1140E37648E2B81C7EC8D2834B954C500654EB5772EC9E9164736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:2847:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122011d1a1503b94e67b1140e37648e2b81c7ec8d2834b954c500654eb5772ec9e9164736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT 0xD1 LOG1 POP EXTCODESIZE SWAP5 0xE6 PUSH28 0x1140E37648E2B81C7EC8D2834B954C500654EB5772EC9E9164736F6C PUSH4 0x43000814 STOP CALLER ","sourceMap":"251:2847:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite","toStringSigned(int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[{"inputs":[],"name":"MathOverflowedMulDiv","type":"error"}],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","errors":{"MathOverflowedMulDiv()":[{"details":"Muldiv operation overflow."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c9332d4b0da81becbc8931c24d2cd33cbff57a93f4d2e609e7f243f8b0d2b8dc64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC9 CALLER 0x2D 0x4B 0xD 0xA8 SHL 0xEC 0xBC DUP10 BALANCE 0xC2 0x4D 0x2C 0xD3 EXTCODECOPY 0xBF CREATE2 PUSH27 0x93F4D2E609E7F243F8B0D2B8DC64736F6C63430008140033000000 ","sourceMap":"203:14914:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite","unsignedRoundsUp(enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066d55c3938bdee5e14d05a6a04425c3d0b6d4fad67efc8aafeaf67cc517b228a64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xD55C3938BDEE5E EQ 0xD0 GAS PUSH11 0x4425C3D0B6D4FAD67EFC8 0xAA INVALID 0xAF PUSH8 0xCC517B228A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"216:1047:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122066d55c3938bdee5e14d05a6a04425c3d0b6d4fad67efc8aafeaf67cc517b228a64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0xD55C3938BDEE5E EQ 0xD0 GAS PUSH11 0x4425C3D0B6D4FAD67EFC8 0xAA INVALID 0xAF PUSH8 0xCC517B228A64736F PUSH13 0x63430008140033000000000000 ","sourceMap":"216:1047:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/BasicNft.sol":{"BasicNft":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"TOKEN_URI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mintNft","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1763":{"entryPoint":null,"id":1763,"parameterSlots":2,"returnSlots":0},"@_4493":{"entryPoint":null,"id":4493,"parameterSlots":0,"returnSlots":0},"array_dataslot_t_string_storage":{"entryPoint":336,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":178,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":657,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":472,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":618,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":492,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":812,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":357,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":283,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":782,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":482,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":750,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":236,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":189,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":532,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":373,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":737,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":590,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":386,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":542,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":585,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5231:27","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:27","statements":[{"nodeType":"YulAssignment","src":"77:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:27"},"nodeType":"YulFunctionCall","src":"87:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:27","type":""}],"src":"7:99:27"},{"body":{"nodeType":"YulBlock","src":"140:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"157:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"160:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"150:6:27"},"nodeType":"YulFunctionCall","src":"150:88:27"},"nodeType":"YulExpressionStatement","src":"150:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"257:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"247:6:27"},"nodeType":"YulFunctionCall","src":"247:15:27"},"nodeType":"YulExpressionStatement","src":"247:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"278:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"281:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"271:6:27"},"nodeType":"YulFunctionCall","src":"271:15:27"},"nodeType":"YulExpressionStatement","src":"271:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"112:180:27"},{"body":{"nodeType":"YulBlock","src":"326:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"343:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"346:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:27"},"nodeType":"YulFunctionCall","src":"336:88:27"},"nodeType":"YulExpressionStatement","src":"336:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"443:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"433:6:27"},"nodeType":"YulFunctionCall","src":"433:15:27"},"nodeType":"YulExpressionStatement","src":"433:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"467:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"457:6:27"},"nodeType":"YulFunctionCall","src":"457:15:27"},"nodeType":"YulExpressionStatement","src":"457:15:27"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"298:180:27"},{"body":{"nodeType":"YulBlock","src":"535:269:27","statements":[{"nodeType":"YulAssignment","src":"545:22:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"559:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"565:1:27","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"555:3:27"},"nodeType":"YulFunctionCall","src":"555:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"545:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"576:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"606:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"612:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"602:3:27"},"nodeType":"YulFunctionCall","src":"602:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"580:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"653:51:27","statements":[{"nodeType":"YulAssignment","src":"667:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"681:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"689:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"677:3:27"},"nodeType":"YulFunctionCall","src":"677:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"667:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"633:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"626:6:27"},"nodeType":"YulFunctionCall","src":"626:26:27"},"nodeType":"YulIf","src":"623:81:27"},{"body":{"nodeType":"YulBlock","src":"756:42:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"770:16:27"},"nodeType":"YulFunctionCall","src":"770:18:27"},"nodeType":"YulExpressionStatement","src":"770:18:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"720:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"743:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"751:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"740:2:27"},"nodeType":"YulFunctionCall","src":"740:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"717:2:27"},"nodeType":"YulFunctionCall","src":"717:38:27"},"nodeType":"YulIf","src":"714:84:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"519:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"528:6:27","type":""}],"src":"484:320:27"},{"body":{"nodeType":"YulBlock","src":"864:87:27","statements":[{"nodeType":"YulAssignment","src":"874:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"882:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"874:4:27"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"902:1:27","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"905:3:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:27"},"nodeType":"YulFunctionCall","src":"895:14:27"},"nodeType":"YulExpressionStatement","src":"895:14:27"},{"nodeType":"YulAssignment","src":"918:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"926:9:27"},"nodeType":"YulFunctionCall","src":"926:18:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"918:4:27"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"851:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"859:4:27","type":""}],"src":"810:141:27"},{"body":{"nodeType":"YulBlock","src":"1001:49:27","statements":[{"nodeType":"YulAssignment","src":"1011:33:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1025:3:27"},"nodeType":"YulFunctionCall","src":"1025:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"1041:2:27","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1021:3:27"},"nodeType":"YulFunctionCall","src":"1021:23:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1011:6:27"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"984:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"994:6:27","type":""}],"src":"957:93:27"},{"body":{"nodeType":"YulBlock","src":"1109:54:27","statements":[{"nodeType":"YulAssignment","src":"1119:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"1144:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"1150:5:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1140:3:27"},"nodeType":"YulFunctionCall","src":"1140:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"1119:8:27"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"1084:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"1090:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"1100:8:27","type":""}],"src":"1056:107:27"},{"body":{"nodeType":"YulBlock","src":"1245:317:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1255:35:27","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"1276:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"1288:1:27","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1272:3:27"},"nodeType":"YulFunctionCall","src":"1272:18:27"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"1259:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1299:109:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1330:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1341:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1311:18:27"},"nodeType":"YulFunctionCall","src":"1311:97:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"1303:4:27","type":""}]},{"nodeType":"YulAssignment","src":"1417:51:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1448:9:27"},{"name":"toInsert","nodeType":"YulIdentifier","src":"1459:8:27"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1429:18:27"},"nodeType":"YulFunctionCall","src":"1429:39:27"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1417:8:27"}]},{"nodeType":"YulAssignment","src":"1477:30:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1490:5:27"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"1501:4:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1497:3:27"},"nodeType":"YulFunctionCall","src":"1497:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1486:3:27"},"nodeType":"YulFunctionCall","src":"1486:21:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1477:5:27"}]},{"nodeType":"YulAssignment","src":"1516:40:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1529:5:27"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1540:8:27"},{"name":"mask","nodeType":"YulIdentifier","src":"1550:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1536:3:27"},"nodeType":"YulFunctionCall","src":"1536:19:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1526:2:27"},"nodeType":"YulFunctionCall","src":"1526:30:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1516:6:27"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1206:5:27","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"1213:10:27","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"1225:8:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1238:6:27","type":""}],"src":"1169:393:27"},{"body":{"nodeType":"YulBlock","src":"1613:32:27","statements":[{"nodeType":"YulAssignment","src":"1623:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"1634:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1623:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1595:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1605:7:27","type":""}],"src":"1568:77:27"},{"body":{"nodeType":"YulBlock","src":"1683:28:27","statements":[{"nodeType":"YulAssignment","src":"1693:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"1700:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1693:3:27"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1669:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1679:3:27","type":""}],"src":"1651:60:27"},{"body":{"nodeType":"YulBlock","src":"1777:82:27","statements":[{"nodeType":"YulAssignment","src":"1787:66:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1845:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1827:17:27"},"nodeType":"YulFunctionCall","src":"1827:24:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"1818:8:27"},"nodeType":"YulFunctionCall","src":"1818:34:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1800:17:27"},"nodeType":"YulFunctionCall","src":"1800:53:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1787:9:27"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1757:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1767:9:27","type":""}],"src":"1717:142:27"},{"body":{"nodeType":"YulBlock","src":"1912:28:27","statements":[{"nodeType":"YulAssignment","src":"1922:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"1929:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1922:3:27"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1898:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1908:3:27","type":""}],"src":"1865:75:27"},{"body":{"nodeType":"YulBlock","src":"2022:193:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2032:63:27","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"2087:7:27"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2056:30:27"},"nodeType":"YulFunctionCall","src":"2056:39:27"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"2036:16:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2111:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2151:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2145:5:27"},"nodeType":"YulFunctionCall","src":"2145:11:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:27"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"2190:16:27"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"2166:23:27"},"nodeType":"YulFunctionCall","src":"2166:41:27"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"2117:27:27"},"nodeType":"YulFunctionCall","src":"2117:91:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2104:6:27"},"nodeType":"YulFunctionCall","src":"2104:105:27"},"nodeType":"YulExpressionStatement","src":"2104:105:27"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1999:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2005:6:27","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"2013:7:27","type":""}],"src":"1946:269:27"},{"body":{"nodeType":"YulBlock","src":"2270:24:27","statements":[{"nodeType":"YulAssignment","src":"2280:8:27","value":{"kind":"number","nodeType":"YulLiteral","src":"2287:1:27","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2280:3:27"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2266:3:27","type":""}],"src":"2221:73:27"},{"body":{"nodeType":"YulBlock","src":"2353:136:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2363:46:27","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"2377:30:27"},"nodeType":"YulFunctionCall","src":"2377:32:27"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"2367:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2462:4:27"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:27"},{"name":"zero_0","nodeType":"YulIdentifier","src":"2476:6:27"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2418:43:27"},"nodeType":"YulFunctionCall","src":"2418:65:27"},"nodeType":"YulExpressionStatement","src":"2418:65:27"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2339:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2345:6:27","type":""}],"src":"2300:189:27"},{"body":{"nodeType":"YulBlock","src":"2545:136:27","statements":[{"body":{"nodeType":"YulBlock","src":"2612:63:27","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2656:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2663:1:27","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"2626:29:27"},"nodeType":"YulFunctionCall","src":"2626:39:27"},"nodeType":"YulExpressionStatement","src":"2626:39:27"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2565:5:27"},{"name":"end","nodeType":"YulIdentifier","src":"2572:3:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2562:2:27"},"nodeType":"YulFunctionCall","src":"2562:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2577:26:27","statements":[{"nodeType":"YulAssignment","src":"2579:22:27","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2592:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2588:3:27"},"nodeType":"YulFunctionCall","src":"2588:13:27"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2579:5:27"}]}]},"pre":{"nodeType":"YulBlock","src":"2559:2:27","statements":[]},"src":"2555:120:27"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"2533:5:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"2540:3:27","type":""}],"src":"2495:186:27"},{"body":{"nodeType":"YulBlock","src":"2766:464:27","statements":[{"body":{"nodeType":"YulBlock","src":"2792:431:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2806:54:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2854:5:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"2822:31:27"},"nodeType":"YulFunctionCall","src":"2822:38:27"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"2810:8:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2873:63:27","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"2896:8:27"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2924:10:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"2906:17:27"},"nodeType":"YulFunctionCall","src":"2906:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2892:3:27"},"nodeType":"YulFunctionCall","src":"2892:44:27"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2877:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"3093:27:27","statements":[{"nodeType":"YulAssignment","src":"3095:23:27","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"3110:8:27"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3095:11:27"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3077:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3074:2:27"},"nodeType":"YulFunctionCall","src":"3074:18:27"},"nodeType":"YulIf","src":"3071:49:27"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3162:11:27"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"3179:8:27"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3207:3:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"3189:17:27"},"nodeType":"YulFunctionCall","src":"3189:22:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3175:3:27"},"nodeType":"YulFunctionCall","src":"3175:37:27"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"3133:28:27"},"nodeType":"YulFunctionCall","src":"3133:80:27"},"nodeType":"YulExpressionStatement","src":"3133:80:27"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2783:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"2788:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2780:2:27"},"nodeType":"YulFunctionCall","src":"2780:11:27"},"nodeType":"YulIf","src":"2777:446:27"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2742:5:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"2749:3:27","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2754:10:27","type":""}],"src":"2687:543:27"},{"body":{"nodeType":"YulBlock","src":"3299:54:27","statements":[{"nodeType":"YulAssignment","src":"3309:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"3334:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"3340:5:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3330:3:27"},"nodeType":"YulFunctionCall","src":"3330:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"3309:8:27"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"3274:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"3280:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"3290:8:27","type":""}],"src":"3236:117:27"},{"body":{"nodeType":"YulBlock","src":"3410:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3420:68:27","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:27","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"3472:5:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3465:3:27"},"nodeType":"YulFunctionCall","src":"3465:13:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3484:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3480:3:27"},"nodeType":"YulFunctionCall","src":"3480:6:27"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"3436:28:27"},"nodeType":"YulFunctionCall","src":"3436:51:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3432:3:27"},"nodeType":"YulFunctionCall","src":"3432:56:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"3424:4:27","type":""}]},{"nodeType":"YulAssignment","src":"3497:25:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3511:4:27"},{"name":"mask","nodeType":"YulIdentifier","src":"3517:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3507:3:27"},"nodeType":"YulFunctionCall","src":"3507:15:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3497:6:27"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3387:4:27","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"3393:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3403:6:27","type":""}],"src":"3359:169:27"},{"body":{"nodeType":"YulBlock","src":"3614:214:27","statements":[{"nodeType":"YulAssignment","src":"3747:37:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3774:4:27"},{"name":"len","nodeType":"YulIdentifier","src":"3780:3:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"3755:18:27"},"nodeType":"YulFunctionCall","src":"3755:29:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3747:4:27"}]},{"nodeType":"YulAssignment","src":"3793:29:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3804:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3814:1:27","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"3817:3:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3810:3:27"},"nodeType":"YulFunctionCall","src":"3810:11:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3801:2:27"},"nodeType":"YulFunctionCall","src":"3801:21:27"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3793:4:27"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3595:4:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"3601:3:27","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3609:4:27","type":""}],"src":"3533:295:27"},{"body":{"nodeType":"YulBlock","src":"3925:1303:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3936:51:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3983:3:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3950:32:27"},"nodeType":"YulFunctionCall","src":"3950:37:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3940:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"4072:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4074:16:27"},"nodeType":"YulFunctionCall","src":"4074:18:27"},"nodeType":"YulExpressionStatement","src":"4074:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4044:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4052:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4041:2:27"},"nodeType":"YulFunctionCall","src":"4041:30:27"},"nodeType":"YulIf","src":"4038:56:27"},{"nodeType":"YulVariableDeclaration","src":"4104:52:27","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4150:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4144:5:27"},"nodeType":"YulFunctionCall","src":"4144:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4118:25:27"},"nodeType":"YulFunctionCall","src":"4118:38:27"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"4108:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4249:4:27"},{"name":"oldLen","nodeType":"YulIdentifier","src":"4255:6:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"4263:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"4203:45:27"},"nodeType":"YulFunctionCall","src":"4203:67:27"},"nodeType":"YulExpressionStatement","src":"4203:67:27"},{"nodeType":"YulVariableDeclaration","src":"4280:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4297:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4284:9:27","type":""}]},{"nodeType":"YulAssignment","src":"4308:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:4:27","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4308:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4372:611:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4386:37:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4405:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4417:4:27","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4413:3:27"},"nodeType":"YulFunctionCall","src":"4413:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4401:3:27"},"nodeType":"YulFunctionCall","src":"4401:22:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4390:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4437:51:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4483:4:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4451:31:27"},"nodeType":"YulFunctionCall","src":"4451:37:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4441:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4501:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4510:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4505:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"4569:163:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4594:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4612:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4617:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:27"},"nodeType":"YulFunctionCall","src":"4608:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4602:5:27"},"nodeType":"YulFunctionCall","src":"4602:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4587:6:27"},"nodeType":"YulFunctionCall","src":"4587:42:27"},"nodeType":"YulExpressionStatement","src":"4587:42:27"},{"nodeType":"YulAssignment","src":"4646:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4660:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4668:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:27"},"nodeType":"YulFunctionCall","src":"4656:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4646:6:27"}]},{"nodeType":"YulAssignment","src":"4687:31:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4704:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4715:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:27"},"nodeType":"YulFunctionCall","src":"4700:18:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4687:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4535:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4538:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4532:2:27"},"nodeType":"YulFunctionCall","src":"4532:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4547:21:27","statements":[{"nodeType":"YulAssignment","src":"4549:17:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4558:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"4561:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4554:3:27"},"nodeType":"YulFunctionCall","src":"4554:12:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4549:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"4528:3:27","statements":[]},"src":"4524:208:27"},{"body":{"nodeType":"YulBlock","src":"4768:156:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4786:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4813:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4818:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4809:3:27"},"nodeType":"YulFunctionCall","src":"4809:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4803:5:27"},"nodeType":"YulFunctionCall","src":"4803:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4790:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4853:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4880:9:27"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4895:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4903:4:27","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4891:3:27"},"nodeType":"YulFunctionCall","src":"4891:17:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"4861:18:27"},"nodeType":"YulFunctionCall","src":"4861:48:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4846:6:27"},"nodeType":"YulFunctionCall","src":"4846:64:27"},"nodeType":"YulExpressionStatement","src":"4846:64:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4751:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"4760:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4748:2:27"},"nodeType":"YulFunctionCall","src":"4748:19:27"},"nodeType":"YulIf","src":"4745:179:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4944:4:27"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4958:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4966:1:27","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4954:3:27"},"nodeType":"YulFunctionCall","src":"4954:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"4970:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4950:3:27"},"nodeType":"YulFunctionCall","src":"4950:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4937:6:27"},"nodeType":"YulFunctionCall","src":"4937:36:27"},"nodeType":"YulExpressionStatement","src":"4937:36:27"}]},"nodeType":"YulCase","src":"4365:618:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4370:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5000:222:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5014:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5027:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5018:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"5051:67:27","statements":[{"nodeType":"YulAssignment","src":"5069:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5088:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5093:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:27"},"nodeType":"YulFunctionCall","src":"5084:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5078:5:27"},"nodeType":"YulFunctionCall","src":"5078:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5069:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5044:6:27"},"nodeType":"YulIf","src":"5041:77:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5138:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5197:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"5204:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5144:52:27"},"nodeType":"YulFunctionCall","src":"5144:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5131:6:27"},"nodeType":"YulFunctionCall","src":"5131:81:27"},"nodeType":"YulExpressionStatement","src":"5131:81:27"}]},"nodeType":"YulCase","src":"4992:230:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4353:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4342:2:27"},"nodeType":"YulFunctionCall","src":"4342:14:27"},"nodeType":"YulSwitch","src":"4335:887:27"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3914:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"3920:3:27","type":""}],"src":"3833:1395:27"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040518060400160405280600581526020017f446f6769650000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f444f47000000000000000000000000000000000000000000000000000000000081525081600090816200008f91906200032c565b508060019081620000a191906200032c565b505050600060068190555062000413565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200013457607f821691505b6020821081036200014a5762000149620000ec565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001b47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000175565b620001c0868362000175565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200020d620002076200020184620001d8565b620001e2565b620001d8565b9050919050565b6000819050919050565b6200022983620001ec565b62000241620002388262000214565b84845462000182565b825550505050565b600090565b6200025862000249565b620002658184846200021e565b505050565b5b818110156200028d57620002816000826200024e565b6001810190506200026b565b5050565b601f821115620002dc57620002a68162000150565b620002b18462000165565b81016020851015620002c1578190505b620002d9620002d08562000165565b8301826200026a565b50505b505050565b600082821c905092915050565b60006200030160001984600802620002e1565b1980831691505092915050565b60006200031c8383620002ee565b9150826002028217905092915050565b6200033782620000b2565b67ffffffffffffffff811115620003535762000352620000bd565b5b6200035f82546200011b565b6200036c82828562000291565b600060209050601f831160018114620003a457600084156200038f578287015190505b6200039b85826200030e565b8655506200040b565b601f198416620003b48662000150565b60005b82811015620003de57848901518255600182019150602085019450602081019050620003b7565b86831015620003fe5784890151620003fa601f891682620002ee565b8355505b6001600288020188555050505b505050505050565b611c1b80620004236000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063b88d4fde11610066578063b88d4fde146102ad578063c2229fea146102c9578063c87b56dd146102d3578063e985e9c51461030357610100565b806370a082311461022557806378ce90351461025557806395d89b4114610273578063a22cb4651461029157610100565b806323b872dd116100d357806323b872dd1461019f57806342842e0e146101bb5780636352211e146101d75780636e02007d1461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a919061143a565b610333565b60405161012c9190611482565b60405180910390f35b61013d610415565b60405161014a919061152d565b60405180910390f35b61016d60048036038101906101689190611585565b6104a7565b60405161017a91906115f3565b60405180910390f35b61019d6004803603810190610198919061163a565b6104c3565b005b6101b960048036038101906101b4919061167a565b6104d9565b005b6101d560048036038101906101d0919061167a565b6105db565b005b6101f160048036038101906101ec9190611585565b6105fb565b6040516101fe91906115f3565b60405180910390f35b61020f61060d565b60405161021c91906116dc565b60405180910390f35b61023f600480360381019061023a91906116f7565b610617565b60405161024c91906116dc565b60405180910390f35b61025d6106d1565b60405161026a919061152d565b60405180910390f35b61027b6106ed565b604051610288919061152d565b60405180910390f35b6102ab60048036038101906102a69190611750565b61077f565b005b6102c760048036038101906102c291906118c5565b610795565b005b6102d16107b2565b005b6102ed60048036038101906102e89190611585565b6107d5565b6040516102fa919061152d565b60405180910390f35b61031d60048036038101906103189190611948565b6107f7565b60405161032a9190611482565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103fe57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061040e575061040d8261088b565b5b9050919050565b606060008054610424906119b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610450906119b7565b801561049d5780601f106104725761010080835404028352916020019161049d565b820191906000526020600020905b81548152906001019060200180831161048057829003601f168201915b5050505050905090565b60006104b2826108f5565b506104bc8261097d565b9050919050565b6104d582826104d06109ba565b6109c2565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361054b5760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161054291906115f3565b60405180910390fd5b600061055f838361055a6109ba565b6109d4565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105d5578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016105cc939291906119e8565b60405180910390fd5b50505050565b6105f683838360405180602001604052806000815250610795565b505050565b6000610606826108f5565b9050919050565b6000600654905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361068a5760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161068191906115f3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b604051806080016040528060578152602001611b8f6057913981565b6060600180546106fc906119b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610728906119b7565b80156107755780601f1061074a57610100808354040283529160200191610775565b820191906000526020600020905b81548152906001019060200180831161075857829003601f168201915b5050505050905090565b61079161078a6109ba565b8383610bee565b5050565b6107a08484846104d9565b6107ac84848484610d5d565b50505050565b6107be33600654610f14565b60016006546107cd9190611a4e565b600681905550565b6060604051806080016040528060578152602001611b8f605791399050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008061090183610f32565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361097457826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161096b91906116dc565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6109cf8383836001610f6f565b505050565b6000806109e084610f32565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610a2257610a21818486611134565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab357610a64600085600080610f6f565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610b36576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c5f57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610c5691906115f3565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610d509190611482565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115610f0e578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02610da16109ba565b8685856040518563ffffffff1660e01b8152600401610dc39493929190611ad7565b6020604051808303816000875af1925050508015610dff57506040513d601f19601f82011682018060405250810190610dfc9190611b38565b60015b610e83573d8060008114610e2f576040519150601f19603f3d011682016040523d82523d6000602084013e610e34565b606091505b506000815103610e7b57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610e7291906115f3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610f0c57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610f0391906115f3565b60405180910390fd5b505b50505050565b610f2e8282604051806020016040528060008152506111f8565b5050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080610fa85750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156110dc576000610fb8846108f5565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561102357508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611036575061103481846107f7565b155b1561107857826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161106f91906115f3565b60405180910390fd5b81156110da57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61113f838383611214565b6111f357600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111b457806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016111ab91906116dc565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016111ea929190611b65565b60405180910390fd5b505050565b61120283836112d5565b61120f6000848484610d5d565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156112cc57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061128d575061128c84846107f7565b5b806112cb57508273ffffffffffffffffffffffffffffffffffffffff166112b38361097d565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113475760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161133e91906115f3565b60405180910390fd5b6000611355838360006109d4565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113c95760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016113c091906115f3565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611417816113e2565b811461142257600080fd5b50565b6000813590506114348161140e565b92915050565b6000602082840312156114505761144f6113d8565b5b600061145e84828501611425565b91505092915050565b60008115159050919050565b61147c81611467565b82525050565b60006020820190506114976000830184611473565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114d75780820151818401526020810190506114bc565b60008484015250505050565b6000601f19601f8301169050919050565b60006114ff8261149d565b61150981856114a8565b93506115198185602086016114b9565b611522816114e3565b840191505092915050565b6000602082019050818103600083015261154781846114f4565b905092915050565b6000819050919050565b6115628161154f565b811461156d57600080fd5b50565b60008135905061157f81611559565b92915050565b60006020828403121561159b5761159a6113d8565b5b60006115a984828501611570565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115dd826115b2565b9050919050565b6115ed816115d2565b82525050565b600060208201905061160860008301846115e4565b92915050565b611617816115d2565b811461162257600080fd5b50565b6000813590506116348161160e565b92915050565b60008060408385031215611651576116506113d8565b5b600061165f85828601611625565b925050602061167085828601611570565b9150509250929050565b600080600060608486031215611693576116926113d8565b5b60006116a186828701611625565b93505060206116b286828701611625565b92505060406116c386828701611570565b9150509250925092565b6116d68161154f565b82525050565b60006020820190506116f160008301846116cd565b92915050565b60006020828403121561170d5761170c6113d8565b5b600061171b84828501611625565b91505092915050565b61172d81611467565b811461173857600080fd5b50565b60008135905061174a81611724565b92915050565b60008060408385031215611767576117666113d8565b5b600061177585828601611625565b92505060206117868582860161173b565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117d2826114e3565b810181811067ffffffffffffffff821117156117f1576117f061179a565b5b80604052505050565b60006118046113ce565b905061181082826117c9565b919050565b600067ffffffffffffffff8211156118305761182f61179a565b5b611839826114e3565b9050602081019050919050565b82818337600083830152505050565b600061186861186384611815565b6117fa565b90508281526020810184848401111561188457611883611795565b5b61188f848285611846565b509392505050565b600082601f8301126118ac576118ab611790565b5b81356118bc848260208601611855565b91505092915050565b600080600080608085870312156118df576118de6113d8565b5b60006118ed87828801611625565b94505060206118fe87828801611625565b935050604061190f87828801611570565b925050606085013567ffffffffffffffff8111156119305761192f6113dd565b5b61193c87828801611897565b91505092959194509250565b6000806040838503121561195f5761195e6113d8565b5b600061196d85828601611625565b925050602061197e85828601611625565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119cf57607f821691505b6020821081036119e2576119e1611988565b5b50919050565b60006060820190506119fd60008301866115e4565b611a0a60208301856116cd565b611a1760408301846115e4565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a598261154f565b9150611a648361154f565b9250828201905080821115611a7c57611a7b611a1f565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000611aa982611a82565b611ab38185611a8d565b9350611ac38185602086016114b9565b611acc816114e3565b840191505092915050565b6000608082019050611aec60008301876115e4565b611af960208301866115e4565b611b0660408301856116cd565b8181036060830152611b188184611a9e565b905095945050505050565b600081519050611b328161140e565b92915050565b600060208284031215611b4e57611b4d6113d8565b5b6000611b5c84828501611b23565b91505092915050565b6000604082019050611b7a60008301856115e4565b611b8760208301846116cd565b939250505056fe697066733a2f2f62616679626569673337696f6972373673376d67356f6f6265746e636f6a636d3363336878617379643472766964346a71687934676b61686567342f3f66696c656e616d653d302d5055472e6a736f6ea26469706673582212206db58ffd4b7ac2276e273a9b1e60315f4ab00004998264e1037b88d3dc25bf6564736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x446F676965000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x444F470000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x32C JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x32C JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH1 0x6 DUP2 SWAP1 SSTORE POP PUSH3 0x413 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x134 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x14A JUMPI PUSH3 0x149 PUSH3 0xEC JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x1B4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x175 JUMP JUMPDEST PUSH3 0x1C0 DUP7 DUP4 PUSH3 0x175 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x20D PUSH3 0x207 PUSH3 0x201 DUP5 PUSH3 0x1D8 JUMP JUMPDEST PUSH3 0x1E2 JUMP JUMPDEST PUSH3 0x1D8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x229 DUP4 PUSH3 0x1EC JUMP JUMPDEST PUSH3 0x241 PUSH3 0x238 DUP3 PUSH3 0x214 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x182 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x258 PUSH3 0x249 JUMP JUMPDEST PUSH3 0x265 DUP2 DUP5 DUP5 PUSH3 0x21E JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x28D JUMPI PUSH3 0x281 PUSH1 0x0 DUP3 PUSH3 0x24E JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x26B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2DC JUMPI PUSH3 0x2A6 DUP2 PUSH3 0x150 JUMP JUMPDEST PUSH3 0x2B1 DUP5 PUSH3 0x165 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x2C1 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x2D9 PUSH3 0x2D0 DUP6 PUSH3 0x165 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x26A JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x301 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x2E1 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x31C DUP4 DUP4 PUSH3 0x2EE JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x337 DUP3 PUSH3 0xB2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x353 JUMPI PUSH3 0x352 PUSH3 0xBD JUMP JUMPDEST JUMPDEST PUSH3 0x35F DUP3 SLOAD PUSH3 0x11B JUMP JUMPDEST PUSH3 0x36C DUP3 DUP3 DUP6 PUSH3 0x291 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x3A4 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x38F JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x39B DUP6 DUP3 PUSH3 0x30E JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x40B JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x3B4 DUP7 PUSH3 0x150 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3DE JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x3B7 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x3FE JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x3FA PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x2EE JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1C1B DUP1 PUSH3 0x423 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xC2229FEA EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x303 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x78CE9035 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x291 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x6E02007D EQ PUSH2 0x207 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x183 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x143A JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x1482 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH2 0x415 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH2 0x4C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B4 SWAP2 SWAP1 PUSH2 0x167A JUMP JUMPDEST PUSH2 0x4D9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x167A JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x16F7 JUMP JUMPDEST PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25D PUSH2 0x6D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26A SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27B PUSH2 0x6ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x288 SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x1750 JUMP JUMPDEST PUSH2 0x77F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x18C5 JUMP JUMPDEST PUSH2 0x795 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D1 PUSH2 0x7B2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x7D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x318 SWAP2 SWAP1 PUSH2 0x1948 JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x1482 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3FE JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x40E JUMPI POP PUSH2 0x40D DUP3 PUSH2 0x88B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x424 SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x450 SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x49D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x472 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x49D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x480 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B2 DUP3 PUSH2 0x8F5 JUMP JUMPDEST POP PUSH2 0x4BC DUP3 PUSH2 0x97D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4D5 DUP3 DUP3 PUSH2 0x4D0 PUSH2 0x9BA JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x54B JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x542 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x55F DUP4 DUP4 PUSH2 0x55A PUSH2 0x9BA JUMP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D5 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x19E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x5F6 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x795 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x606 DUP3 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x57 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B8F PUSH1 0x57 SWAP2 CODECOPY DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6FC SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x728 SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x775 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x74A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x775 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x758 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x791 PUSH2 0x78A PUSH2 0x9BA JUMP JUMPDEST DUP4 DUP4 PUSH2 0xBEE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7A0 DUP5 DUP5 DUP5 PUSH2 0x4D9 JUMP JUMPDEST PUSH2 0x7AC DUP5 DUP5 DUP5 DUP5 PUSH2 0xD5D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x7BE CALLER PUSH1 0x6 SLOAD PUSH2 0xF14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 SLOAD PUSH2 0x7CD SWAP2 SWAP1 PUSH2 0x1A4E JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x57 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B8F PUSH1 0x57 SWAP2 CODECOPY SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x901 DUP4 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x974 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96B SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9CF DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xF6F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9E0 DUP5 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA22 JUMPI PUSH2 0xA21 DUP2 DUP5 DUP7 PUSH2 0x1134 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAB3 JUMPI PUSH2 0xA64 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB36 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC5F JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC56 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xD50 SWAP2 SWAP1 PUSH2 0x1482 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0xF0E JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0xDA1 PUSH2 0x9BA JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xDFF JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDFC SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xE83 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE2F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE34 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0xE7B JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE72 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0xF0C JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF03 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xF2E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11F8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0xFA8 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x10DC JUMPI PUSH1 0x0 PUSH2 0xFB8 DUP5 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1023 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1036 JUMPI POP PUSH2 0x1034 DUP2 DUP5 PUSH2 0x7F7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1078 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x106F SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x10DA JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x113F DUP4 DUP4 DUP4 PUSH2 0x1214 JUMP JUMPDEST PUSH2 0x11F3 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11B4 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11AB SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11EA SWAP3 SWAP2 SWAP1 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1202 DUP4 DUP4 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0x120F PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0xD5D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x12CC JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x128D JUMPI POP PUSH2 0x128C DUP5 DUP5 PUSH2 0x7F7 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x12CB JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12B3 DUP4 PUSH2 0x97D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1347 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x133E SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1355 DUP4 DUP4 PUSH1 0x0 PUSH2 0x9D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13C9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C0 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1417 DUP2 PUSH2 0x13E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1434 DUP2 PUSH2 0x140E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1450 JUMPI PUSH2 0x144F PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x145E DUP5 DUP3 DUP6 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x147C DUP2 PUSH2 0x1467 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1497 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1473 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14D7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14BC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14FF DUP3 PUSH2 0x149D JUMP JUMPDEST PUSH2 0x1509 DUP2 DUP6 PUSH2 0x14A8 JUMP JUMPDEST SWAP4 POP PUSH2 0x1519 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14B9 JUMP JUMPDEST PUSH2 0x1522 DUP2 PUSH2 0x14E3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1547 DUP2 DUP5 PUSH2 0x14F4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1562 DUP2 PUSH2 0x154F JUMP JUMPDEST DUP2 EQ PUSH2 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x157F DUP2 PUSH2 0x1559 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x159B JUMPI PUSH2 0x159A PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15A9 DUP5 DUP3 DUP6 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DD DUP3 PUSH2 0x15B2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15ED DUP2 PUSH2 0x15D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1608 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x15E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1617 DUP2 PUSH2 0x15D2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1634 DUP2 PUSH2 0x160E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1651 JUMPI PUSH2 0x1650 PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x165F DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1670 DUP6 DUP3 DUP7 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1693 JUMPI PUSH2 0x1692 PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16A1 DUP7 DUP3 DUP8 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x16B2 DUP7 DUP3 DUP8 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x16C3 DUP7 DUP3 DUP8 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x16D6 DUP2 PUSH2 0x154F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16F1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x16CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x170D JUMPI PUSH2 0x170C PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x171B DUP5 DUP3 DUP6 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x172D DUP2 PUSH2 0x1467 JUMP JUMPDEST DUP2 EQ PUSH2 0x1738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x174A DUP2 PUSH2 0x1724 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1767 JUMPI PUSH2 0x1766 PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1775 DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1786 DUP6 DUP3 DUP7 ADD PUSH2 0x173B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x17D2 DUP3 PUSH2 0x14E3 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x17F1 JUMPI PUSH2 0x17F0 PUSH2 0x179A JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1804 PUSH2 0x13CE JUMP JUMPDEST SWAP1 POP PUSH2 0x1810 DUP3 DUP3 PUSH2 0x17C9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1830 JUMPI PUSH2 0x182F PUSH2 0x179A JUMP JUMPDEST JUMPDEST PUSH2 0x1839 DUP3 PUSH2 0x14E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1868 PUSH2 0x1863 DUP5 PUSH2 0x1815 JUMP JUMPDEST PUSH2 0x17FA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1884 JUMPI PUSH2 0x1883 PUSH2 0x1795 JUMP JUMPDEST JUMPDEST PUSH2 0x188F DUP5 DUP3 DUP6 PUSH2 0x1846 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18AC JUMPI PUSH2 0x18AB PUSH2 0x1790 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18BC DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1855 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x18DF JUMPI PUSH2 0x18DE PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18ED DUP8 DUP3 DUP9 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x18FE DUP8 DUP3 DUP9 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x190F DUP8 DUP3 DUP9 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1930 JUMPI PUSH2 0x192F PUSH2 0x13DD JUMP JUMPDEST JUMPDEST PUSH2 0x193C DUP8 DUP3 DUP9 ADD PUSH2 0x1897 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x195F JUMPI PUSH2 0x195E PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x196D DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x197E DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x19CF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x19E2 JUMPI PUSH2 0x19E1 PUSH2 0x1988 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x19FD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1A0A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x1A17 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x15E4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1A59 DUP3 PUSH2 0x154F JUMP JUMPDEST SWAP2 POP PUSH2 0x1A64 DUP4 PUSH2 0x154F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A7C JUMPI PUSH2 0x1A7B PUSH2 0x1A1F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA9 DUP3 PUSH2 0x1A82 JUMP JUMPDEST PUSH2 0x1AB3 DUP2 DUP6 PUSH2 0x1A8D JUMP JUMPDEST SWAP4 POP PUSH2 0x1AC3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14B9 JUMP JUMPDEST PUSH2 0x1ACC DUP2 PUSH2 0x14E3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1AEC PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1AF9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1B06 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16CD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B18 DUP2 DUP5 PUSH2 0x1A9E JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1B32 DUP2 PUSH2 0x140E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4E JUMPI PUSH2 0x1B4D PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B5C DUP5 DUP3 DUP6 ADD PUSH2 0x1B23 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1B7A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1B87 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH10 0x7066733A2F2F62616679 PUSH3 0x656967 CALLER CALLDATACOPY PUSH10 0x6F6972373673376D6735 PUSH16 0x6F6265746E636F6A636D336333687861 PUSH20 0x79643472766964346A71687934676B6168656734 0x2F EXTCODEHASH PUSH7 0x696C656E616D65 RETURNDATASIZE ADDRESS 0x2D POP SSTORE SELFBALANCE 0x2E PUSH11 0x736F6EA264697066735822 SLT KECCAK256 PUSH14 0xB58FFD4B7AC2276E273A9B1E6031 PUSH0 0x4A 0xB0 STOP DIV SWAP10 DUP3 PUSH5 0xE1037B88D3 0xDC 0x25 0xBF PUSH6 0x64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"125:660:23:-:0;;;339:74;;;;;;;;;;1381:113:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1455:5;1447;:13;;;;;;:::i;:::-;;1480:7;1470;:17;;;;;;:::i;:::-;;1381:113;;404:1:23::1;387:14;:18;;;;125:660:::0;;7:99:27;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;125:660:23:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@TOKEN_URI_4479":{"entryPoint":1745,"id":4479,"parameterSlots":0,"returnSlots":0},"@_approve_2505":{"entryPoint":2498,"id":2505,"parameterSlots":3,"returnSlots":0},"@_approve_2571":{"entryPoint":3951,"id":2571,"parameterSlots":4,"returnSlots":0},"@_checkAuthorized_2153":{"entryPoint":4404,"id":2153,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_2701":{"entryPoint":3421,"id":2701,"parameterSlots":4,"returnSlots":0},"@_getApproved_2080":{"entryPoint":2429,"id":2080,"parameterSlots":1,"returnSlots":1},"@_isAuthorized_2116":{"entryPoint":4628,"id":2116,"parameterSlots":3,"returnSlots":1},"@_mint_2309":{"entryPoint":4821,"id":2309,"parameterSlots":2,"returnSlots":0},"@_msgSender_3003":{"entryPoint":2490,"id":3003,"parameterSlots":0,"returnSlots":1},"@_ownerOf_2067":{"entryPoint":3890,"id":2067,"parameterSlots":1,"returnSlots":1},"@_requireOwned_2637":{"entryPoint":2293,"id":2637,"parameterSlots":1,"returnSlots":1},"@_safeMint_2324":{"entryPoint":3860,"id":2324,"parameterSlots":2,"returnSlots":0},"@_safeMint_2350":{"entryPoint":4600,"id":2350,"parameterSlots":3,"returnSlots":0},"@_setApprovalForAll_2608":{"entryPoint":3054,"id":2608,"parameterSlots":3,"returnSlots":0},"@_update_2259":{"entryPoint":2516,"id":2259,"parameterSlots":3,"returnSlots":1},"@approve_1914":{"entryPoint":1219,"id":1914,"parameterSlots":2,"returnSlots":0},"@balanceOf_1822":{"entryPoint":1559,"id":1822,"parameterSlots":1,"returnSlots":1},"@getApproved_1931":{"entryPoint":1191,"id":1931,"parameterSlots":1,"returnSlots":1},"@getTokenCounter_4528":{"entryPoint":1549,"id":4528,"parameterSlots":0,"returnSlots":1},"@isApprovedForAll_1964":{"entryPoint":2039,"id":1964,"parameterSlots":2,"returnSlots":1},"@mintNft_4509":{"entryPoint":1970,"id":4509,"parameterSlots":0,"returnSlots":0},"@name_1844":{"entryPoint":1045,"id":1844,"parameterSlots":0,"returnSlots":1},"@ownerOf_1835":{"entryPoint":1531,"id":1835,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_2028":{"entryPoint":1499,"id":2028,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2054":{"entryPoint":1941,"id":2054,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1947":{"entryPoint":1919,"id":1947,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1794":{"entryPoint":819,"id":1794,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3299":{"entryPoint":2187,"id":3299,"parameterSlots":1,"returnSlots":1},"@symbol_1853":{"entryPoint":1773,"id":1853,"parameterSlots":0,"returnSlots":1},"@tokenURI_4520":{"entryPoint":2005,"id":4520,"parameterSlots":1,"returnSlots":1},"@transferFrom_2010":{"entryPoint":1241,"id":2010,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6229,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5669,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":5947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5157,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":6947,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6295,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5488,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5879,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6472,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5754,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6341,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":5968,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5690,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5178,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":6968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5509,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":5604,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5235,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":6814,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5364,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":5837,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":5619,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":6871,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":7013,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":6632,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5250,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5421,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":5852,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6138,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5070,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6165,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":6786,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5277,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":6797,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5288,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6734,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5586,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5223,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5090,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":5554,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5455,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6214,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5305,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6583,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6089,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":6687,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6536,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6042,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6032,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6037,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5085,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5080,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5347,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_address":{"entryPoint":5646,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":5924,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5134,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5465,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13954:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"378:105:27","statements":[{"nodeType":"YulAssignment","src":"388:89:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:27","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:27"},"nodeType":"YulFunctionCall","src":"399:78:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:27"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:27","type":""}],"src":"334:149:27"},{"body":{"nodeType":"YulBlock","src":"531:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:27"},"nodeType":"YulFunctionCall","src":"589:12:27"},"nodeType":"YulExpressionStatement","src":"589:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:27"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:27"},"nodeType":"YulFunctionCall","src":"561:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:27"},"nodeType":"YulFunctionCall","src":"551:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:27"},"nodeType":"YulFunctionCall","src":"544:42:27"},"nodeType":"YulIf","src":"541:62:27"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:27","type":""}],"src":"489:120:27"},{"body":{"nodeType":"YulBlock","src":"666:86:27","statements":[{"nodeType":"YulAssignment","src":"676:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:27"},"nodeType":"YulFunctionCall","src":"685:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:27"},"nodeType":"YulFunctionCall","src":"714:32:27"},"nodeType":"YulExpressionStatement","src":"714:32:27"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:27","type":""}],"src":"615:137:27"},{"body":{"nodeType":"YulBlock","src":"823:262:27","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:27"},"nodeType":"YulFunctionCall","src":"871:79:27"},"nodeType":"YulExpressionStatement","src":"871:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:27"},"nodeType":"YulFunctionCall","src":"840:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:27"},"nodeType":"YulFunctionCall","src":"836:32:27"},"nodeType":"YulIf","src":"833:119:27"},{"nodeType":"YulBlock","src":"962:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:27"},"nodeType":"YulFunctionCall","src":"1036:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:27"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:27"},"nodeType":"YulFunctionCall","src":"1016:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:27","type":""}],"src":"758:327:27"},{"body":{"nodeType":"YulBlock","src":"1133:48:27","statements":[{"nodeType":"YulAssignment","src":"1143:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:27"},"nodeType":"YulFunctionCall","src":"1161:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:27"},"nodeType":"YulFunctionCall","src":"1154:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:27","type":""}],"src":"1091:90:27"},{"body":{"nodeType":"YulBlock","src":"1246:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:27"},"nodeType":"YulFunctionCall","src":"1268:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:27"},"nodeType":"YulFunctionCall","src":"1256:34:27"},"nodeType":"YulExpressionStatement","src":"1256:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:27","type":""}],"src":"1187:109:27"},{"body":{"nodeType":"YulBlock","src":"1394:118:27","statements":[{"nodeType":"YulAssignment","src":"1404:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:27"},"nodeType":"YulFunctionCall","src":"1412:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:27"},"nodeType":"YulFunctionCall","src":"1487:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:27"},"nodeType":"YulFunctionCall","src":"1440:65:27"},"nodeType":"YulExpressionStatement","src":"1440:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:27","type":""}],"src":"1302:210:27"},{"body":{"nodeType":"YulBlock","src":"1577:40:27","statements":[{"nodeType":"YulAssignment","src":"1588:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:27"},"nodeType":"YulFunctionCall","src":"1598:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:27","type":""}],"src":"1518:99:27"},{"body":{"nodeType":"YulBlock","src":"1719:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:27"},"nodeType":"YulFunctionCall","src":"1729:19:27"},"nodeType":"YulExpressionStatement","src":"1729:19:27"},{"nodeType":"YulAssignment","src":"1757:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:27"},"nodeType":"YulFunctionCall","src":"1772:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:27","type":""}],"src":"1623:169:27"},{"body":{"nodeType":"YulBlock","src":"1860:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:27"},"nodeType":"YulFunctionCall","src":"1960:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:27"},"nodeType":"YulFunctionCall","src":"1979:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:27"},"nodeType":"YulFunctionCall","src":"1973:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:27"},"nodeType":"YulFunctionCall","src":"1953:39:27"},"nodeType":"YulExpressionStatement","src":"1953:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:27"},"nodeType":"YulFunctionCall","src":"1897:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:27","statements":[{"nodeType":"YulAssignment","src":"1913:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:27"},"nodeType":"YulFunctionCall","src":"1918:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:27","statements":[]},"src":"1889:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:27"},"nodeType":"YulFunctionCall","src":"2018:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:27"},"nodeType":"YulFunctionCall","src":"2011:27:27"},"nodeType":"YulExpressionStatement","src":"2011:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:27","type":""}],"src":"1798:246:27"},{"body":{"nodeType":"YulBlock","src":"2098:54:27","statements":[{"nodeType":"YulAssignment","src":"2108:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:27"},"nodeType":"YulFunctionCall","src":"2122:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:27"},"nodeType":"YulFunctionCall","src":"2138:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:27"},"nodeType":"YulFunctionCall","src":"2118:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:27","type":""}],"src":"2050:102:27"},{"body":{"nodeType":"YulBlock","src":"2250:285:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:27"},"nodeType":"YulFunctionCall","src":"2274:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:27"},"nodeType":"YulFunctionCall","src":"2329:71:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:27"},"nodeType":"YulFunctionCall","src":"2444:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:27"},"nodeType":"YulFunctionCall","src":"2409:65:27"},"nodeType":"YulExpressionStatement","src":"2409:65:27"},{"nodeType":"YulAssignment","src":"2483:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:27"},"nodeType":"YulFunctionCall","src":"2499:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:27"},"nodeType":"YulFunctionCall","src":"2490:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:27","type":""}],"src":"2158:377:27"},{"body":{"nodeType":"YulBlock","src":"2659:195:27","statements":[{"nodeType":"YulAssignment","src":"2669:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:27"},"nodeType":"YulFunctionCall","src":"2677:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:27"},"nodeType":"YulFunctionCall","src":"2712:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:27"},"nodeType":"YulFunctionCall","src":"2731:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:27"},"nodeType":"YulFunctionCall","src":"2705:47:27"},"nodeType":"YulExpressionStatement","src":"2705:47:27"},{"nodeType":"YulAssignment","src":"2761:86:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:27"},"nodeType":"YulFunctionCall","src":"2769:78:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:27","type":""}],"src":"2541:313:27"},{"body":{"nodeType":"YulBlock","src":"2905:32:27","statements":[{"nodeType":"YulAssignment","src":"2915:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:27","type":""}],"src":"2860:77:27"},{"body":{"nodeType":"YulBlock","src":"2986:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:27"},"nodeType":"YulFunctionCall","src":"3045:12:27"},"nodeType":"YulExpressionStatement","src":"3045:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:27"},"nodeType":"YulFunctionCall","src":"3016:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:27"},"nodeType":"YulFunctionCall","src":"3006:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:27"},"nodeType":"YulFunctionCall","src":"2999:43:27"},"nodeType":"YulIf","src":"2996:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:27","type":""}],"src":"2943:122:27"},{"body":{"nodeType":"YulBlock","src":"3123:87:27","statements":[{"nodeType":"YulAssignment","src":"3133:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:27"},"nodeType":"YulFunctionCall","src":"3142:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:27"},"nodeType":"YulFunctionCall","src":"3171:33:27"},"nodeType":"YulExpressionStatement","src":"3171:33:27"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:27","type":""}],"src":"3071:139:27"},{"body":{"nodeType":"YulBlock","src":"3282:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:27"},"nodeType":"YulFunctionCall","src":"3330:79:27"},"nodeType":"YulExpressionStatement","src":"3330:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:27"},"nodeType":"YulFunctionCall","src":"3299:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:27"},"nodeType":"YulFunctionCall","src":"3295:32:27"},"nodeType":"YulIf","src":"3292:119:27"},{"nodeType":"YulBlock","src":"3421:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:27","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:27"},"nodeType":"YulFunctionCall","src":"3496:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:27"},"nodeType":"YulFunctionCall","src":"3475:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:27","type":""}],"src":"3216:329:27"},{"body":{"nodeType":"YulBlock","src":"3596:81:27","statements":[{"nodeType":"YulAssignment","src":"3606:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:27"},"nodeType":"YulFunctionCall","src":"3617:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:27","type":""}],"src":"3551:126:27"},{"body":{"nodeType":"YulBlock","src":"3728:51:27","statements":[{"nodeType":"YulAssignment","src":"3738:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:27"},"nodeType":"YulFunctionCall","src":"3749:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:27","type":""}],"src":"3683:96:27"},{"body":{"nodeType":"YulBlock","src":"3850:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:27"},"nodeType":"YulFunctionCall","src":"3872:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:27"},"nodeType":"YulFunctionCall","src":"3860:37:27"},"nodeType":"YulExpressionStatement","src":"3860:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:27","type":""}],"src":"3785:118:27"},{"body":{"nodeType":"YulBlock","src":"4007:124:27","statements":[{"nodeType":"YulAssignment","src":"4017:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:27"},"nodeType":"YulFunctionCall","src":"4025:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:27"},"nodeType":"YulFunctionCall","src":"4106:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:27"},"nodeType":"YulFunctionCall","src":"4053:71:27"},"nodeType":"YulExpressionStatement","src":"4053:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:27","type":""}],"src":"3909:222:27"},{"body":{"nodeType":"YulBlock","src":"4180:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:27"},"nodeType":"YulFunctionCall","src":"4239:12:27"},"nodeType":"YulExpressionStatement","src":"4239:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:27"},"nodeType":"YulFunctionCall","src":"4210:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:27"},"nodeType":"YulFunctionCall","src":"4200:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:27"},"nodeType":"YulFunctionCall","src":"4193:43:27"},"nodeType":"YulIf","src":"4190:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:27","type":""}],"src":"4137:122:27"},{"body":{"nodeType":"YulBlock","src":"4317:87:27","statements":[{"nodeType":"YulAssignment","src":"4327:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:27"},"nodeType":"YulFunctionCall","src":"4336:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:27"},"nodeType":"YulFunctionCall","src":"4365:33:27"},"nodeType":"YulExpressionStatement","src":"4365:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:27","type":""}],"src":"4265:139:27"},{"body":{"nodeType":"YulBlock","src":"4493:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:27"},"nodeType":"YulFunctionCall","src":"4541:79:27"},"nodeType":"YulExpressionStatement","src":"4541:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:27"},"nodeType":"YulFunctionCall","src":"4510:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:27"},"nodeType":"YulFunctionCall","src":"4506:32:27"},"nodeType":"YulIf","src":"4503:119:27"},{"nodeType":"YulBlock","src":"4632:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:27"},"nodeType":"YulFunctionCall","src":"4707:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:27"},"nodeType":"YulFunctionCall","src":"4686:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:27"}]}]},{"nodeType":"YulBlock","src":"4759:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:27"},"nodeType":"YulFunctionCall","src":"4835:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:27"},"nodeType":"YulFunctionCall","src":"4814:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:27","type":""}],"src":"4410:474:27"},{"body":{"nodeType":"YulBlock","src":"4990:519:27","statements":[{"body":{"nodeType":"YulBlock","src":"5036:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5038:77:27"},"nodeType":"YulFunctionCall","src":"5038:79:27"},"nodeType":"YulExpressionStatement","src":"5038:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5011:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5007:3:27"},"nodeType":"YulFunctionCall","src":"5007:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5003:3:27"},"nodeType":"YulFunctionCall","src":"5003:32:27"},"nodeType":"YulIf","src":"5000:119:27"},{"nodeType":"YulBlock","src":"5129:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5144:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5158:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5148:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5173:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:27"},"nodeType":"YulFunctionCall","src":"5204:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5228:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5183:20:27"},"nodeType":"YulFunctionCall","src":"5183:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5173:6:27"}]}]},{"nodeType":"YulBlock","src":"5256:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5271:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5285:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5275:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5301:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5332:3:27"},"nodeType":"YulFunctionCall","src":"5332:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5356:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5311:20:27"},"nodeType":"YulFunctionCall","src":"5311:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5301:6:27"}]}]},{"nodeType":"YulBlock","src":"5384:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5399:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5413:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5403:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5429:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5464:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5460:3:27"},"nodeType":"YulFunctionCall","src":"5460:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5484:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5439:20:27"},"nodeType":"YulFunctionCall","src":"5439:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5429:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4944:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4955:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4967:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4983:6:27","type":""}],"src":"4890:619:27"},{"body":{"nodeType":"YulBlock","src":"5580:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5597:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5620:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5602:17:27"},"nodeType":"YulFunctionCall","src":"5602:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5590:6:27"},"nodeType":"YulFunctionCall","src":"5590:37:27"},"nodeType":"YulExpressionStatement","src":"5590:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5568:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5575:3:27","type":""}],"src":"5515:118:27"},{"body":{"nodeType":"YulBlock","src":"5737:124:27","statements":[{"nodeType":"YulAssignment","src":"5747:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5759:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5770:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5755:3:27"},"nodeType":"YulFunctionCall","src":"5755:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5747:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5827:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5840:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"5851:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5836:3:27"},"nodeType":"YulFunctionCall","src":"5836:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5783:43:27"},"nodeType":"YulFunctionCall","src":"5783:71:27"},"nodeType":"YulExpressionStatement","src":"5783:71:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5709:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5721:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5732:4:27","type":""}],"src":"5639:222:27"},{"body":{"nodeType":"YulBlock","src":"5933:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"5979:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5981:77:27"},"nodeType":"YulFunctionCall","src":"5981:79:27"},"nodeType":"YulExpressionStatement","src":"5981:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5954:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"5963:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5950:3:27"},"nodeType":"YulFunctionCall","src":"5950:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"5975:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5946:3:27"},"nodeType":"YulFunctionCall","src":"5946:32:27"},"nodeType":"YulIf","src":"5943:119:27"},{"nodeType":"YulBlock","src":"6072:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6087:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6101:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6091:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6116:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6151:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6162:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6147:3:27"},"nodeType":"YulFunctionCall","src":"6147:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6171:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6126:20:27"},"nodeType":"YulFunctionCall","src":"6126:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6116:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5903:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5914:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5926:6:27","type":""}],"src":"5867:329:27"},{"body":{"nodeType":"YulBlock","src":"6242:76:27","statements":[{"body":{"nodeType":"YulBlock","src":"6296:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6305:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6308:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6298:6:27"},"nodeType":"YulFunctionCall","src":"6298:12:27"},"nodeType":"YulExpressionStatement","src":"6298:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6265:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6287:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6272:14:27"},"nodeType":"YulFunctionCall","src":"6272:21:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6262:2:27"},"nodeType":"YulFunctionCall","src":"6262:32:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6255:6:27"},"nodeType":"YulFunctionCall","src":"6255:40:27"},"nodeType":"YulIf","src":"6252:60:27"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6235:5:27","type":""}],"src":"6202:116:27"},{"body":{"nodeType":"YulBlock","src":"6373:84:27","statements":[{"nodeType":"YulAssignment","src":"6383:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6405:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6392:12:27"},"nodeType":"YulFunctionCall","src":"6392:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6383:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6445:5:27"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6421:23:27"},"nodeType":"YulFunctionCall","src":"6421:30:27"},"nodeType":"YulExpressionStatement","src":"6421:30:27"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6351:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"6359:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6367:5:27","type":""}],"src":"6324:133:27"},{"body":{"nodeType":"YulBlock","src":"6543:388:27","statements":[{"body":{"nodeType":"YulBlock","src":"6589:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6591:77:27"},"nodeType":"YulFunctionCall","src":"6591:79:27"},"nodeType":"YulExpressionStatement","src":"6591:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6564:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6573:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6560:3:27"},"nodeType":"YulFunctionCall","src":"6560:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6585:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6556:3:27"},"nodeType":"YulFunctionCall","src":"6556:32:27"},"nodeType":"YulIf","src":"6553:119:27"},{"nodeType":"YulBlock","src":"6682:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6697:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6711:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6701:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6726:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6761:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6772:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6757:3:27"},"nodeType":"YulFunctionCall","src":"6757:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6781:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6736:20:27"},"nodeType":"YulFunctionCall","src":"6736:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6726:6:27"}]}]},{"nodeType":"YulBlock","src":"6809:115:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6824:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6838:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6828:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6854:60:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6886:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6897:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6882:3:27"},"nodeType":"YulFunctionCall","src":"6882:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6906:7:27"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6864:17:27"},"nodeType":"YulFunctionCall","src":"6864:50:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6854:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6505:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6516:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6528:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6536:6:27","type":""}],"src":"6463:468:27"},{"body":{"nodeType":"YulBlock","src":"7026:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7043:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7046:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7036:6:27"},"nodeType":"YulFunctionCall","src":"7036:12:27"},"nodeType":"YulExpressionStatement","src":"7036:12:27"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6937:117:27"},{"body":{"nodeType":"YulBlock","src":"7149:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7166:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7169:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7159:6:27"},"nodeType":"YulFunctionCall","src":"7159:12:27"},"nodeType":"YulExpressionStatement","src":"7159:12:27"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7060:117:27"},{"body":{"nodeType":"YulBlock","src":"7211:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7228:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7231:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7221:6:27"},"nodeType":"YulFunctionCall","src":"7221:88:27"},"nodeType":"YulExpressionStatement","src":"7221:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7325:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7328:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7318:6:27"},"nodeType":"YulFunctionCall","src":"7318:15:27"},"nodeType":"YulExpressionStatement","src":"7318:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7349:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7352:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7342:6:27"},"nodeType":"YulFunctionCall","src":"7342:15:27"},"nodeType":"YulExpressionStatement","src":"7342:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7183:180:27"},{"body":{"nodeType":"YulBlock","src":"7412:238:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7422:58:27","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7444:6:27"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7474:4:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7452:21:27"},"nodeType":"YulFunctionCall","src":"7452:27:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7440:3:27"},"nodeType":"YulFunctionCall","src":"7440:40:27"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7426:10:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"7591:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7593:16:27"},"nodeType":"YulFunctionCall","src":"7593:18:27"},"nodeType":"YulExpressionStatement","src":"7593:18:27"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7534:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"7546:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7531:2:27"},"nodeType":"YulFunctionCall","src":"7531:34:27"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7570:10:27"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7582:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7567:2:27"},"nodeType":"YulFunctionCall","src":"7567:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7528:2:27"},"nodeType":"YulFunctionCall","src":"7528:62:27"},"nodeType":"YulIf","src":"7525:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7629:2:27","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7633:10:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7622:6:27"},"nodeType":"YulFunctionCall","src":"7622:22:27"},"nodeType":"YulExpressionStatement","src":"7622:22:27"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7398:6:27","type":""},{"name":"size","nodeType":"YulTypedName","src":"7406:4:27","type":""}],"src":"7369:281:27"},{"body":{"nodeType":"YulBlock","src":"7697:88:27","statements":[{"nodeType":"YulAssignment","src":"7707:30:27","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7717:18:27"},"nodeType":"YulFunctionCall","src":"7717:20:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7707:6:27"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7766:6:27"},{"name":"size","nodeType":"YulIdentifier","src":"7774:4:27"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7746:19:27"},"nodeType":"YulFunctionCall","src":"7746:33:27"},"nodeType":"YulExpressionStatement","src":"7746:33:27"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7681:4:27","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7690:6:27","type":""}],"src":"7656:129:27"},{"body":{"nodeType":"YulBlock","src":"7857:241:27","statements":[{"body":{"nodeType":"YulBlock","src":"7962:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7964:16:27"},"nodeType":"YulFunctionCall","src":"7964:18:27"},"nodeType":"YulExpressionStatement","src":"7964:18:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7934:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7942:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7931:2:27"},"nodeType":"YulFunctionCall","src":"7931:30:27"},"nodeType":"YulIf","src":"7928:56:27"},{"nodeType":"YulAssignment","src":"7994:37:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8024:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8002:21:27"},"nodeType":"YulFunctionCall","src":"8002:29:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7994:4:27"}]},{"nodeType":"YulAssignment","src":"8068:23:27","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8080:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"8086:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8076:3:27"},"nodeType":"YulFunctionCall","src":"8076:15:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8068:4:27"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7841:6:27","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7852:4:27","type":""}],"src":"7791:307:27"},{"body":{"nodeType":"YulBlock","src":"8168:82:27","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8191:3:27"},{"name":"src","nodeType":"YulIdentifier","src":"8196:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"8201:6:27"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8178:12:27"},"nodeType":"YulFunctionCall","src":"8178:30:27"},"nodeType":"YulExpressionStatement","src":"8178:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8228:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"8233:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8224:3:27"},"nodeType":"YulFunctionCall","src":"8224:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"8242:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8217:6:27"},"nodeType":"YulFunctionCall","src":"8217:27:27"},"nodeType":"YulExpressionStatement","src":"8217:27:27"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8150:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8155:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"8160:6:27","type":""}],"src":"8104:146:27"},{"body":{"nodeType":"YulBlock","src":"8339:340:27","statements":[{"nodeType":"YulAssignment","src":"8349:74:27","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8415:6:27"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8374:40:27"},"nodeType":"YulFunctionCall","src":"8374:48:27"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8358:15:27"},"nodeType":"YulFunctionCall","src":"8358:65:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8349:5:27"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8439:5:27"},{"name":"length","nodeType":"YulIdentifier","src":"8446:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8432:6:27"},"nodeType":"YulFunctionCall","src":"8432:21:27"},"nodeType":"YulExpressionStatement","src":"8432:21:27"},{"nodeType":"YulVariableDeclaration","src":"8462:27:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8477:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"8484:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:27"},"nodeType":"YulFunctionCall","src":"8473:16:27"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8466:3:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"8527:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8529:77:27"},"nodeType":"YulFunctionCall","src":"8529:79:27"},"nodeType":"YulExpressionStatement","src":"8529:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8508:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"8513:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:27"},"nodeType":"YulFunctionCall","src":"8504:16:27"},{"name":"end","nodeType":"YulIdentifier","src":"8522:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8501:2:27"},"nodeType":"YulFunctionCall","src":"8501:25:27"},"nodeType":"YulIf","src":"8498:112:27"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8656:3:27"},{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:27"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8619:36:27"},"nodeType":"YulFunctionCall","src":"8619:54:27"},"nodeType":"YulExpressionStatement","src":"8619:54:27"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8312:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"8317:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"8325:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8333:5:27","type":""}],"src":"8256:423:27"},{"body":{"nodeType":"YulBlock","src":"8759:277:27","statements":[{"body":{"nodeType":"YulBlock","src":"8808:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8810:77:27"},"nodeType":"YulFunctionCall","src":"8810:79:27"},"nodeType":"YulExpressionStatement","src":"8810:79:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8787:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"8795:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8783:3:27"},"nodeType":"YulFunctionCall","src":"8783:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"8802:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8779:3:27"},"nodeType":"YulFunctionCall","src":"8779:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8772:6:27"},"nodeType":"YulFunctionCall","src":"8772:35:27"},"nodeType":"YulIf","src":"8769:122:27"},{"nodeType":"YulVariableDeclaration","src":"8900:34:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8927:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8914:12:27"},"nodeType":"YulFunctionCall","src":"8914:20:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8904:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8943:87:27","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9003:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"9011:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8999:3:27"},"nodeType":"YulFunctionCall","src":"8999:17:27"},{"name":"length","nodeType":"YulIdentifier","src":"9018:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"9026:3:27"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8952:46:27"},"nodeType":"YulFunctionCall","src":"8952:78:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8943:5:27"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8737:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"8745:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8753:5:27","type":""}],"src":"8698:338:27"},{"body":{"nodeType":"YulBlock","src":"9168:817:27","statements":[{"body":{"nodeType":"YulBlock","src":"9215:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9217:77:27"},"nodeType":"YulFunctionCall","src":"9217:79:27"},"nodeType":"YulExpressionStatement","src":"9217:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9189:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9185:3:27"},"nodeType":"YulFunctionCall","src":"9185:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"9210:3:27","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9181:3:27"},"nodeType":"YulFunctionCall","src":"9181:33:27"},"nodeType":"YulIf","src":"9178:120:27"},{"nodeType":"YulBlock","src":"9308:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9323:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9337:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9327:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9352:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9387:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9398:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:27"},"nodeType":"YulFunctionCall","src":"9383:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9407:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9362:20:27"},"nodeType":"YulFunctionCall","src":"9362:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9352:6:27"}]}]},{"nodeType":"YulBlock","src":"9435:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9450:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9454:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9480:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9515:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9526:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9511:3:27"},"nodeType":"YulFunctionCall","src":"9511:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9535:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9490:20:27"},"nodeType":"YulFunctionCall","src":"9490:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9480:6:27"}]}]},{"nodeType":"YulBlock","src":"9563:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9578:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9592:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9582:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9608:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9643:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9654:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9639:3:27"},"nodeType":"YulFunctionCall","src":"9639:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9663:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9618:20:27"},"nodeType":"YulFunctionCall","src":"9618:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9608:6:27"}]}]},{"nodeType":"YulBlock","src":"9691:287:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9706:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9737:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"9748:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9733:3:27"},"nodeType":"YulFunctionCall","src":"9733:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9720:12:27"},"nodeType":"YulFunctionCall","src":"9720:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9710:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"9799:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9801:77:27"},"nodeType":"YulFunctionCall","src":"9801:79:27"},"nodeType":"YulExpressionStatement","src":"9801:79:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9771:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"9779:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9768:2:27"},"nodeType":"YulFunctionCall","src":"9768:30:27"},"nodeType":"YulIf","src":"9765:117:27"},{"nodeType":"YulAssignment","src":"9896:72:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9951:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:27"},"nodeType":"YulFunctionCall","src":"9936:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9960:7:27"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9906:29:27"},"nodeType":"YulFunctionCall","src":"9906:62:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9896:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9114:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9125:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9137:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9145:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9153:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9161:6:27","type":""}],"src":"9042:943:27"},{"body":{"nodeType":"YulBlock","src":"10074:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"10120:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10122:77:27"},"nodeType":"YulFunctionCall","src":"10122:79:27"},"nodeType":"YulExpressionStatement","src":"10122:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10095:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"10104:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10091:3:27"},"nodeType":"YulFunctionCall","src":"10091:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"10116:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10087:3:27"},"nodeType":"YulFunctionCall","src":"10087:32:27"},"nodeType":"YulIf","src":"10084:119:27"},{"nodeType":"YulBlock","src":"10213:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10228:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10242:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10232:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10257:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10292:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10303:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:27"},"nodeType":"YulFunctionCall","src":"10288:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10312:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10267:20:27"},"nodeType":"YulFunctionCall","src":"10267:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10257:6:27"}]}]},{"nodeType":"YulBlock","src":"10340:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10355:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10369:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10359:6:27","type":""}]},{"nodeType":"YulAssignment","src":"10385:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"10431:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:27"},"nodeType":"YulFunctionCall","src":"10416:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10440:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10395:20:27"},"nodeType":"YulFunctionCall","src":"10395:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10385:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10036:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10047:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10059:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10067:6:27","type":""}],"src":"9991:474:27"},{"body":{"nodeType":"YulBlock","src":"10499:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10516:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10519:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10509:6:27"},"nodeType":"YulFunctionCall","src":"10509:88:27"},"nodeType":"YulExpressionStatement","src":"10509:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10613:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10616:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:27"},"nodeType":"YulFunctionCall","src":"10606:15:27"},"nodeType":"YulExpressionStatement","src":"10606:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10630:6:27"},"nodeType":"YulFunctionCall","src":"10630:15:27"},"nodeType":"YulExpressionStatement","src":"10630:15:27"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10471:180:27"},{"body":{"nodeType":"YulBlock","src":"10708:269:27","statements":[{"nodeType":"YulAssignment","src":"10718:22:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10732:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"10738:1:27","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10728:3:27"},"nodeType":"YulFunctionCall","src":"10728:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10718:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"10749:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10779:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"10785:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10775:3:27"},"nodeType":"YulFunctionCall","src":"10775:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10753:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:51:27","statements":[{"nodeType":"YulAssignment","src":"10840:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10854:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"10862:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10850:3:27"},"nodeType":"YulFunctionCall","src":"10850:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10840:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10806:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10799:6:27"},"nodeType":"YulFunctionCall","src":"10799:26:27"},"nodeType":"YulIf","src":"10796:81:27"},{"body":{"nodeType":"YulBlock","src":"10929:42:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10943:16:27"},"nodeType":"YulFunctionCall","src":"10943:18:27"},"nodeType":"YulExpressionStatement","src":"10943:18:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10893:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10916:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"10924:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10913:2:27"},"nodeType":"YulFunctionCall","src":"10913:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10890:2:27"},"nodeType":"YulFunctionCall","src":"10890:38:27"},"nodeType":"YulIf","src":"10887:84:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10692:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10701:6:27","type":""}],"src":"10657:320:27"},{"body":{"nodeType":"YulBlock","src":"11137:288:27","statements":[{"nodeType":"YulAssignment","src":"11147:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11159:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11170:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11155:3:27"},"nodeType":"YulFunctionCall","src":"11155:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11147:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11227:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11240:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11251:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11236:3:27"},"nodeType":"YulFunctionCall","src":"11236:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11183:43:27"},"nodeType":"YulFunctionCall","src":"11183:71:27"},"nodeType":"YulExpressionStatement","src":"11183:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11308:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11321:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11332:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11317:3:27"},"nodeType":"YulFunctionCall","src":"11317:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11264:43:27"},"nodeType":"YulFunctionCall","src":"11264:72:27"},"nodeType":"YulExpressionStatement","src":"11264:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11390:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11403:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11414:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11399:3:27"},"nodeType":"YulFunctionCall","src":"11399:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11346:43:27"},"nodeType":"YulFunctionCall","src":"11346:72:27"},"nodeType":"YulExpressionStatement","src":"11346:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11093:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11105:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11113:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11121:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11132:4:27","type":""}],"src":"10983:442:27"},{"body":{"nodeType":"YulBlock","src":"11459:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11476:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11479:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11469:6:27"},"nodeType":"YulFunctionCall","src":"11469:88:27"},"nodeType":"YulExpressionStatement","src":"11469:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11573:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11576:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11566:6:27"},"nodeType":"YulFunctionCall","src":"11566:15:27"},"nodeType":"YulExpressionStatement","src":"11566:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11597:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11600:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11590:6:27"},"nodeType":"YulFunctionCall","src":"11590:15:27"},"nodeType":"YulExpressionStatement","src":"11590:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"11431:180:27"},{"body":{"nodeType":"YulBlock","src":"11661:147:27","statements":[{"nodeType":"YulAssignment","src":"11671:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11694:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11676:17:27"},"nodeType":"YulFunctionCall","src":"11676:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11671:1:27"}]},{"nodeType":"YulAssignment","src":"11705:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11728:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11710:17:27"},"nodeType":"YulFunctionCall","src":"11710:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11705:1:27"}]},{"nodeType":"YulAssignment","src":"11739:16:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11750:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"11753:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11746:3:27"},"nodeType":"YulFunctionCall","src":"11746:9:27"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11739:3:27"}]},{"body":{"nodeType":"YulBlock","src":"11779:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11781:16:27"},"nodeType":"YulFunctionCall","src":"11781:18:27"},"nodeType":"YulExpressionStatement","src":"11781:18:27"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11771:1:27"},{"name":"sum","nodeType":"YulIdentifier","src":"11774:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11768:2:27"},"nodeType":"YulFunctionCall","src":"11768:10:27"},"nodeType":"YulIf","src":"11765:36:27"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11648:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"11651:1:27","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11657:3:27","type":""}],"src":"11617:191:27"},{"body":{"nodeType":"YulBlock","src":"11872:40:27","statements":[{"nodeType":"YulAssignment","src":"11883:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11899:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11893:5:27"},"nodeType":"YulFunctionCall","src":"11893:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"11883:6:27"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11855:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"11865:6:27","type":""}],"src":"11814:98:27"},{"body":{"nodeType":"YulBlock","src":"12013:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12030:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"12035:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12023:6:27"},"nodeType":"YulFunctionCall","src":"12023:19:27"},"nodeType":"YulExpressionStatement","src":"12023:19:27"},{"nodeType":"YulAssignment","src":"12051:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12070:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"12075:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12066:3:27"},"nodeType":"YulFunctionCall","src":"12066:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"12051:11:27"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11985:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"11990:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"12001:11:27","type":""}],"src":"11918:168:27"},{"body":{"nodeType":"YulBlock","src":"12182:283:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12192:52:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12238:5:27"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"12206:31:27"},"nodeType":"YulFunctionCall","src":"12206:38:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12196:6:27","type":""}]},{"nodeType":"YulAssignment","src":"12253:77:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12318:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"12323:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12260:57:27"},"nodeType":"YulFunctionCall","src":"12260:70:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12253:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12378:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"12385:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12374:3:27"},"nodeType":"YulFunctionCall","src":"12374:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"12392:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"12397:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"12339:34:27"},"nodeType":"YulFunctionCall","src":"12339:65:27"},"nodeType":"YulExpressionStatement","src":"12339:65:27"},{"nodeType":"YulAssignment","src":"12413:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12424:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12451:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12429:21:27"},"nodeType":"YulFunctionCall","src":"12429:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12420:3:27"},"nodeType":"YulFunctionCall","src":"12420:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12413:3:27"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12163:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12170:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12178:3:27","type":""}],"src":"12092:373:27"},{"body":{"nodeType":"YulBlock","src":"12671:440:27","statements":[{"nodeType":"YulAssignment","src":"12681:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12693:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12704:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12689:3:27"},"nodeType":"YulFunctionCall","src":"12689:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12681:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12762:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12775:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12786:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12771:3:27"},"nodeType":"YulFunctionCall","src":"12771:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12718:43:27"},"nodeType":"YulFunctionCall","src":"12718:71:27"},"nodeType":"YulExpressionStatement","src":"12718:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12843:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12856:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12867:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12852:3:27"},"nodeType":"YulFunctionCall","src":"12852:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"12799:43:27"},"nodeType":"YulFunctionCall","src":"12799:72:27"},"nodeType":"YulExpressionStatement","src":"12799:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12925:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12938:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12949:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12934:3:27"},"nodeType":"YulFunctionCall","src":"12934:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12881:43:27"},"nodeType":"YulFunctionCall","src":"12881:72:27"},"nodeType":"YulExpressionStatement","src":"12881:72:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12974:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12985:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12970:3:27"},"nodeType":"YulFunctionCall","src":"12970:18:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12994:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"13000:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12990:3:27"},"nodeType":"YulFunctionCall","src":"12990:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12963:6:27"},"nodeType":"YulFunctionCall","src":"12963:48:27"},"nodeType":"YulExpressionStatement","src":"12963:48:27"},{"nodeType":"YulAssignment","src":"13020:84:27","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"13090:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"13099:4:27"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13028:61:27"},"nodeType":"YulFunctionCall","src":"13028:76:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13020:4:27"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12619:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12631:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12639:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12647:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12655:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12666:4:27","type":""}],"src":"12471:640:27"},{"body":{"nodeType":"YulBlock","src":"13179:79:27","statements":[{"nodeType":"YulAssignment","src":"13189:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13204:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13198:5:27"},"nodeType":"YulFunctionCall","src":"13198:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"13189:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13246:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"13220:25:27"},"nodeType":"YulFunctionCall","src":"13220:32:27"},"nodeType":"YulExpressionStatement","src":"13220:32:27"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13157:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"13165:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"13173:5:27","type":""}],"src":"13117:141:27"},{"body":{"nodeType":"YulBlock","src":"13340:273:27","statements":[{"body":{"nodeType":"YulBlock","src":"13386:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13388:77:27"},"nodeType":"YulFunctionCall","src":"13388:79:27"},"nodeType":"YulExpressionStatement","src":"13388:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13361:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"13370:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13357:3:27"},"nodeType":"YulFunctionCall","src":"13357:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"13382:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13353:3:27"},"nodeType":"YulFunctionCall","src":"13353:32:27"},"nodeType":"YulIf","src":"13350:119:27"},{"nodeType":"YulBlock","src":"13479:127:27","statements":[{"nodeType":"YulVariableDeclaration","src":"13494:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"13508:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"13498:6:27","type":""}]},{"nodeType":"YulAssignment","src":"13523:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13568:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"13579:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13564:3:27"},"nodeType":"YulFunctionCall","src":"13564:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"13588:7:27"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"13533:30:27"},"nodeType":"YulFunctionCall","src":"13533:63:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"13523:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13310:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13321:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13333:6:27","type":""}],"src":"13264:349:27"},{"body":{"nodeType":"YulBlock","src":"13745:206:27","statements":[{"nodeType":"YulAssignment","src":"13755:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13767:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13778:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13763:3:27"},"nodeType":"YulFunctionCall","src":"13763:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13755:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13835:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13848:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13859:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13844:3:27"},"nodeType":"YulFunctionCall","src":"13844:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"13791:43:27"},"nodeType":"YulFunctionCall","src":"13791:71:27"},"nodeType":"YulExpressionStatement","src":"13791:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13916:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13929:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"13940:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13925:3:27"},"nodeType":"YulFunctionCall","src":"13925:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13872:43:27"},"nodeType":"YulFunctionCall","src":"13872:72:27"},"nodeType":"YulExpressionStatement","src":"13872:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13709:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13721:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13729:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13740:4:27","type":""}],"src":"13619:332:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063b88d4fde11610066578063b88d4fde146102ad578063c2229fea146102c9578063c87b56dd146102d3578063e985e9c51461030357610100565b806370a082311461022557806378ce90351461025557806395d89b4114610273578063a22cb4651461029157610100565b806323b872dd116100d357806323b872dd1461019f57806342842e0e146101bb5780636352211e146101d75780636e02007d1461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a919061143a565b610333565b60405161012c9190611482565b60405180910390f35b61013d610415565b60405161014a919061152d565b60405180910390f35b61016d60048036038101906101689190611585565b6104a7565b60405161017a91906115f3565b60405180910390f35b61019d6004803603810190610198919061163a565b6104c3565b005b6101b960048036038101906101b4919061167a565b6104d9565b005b6101d560048036038101906101d0919061167a565b6105db565b005b6101f160048036038101906101ec9190611585565b6105fb565b6040516101fe91906115f3565b60405180910390f35b61020f61060d565b60405161021c91906116dc565b60405180910390f35b61023f600480360381019061023a91906116f7565b610617565b60405161024c91906116dc565b60405180910390f35b61025d6106d1565b60405161026a919061152d565b60405180910390f35b61027b6106ed565b604051610288919061152d565b60405180910390f35b6102ab60048036038101906102a69190611750565b61077f565b005b6102c760048036038101906102c291906118c5565b610795565b005b6102d16107b2565b005b6102ed60048036038101906102e89190611585565b6107d5565b6040516102fa919061152d565b60405180910390f35b61031d60048036038101906103189190611948565b6107f7565b60405161032a9190611482565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103fe57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061040e575061040d8261088b565b5b9050919050565b606060008054610424906119b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610450906119b7565b801561049d5780601f106104725761010080835404028352916020019161049d565b820191906000526020600020905b81548152906001019060200180831161048057829003601f168201915b5050505050905090565b60006104b2826108f5565b506104bc8261097d565b9050919050565b6104d582826104d06109ba565b6109c2565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361054b5760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161054291906115f3565b60405180910390fd5b600061055f838361055a6109ba565b6109d4565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105d5578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016105cc939291906119e8565b60405180910390fd5b50505050565b6105f683838360405180602001604052806000815250610795565b505050565b6000610606826108f5565b9050919050565b6000600654905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361068a5760006040517f89c62b6400000000000000000000000000000000000000000000000000000000815260040161068191906115f3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b604051806080016040528060578152602001611b8f6057913981565b6060600180546106fc906119b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610728906119b7565b80156107755780601f1061074a57610100808354040283529160200191610775565b820191906000526020600020905b81548152906001019060200180831161075857829003601f168201915b5050505050905090565b61079161078a6109ba565b8383610bee565b5050565b6107a08484846104d9565b6107ac84848484610d5d565b50505050565b6107be33600654610f14565b60016006546107cd9190611a4e565b600681905550565b6060604051806080016040528060578152602001611b8f605791399050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008061090183610f32565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361097457826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161096b91906116dc565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6109cf8383836001610f6f565b505050565b6000806109e084610f32565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610a2257610a21818486611134565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab357610a64600085600080610f6f565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610b36576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c5f57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610c5691906115f3565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610d509190611482565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115610f0e578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02610da16109ba565b8685856040518563ffffffff1660e01b8152600401610dc39493929190611ad7565b6020604051808303816000875af1925050508015610dff57506040513d601f19601f82011682018060405250810190610dfc9190611b38565b60015b610e83573d8060008114610e2f576040519150601f19603f3d011682016040523d82523d6000602084013e610e34565b606091505b506000815103610e7b57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610e7291906115f3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610f0c57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610f0391906115f3565b60405180910390fd5b505b50505050565b610f2e8282604051806020016040528060008152506111f8565b5050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080610fa85750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b156110dc576000610fb8846108f5565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561102357508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611036575061103481846107f7565b155b1561107857826040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161106f91906115f3565b60405180910390fd5b81156110da57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b61113f838383611214565b6111f357600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111b457806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016111ab91906116dc565b60405180910390fd5b81816040517f177e802f0000000000000000000000000000000000000000000000000000000081526004016111ea929190611b65565b60405180910390fd5b505050565b61120283836112d5565b61120f6000848484610d5d565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156112cc57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061128d575061128c84846107f7565b5b806112cb57508273ffffffffffffffffffffffffffffffffffffffff166112b38361097d565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113475760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161133e91906115f3565b60405180910390fd5b6000611355838360006109d4565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113c95760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016113c091906115f3565b60405180910390fd5b505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611417816113e2565b811461142257600080fd5b50565b6000813590506114348161140e565b92915050565b6000602082840312156114505761144f6113d8565b5b600061145e84828501611425565b91505092915050565b60008115159050919050565b61147c81611467565b82525050565b60006020820190506114976000830184611473565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114d75780820151818401526020810190506114bc565b60008484015250505050565b6000601f19601f8301169050919050565b60006114ff8261149d565b61150981856114a8565b93506115198185602086016114b9565b611522816114e3565b840191505092915050565b6000602082019050818103600083015261154781846114f4565b905092915050565b6000819050919050565b6115628161154f565b811461156d57600080fd5b50565b60008135905061157f81611559565b92915050565b60006020828403121561159b5761159a6113d8565b5b60006115a984828501611570565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115dd826115b2565b9050919050565b6115ed816115d2565b82525050565b600060208201905061160860008301846115e4565b92915050565b611617816115d2565b811461162257600080fd5b50565b6000813590506116348161160e565b92915050565b60008060408385031215611651576116506113d8565b5b600061165f85828601611625565b925050602061167085828601611570565b9150509250929050565b600080600060608486031215611693576116926113d8565b5b60006116a186828701611625565b93505060206116b286828701611625565b92505060406116c386828701611570565b9150509250925092565b6116d68161154f565b82525050565b60006020820190506116f160008301846116cd565b92915050565b60006020828403121561170d5761170c6113d8565b5b600061171b84828501611625565b91505092915050565b61172d81611467565b811461173857600080fd5b50565b60008135905061174a81611724565b92915050565b60008060408385031215611767576117666113d8565b5b600061177585828601611625565b92505060206117868582860161173b565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117d2826114e3565b810181811067ffffffffffffffff821117156117f1576117f061179a565b5b80604052505050565b60006118046113ce565b905061181082826117c9565b919050565b600067ffffffffffffffff8211156118305761182f61179a565b5b611839826114e3565b9050602081019050919050565b82818337600083830152505050565b600061186861186384611815565b6117fa565b90508281526020810184848401111561188457611883611795565b5b61188f848285611846565b509392505050565b600082601f8301126118ac576118ab611790565b5b81356118bc848260208601611855565b91505092915050565b600080600080608085870312156118df576118de6113d8565b5b60006118ed87828801611625565b94505060206118fe87828801611625565b935050604061190f87828801611570565b925050606085013567ffffffffffffffff8111156119305761192f6113dd565b5b61193c87828801611897565b91505092959194509250565b6000806040838503121561195f5761195e6113d8565b5b600061196d85828601611625565b925050602061197e85828601611625565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119cf57607f821691505b6020821081036119e2576119e1611988565b5b50919050565b60006060820190506119fd60008301866115e4565b611a0a60208301856116cd565b611a1760408301846115e4565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a598261154f565b9150611a648361154f565b9250828201905080821115611a7c57611a7b611a1f565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000611aa982611a82565b611ab38185611a8d565b9350611ac38185602086016114b9565b611acc816114e3565b840191505092915050565b6000608082019050611aec60008301876115e4565b611af960208301866115e4565b611b0660408301856116cd565b8181036060830152611b188184611a9e565b905095945050505050565b600081519050611b328161140e565b92915050565b600060208284031215611b4e57611b4d6113d8565b5b6000611b5c84828501611b23565b91505092915050565b6000604082019050611b7a60008301856115e4565b611b8760208301846116cd565b939250505056fe697066733a2f2f62616679626569673337696f6972373673376d67356f6f6265746e636f6a636d3363336878617379643472766964346a71687934676b61686567342f3f66696c656e616d653d302d5055472e6a736f6ea26469706673582212206db58ffd4b7ac2276e273a9b1e60315f4ab00004998264e1037b88d3dc25bf6564736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0xC2229FEA EQ PUSH2 0x2C9 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2D3 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x303 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x78CE9035 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x291 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19F JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x6E02007D EQ PUSH2 0x207 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x183 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x143A JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP2 SWAP1 PUSH2 0x1482 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH2 0x415 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x4A7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x163A JUMP JUMPDEST PUSH2 0x4C3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B4 SWAP2 SWAP1 PUSH2 0x167A JUMP JUMPDEST PUSH2 0x4D9 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D0 SWAP2 SWAP1 PUSH2 0x167A JUMP JUMPDEST PUSH2 0x5DB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FE SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x16F7 JUMP JUMPDEST PUSH2 0x617 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25D PUSH2 0x6D1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26A SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x27B PUSH2 0x6ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x288 SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A6 SWAP2 SWAP1 PUSH2 0x1750 JUMP JUMPDEST PUSH2 0x77F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x18C5 JUMP JUMPDEST PUSH2 0x795 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D1 PUSH2 0x7B2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2ED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x7D5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2FA SWAP2 SWAP1 PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x318 SWAP2 SWAP1 PUSH2 0x1948 JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x32A SWAP2 SWAP1 PUSH2 0x1482 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x3FE JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x40E JUMPI POP PUSH2 0x40D DUP3 PUSH2 0x88B JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x424 SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x450 SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x49D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x472 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x49D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x480 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B2 DUP3 PUSH2 0x8F5 JUMP JUMPDEST POP PUSH2 0x4BC DUP3 PUSH2 0x97D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4D5 DUP3 DUP3 PUSH2 0x4D0 PUSH2 0x9BA JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x54B JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x542 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x55F DUP4 DUP4 PUSH2 0x55A PUSH2 0x9BA JUMP JUMPDEST PUSH2 0x9D4 JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5D5 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5CC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x19E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x5F6 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x795 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x606 DUP3 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x57 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B8F PUSH1 0x57 SWAP2 CODECOPY DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6FC SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x728 SWAP1 PUSH2 0x19B7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x775 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x74A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x775 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x758 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x791 PUSH2 0x78A PUSH2 0x9BA JUMP JUMPDEST DUP4 DUP4 PUSH2 0xBEE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7A0 DUP5 DUP5 DUP5 PUSH2 0x4D9 JUMP JUMPDEST PUSH2 0x7AC DUP5 DUP5 DUP5 DUP5 PUSH2 0xD5D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x7BE CALLER PUSH1 0x6 SLOAD PUSH2 0xF14 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x6 SLOAD PUSH2 0x7CD SWAP2 SWAP1 PUSH2 0x1A4E JUMP JUMPDEST PUSH1 0x6 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x57 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1B8F PUSH1 0x57 SWAP2 CODECOPY SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x901 DUP4 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x974 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x96B SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9CF DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xF6F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9E0 DUP5 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA22 JUMPI PUSH2 0xA21 DUP2 DUP5 DUP7 PUSH2 0x1134 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xAB3 JUMPI PUSH2 0xA64 PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0xF6F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB36 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC5F JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC56 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xD50 SWAP2 SWAP1 PUSH2 0x1482 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0xF0E JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0xDA1 PUSH2 0x9BA JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1AD7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xDFF JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDFC SWAP2 SWAP1 PUSH2 0x1B38 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xE83 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE2F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE34 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0xE7B JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE72 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0xF0C JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF03 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xF2E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x11F8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0xFA8 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x10DC JUMPI PUSH1 0x0 PUSH2 0xFB8 DUP5 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1023 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1036 JUMPI POP PUSH2 0x1034 DUP2 DUP5 PUSH2 0x7F7 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1078 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x106F SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x10DA JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x113F DUP4 DUP4 DUP4 PUSH2 0x1214 JUMP JUMPDEST PUSH2 0x11F3 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x11B4 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11AB SWAP2 SWAP1 PUSH2 0x16DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11EA SWAP3 SWAP2 SWAP1 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1202 DUP4 DUP4 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0x120F PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0xD5D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x12CC JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x128D JUMPI POP PUSH2 0x128C DUP5 DUP5 PUSH2 0x7F7 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x12CB JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x12B3 DUP4 PUSH2 0x97D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1347 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x133E SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1355 DUP4 DUP4 PUSH1 0x0 PUSH2 0x9D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13C9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C0 SWAP2 SWAP1 PUSH2 0x15F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1417 DUP2 PUSH2 0x13E2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1434 DUP2 PUSH2 0x140E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1450 JUMPI PUSH2 0x144F PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x145E DUP5 DUP3 DUP6 ADD PUSH2 0x1425 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x147C DUP2 PUSH2 0x1467 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1497 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1473 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14D7 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x14BC JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14FF DUP3 PUSH2 0x149D JUMP JUMPDEST PUSH2 0x1509 DUP2 DUP6 PUSH2 0x14A8 JUMP JUMPDEST SWAP4 POP PUSH2 0x1519 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14B9 JUMP JUMPDEST PUSH2 0x1522 DUP2 PUSH2 0x14E3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1547 DUP2 DUP5 PUSH2 0x14F4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1562 DUP2 PUSH2 0x154F JUMP JUMPDEST DUP2 EQ PUSH2 0x156D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x157F DUP2 PUSH2 0x1559 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x159B JUMPI PUSH2 0x159A PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15A9 DUP5 DUP3 DUP6 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15DD DUP3 PUSH2 0x15B2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x15ED DUP2 PUSH2 0x15D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1608 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x15E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1617 DUP2 PUSH2 0x15D2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1634 DUP2 PUSH2 0x160E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1651 JUMPI PUSH2 0x1650 PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x165F DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1670 DUP6 DUP3 DUP7 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1693 JUMPI PUSH2 0x1692 PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16A1 DUP7 DUP3 DUP8 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x16B2 DUP7 DUP3 DUP8 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x16C3 DUP7 DUP3 DUP8 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x16D6 DUP2 PUSH2 0x154F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16F1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x16CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x170D JUMPI PUSH2 0x170C PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x171B DUP5 DUP3 DUP6 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x172D DUP2 PUSH2 0x1467 JUMP JUMPDEST DUP2 EQ PUSH2 0x1738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x174A DUP2 PUSH2 0x1724 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1767 JUMPI PUSH2 0x1766 PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1775 DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1786 DUP6 DUP3 DUP7 ADD PUSH2 0x173B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x17D2 DUP3 PUSH2 0x14E3 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x17F1 JUMPI PUSH2 0x17F0 PUSH2 0x179A JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1804 PUSH2 0x13CE JUMP JUMPDEST SWAP1 POP PUSH2 0x1810 DUP3 DUP3 PUSH2 0x17C9 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1830 JUMPI PUSH2 0x182F PUSH2 0x179A JUMP JUMPDEST JUMPDEST PUSH2 0x1839 DUP3 PUSH2 0x14E3 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1868 PUSH2 0x1863 DUP5 PUSH2 0x1815 JUMP JUMPDEST PUSH2 0x17FA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1884 JUMPI PUSH2 0x1883 PUSH2 0x1795 JUMP JUMPDEST JUMPDEST PUSH2 0x188F DUP5 DUP3 DUP6 PUSH2 0x1846 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18AC JUMPI PUSH2 0x18AB PUSH2 0x1790 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18BC DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1855 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x18DF JUMPI PUSH2 0x18DE PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18ED DUP8 DUP3 DUP9 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x18FE DUP8 DUP3 DUP9 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x190F DUP8 DUP3 DUP9 ADD PUSH2 0x1570 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1930 JUMPI PUSH2 0x192F PUSH2 0x13DD JUMP JUMPDEST JUMPDEST PUSH2 0x193C DUP8 DUP3 DUP9 ADD PUSH2 0x1897 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x195F JUMPI PUSH2 0x195E PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x196D DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x197E DUP6 DUP3 DUP7 ADD PUSH2 0x1625 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x19CF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x19E2 JUMPI PUSH2 0x19E1 PUSH2 0x1988 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x19FD PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1A0A PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x16CD JUMP JUMPDEST PUSH2 0x1A17 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x15E4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1A59 DUP3 PUSH2 0x154F JUMP JUMPDEST SWAP2 POP PUSH2 0x1A64 DUP4 PUSH2 0x154F JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A7C JUMPI PUSH2 0x1A7B PUSH2 0x1A1F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AA9 DUP3 PUSH2 0x1A82 JUMP JUMPDEST PUSH2 0x1AB3 DUP2 DUP6 PUSH2 0x1A8D JUMP JUMPDEST SWAP4 POP PUSH2 0x1AC3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x14B9 JUMP JUMPDEST PUSH2 0x1ACC DUP2 PUSH2 0x14E3 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x1AEC PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1AF9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1B06 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x16CD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x1B18 DUP2 DUP5 PUSH2 0x1A9E JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1B32 DUP2 PUSH2 0x140E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B4E JUMPI PUSH2 0x1B4D PUSH2 0x13D8 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B5C DUP5 DUP3 DUP6 ADD PUSH2 0x1B23 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1B7A PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x15E4 JUMP JUMPDEST PUSH2 0x1B87 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x16CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID PUSH10 0x7066733A2F2F62616679 PUSH3 0x656967 CALLER CALLDATACOPY PUSH10 0x6F6972373673376D6735 PUSH16 0x6F6265746E636F6A636D336333687861 PUSH20 0x79643472766964346A71687934676B6168656734 0x2F EXTCODEHASH PUSH7 0x696C656E616D65 RETURNDATASIZE ADDRESS 0x2D POP SSTORE SELFBALANCE 0x2E PUSH11 0x736F6EA264697066735822 SLT KECCAK256 PUSH14 0xB58FFD4B7AC2276E273A9B1E6031 PUSH0 0x4A 0xB0 STOP DIV SWAP10 DUP3 PUSH5 0xE1037B88D3 0xDC 0x25 0xBF PUSH6 0x64736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"125:660:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1561:300:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3497:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3323:113;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4143:578;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4787:132;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2185:118;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;685:97:23;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1920:208:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;160:133:23;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2518:93:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3718:144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4985:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;421:128:23;;;:::i;:::-;;557:120;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3928:153:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1561:300;1663:4;1713:25;1698:40;;;:11;:40;;;;:104;;;;1769:33;1754:48;;;:11;:48;;;;1698:104;:156;;;;1818:36;1842:11;1818:23;:36::i;:::-;1698:156;1679:175;;1561:300;;;:::o;2365:89::-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;;3623:21;3636:7;3623:12;:21::i;:::-;3616:28;;3497:154;;;:::o;3323:113::-;3394:35;3403:2;3407:7;3416:12;:10;:12::i;:::-;3394:8;:35::i;:::-;3323:113;;:::o;4143:578::-;4251:1;4237:16;;:2;:16;;;4233:87;;4306:1;4276:33;;;;;;;;;;;:::i;:::-;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;4583:12;:10;:12::i;:::-;4562:7;:34::i;:::-;4538:58;;4627:4;4610:21;;:13;:21;;;4606:109;;4675:4;4681:7;4690:13;4654:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4606:109;4223:498;4143:578;;;:::o;4787:132::-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;:::-;4787:132;;;:::o;2185:118::-;2248:7;2274:22;2288:7;2274:13;:22::i;:::-;2267:29;;2185:118;;;:::o;685:97:23:-;733:7;760:14;;753:21;;685:97;:::o;1920:208:12:-;1983:7;2023:1;2006:19;;:5;:19;;;2002:87;;2075:1;2048:30;;;;;;;;;;;:::i;:::-;;;;;;;;2002:87;2105:9;:16;2115:5;2105:16;;;;;;;;;;;;;;;;2098:23;;1920:208;;;:::o;160:133:23:-;;;;;;;;;;;;;;;;;;;:::o;2518:93:12:-;2565:13;2597:7;2590:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2518:93;:::o;3718:144::-;3803:52;3822:12;:10;:12::i;:::-;3836:8;3846;3803:18;:52::i;:::-;3718:144;;:::o;4985:208::-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;:::-;4985:208;;;;:::o;421:128:23:-;458:37;468:10;480:14;;458:9;:37::i;:::-;540:1;523:14;;:18;;;;:::i;:::-;506:14;:35;;;;421:128::o;557:120::-;626:13;660:9;;;;;;;;;;;;;;;;;653:16;;557:120;;;:::o;3928:153:12:-;4016:4;4039:18;:25;4058:5;4039:25;;;;;;;;;;;;;;;:35;4065:8;4039:35;;;;;;;;;;;;;;;;;;;;;;;;;4032:42;;3928:153;;;;:::o;762:146:19:-;838:4;876:25;861:40;;;:11;:40;;;;854:47;;762:146;;;:::o;16138:241:12:-;16201:7;16220:13;16236:17;16245:7;16236:8;:17::i;:::-;16220:33;;16284:1;16267:19;;:5;:19;;;16263:88;;16332:7;16309:31;;;;;;;;;;;:::i;:::-;;;;;;;;16263:88;16367:5;16360:12;;;16138:241;;;:::o;5938:127::-;6008:7;6034:15;:24;6050:7;6034:24;;;;;;;;;;;;;;;;;;;;;6027:31;;5938:127;;;:::o;656:96:17:-;709:7;735:10;728:17;;656:96;:::o;14418:120:12:-;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;:::-;14418:120;;;:::o;8838:795::-;8924:7;8943:12;8958:17;8967:7;8958:8;:17::i;:::-;8943:32;;9051:1;9035:18;;:4;:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;9031:86;9177:1;9161:18;;:4;:18;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;9387:1;9368:9;:15;9378:4;9368:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;9157:256;9441:1;9427:16;;:2;:16;;;9423:107;;9504:1;9487:9;:13;9497:2;9487:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9423:107;9559:2;9540:7;:16;9548:7;9540:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9596:7;9592:2;9577:27;;9586:4;9577:27;;;;;;;;;;;;9622:4;9615:11;;;8838:795;;;;;:::o;15591:312::-;15718:1;15698:22;;:8;:22;;;15694:91;;15765:8;15743:31;;;;;;;;;;;:::i;:::-;;;;;;;;15694:91;15832:8;15794:18;:25;15813:5;15794:25;;;;;;;;;;;;;;;:35;15820:8;15794:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15877:8;15855:41;;15870:5;15855:41;;;15887:8;15855:41;;;;;;:::i;:::-;;;;;;;;15591:312;;;:::o;16918:782::-;17051:1;17034:2;:14;;;:18;17030:664;;;17088:2;17072:36;;;17109:12;:10;:12::i;:::-;17123:4;17129:7;17138:4;17072:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17398:1;17381:6;:13;:18;17377:293;;17452:2;17430:25;;;;;;;;;;;:::i;:::-;;;;;;;;17377:293;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;17200:41;;;17190:51;;;:6;:51;;;;17186:130;;17294:2;17272:25;;;;;;;;;;;:::i;:::-;;;;;;;;17186:130;17144:186;17030:664;16918:782;;;;:::o;10633:100::-;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;:::-;10633:100;;:::o;5707:115::-;5773:7;5799;:16;5807:7;5799:16;;;;;;;;;;;;;;;;;;;;;5792:23;;5707:115;;;:::o;14720:662::-;14880:9;:31;;;;14909:1;14893:18;;:4;:18;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;;15109:1;15093:18;;:4;:18;;;;:35;;;;;15124:4;15115:13;;:5;:13;;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15211:4;15189:27;;;;;;;;;;;:::i;:::-;;;;;;;;15089:142;15249:9;15245:81;;;15303:7;15299:2;15283:28;;15292:5;15283:28;;;;;;;;;;;;15245:81;14913:423;14876:460;15373:2;15346:15;:24;15362:7;15346:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14720:662;;;;:::o;7082:368::-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;7269:1;7252:19;;:5;:19;;;7248:186;;7321:7;7298:31;;;;;;;;;;;:::i;:::-;;;;;;;;7248:186;7402:7;7411;7375:44;;;;;;;;;;;;:::i;:::-;;;;;;;;7189:255;7082:368;;;:::o;10954:182::-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;:::-;10954:182;;;:::o;6376:272::-;6479:4;6533:1;6514:21;;:7;:21;;;;:127;;;;;6561:7;6552:16;;:5;:16;;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:52;:88;;;;6633:7;6608:32;;:21;6621:7;6608:12;:21::i;:::-;:32;;;6552:88;6514:127;6495:146;;6376:272;;;;;:::o;9955:327::-;10036:1;10022:16;;:2;:16;;;10018:87;;10091:1;10061:33;;;;;;;;;;;:::i;:::-;;;;;;;;10018:87;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;;10209:1;10184:27;;:13;:27;;;10180:96;;10262:1;10234:31;;;;;;;;;;;:::i;:::-;;;;;;;;10180:96;10008:274;9955:327;;:::o;7:75:27:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:118::-;5602:24;5620:5;5602:24;:::i;:::-;5597:3;5590:37;5515:118;;:::o;5639:222::-;5732:4;5770:2;5759:9;5755:18;5747:26;;5783:71;5851:1;5840:9;5836:17;5827:6;5783:71;:::i;:::-;5639:222;;;;:::o;5867:329::-;5926:6;5975:2;5963:9;5954:7;5950:23;5946:32;5943:119;;;5981:79;;:::i;:::-;5943:119;6101:1;6126:53;6171:7;6162:6;6151:9;6147:22;6126:53;:::i;:::-;6116:63;;6072:117;5867:329;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:180::-;10519:77;10516:1;10509:88;10616:4;10613:1;10606:15;10640:4;10637:1;10630:15;10657:320;10701:6;10738:1;10732:4;10728:12;10718:22;;10785:1;10779:4;10775:12;10806:18;10796:81;;10862:4;10854:6;10850:17;10840:27;;10796:81;10924:2;10916:6;10913:14;10893:18;10890:38;10887:84;;10943:18;;:::i;:::-;10887:84;10708:269;10657:320;;;:::o;10983:442::-;11132:4;11170:2;11159:9;11155:18;11147:26;;11183:71;11251:1;11240:9;11236:17;11227:6;11183:71;:::i;:::-;11264:72;11332:2;11321:9;11317:18;11308:6;11264:72;:::i;:::-;11346;11414:2;11403:9;11399:18;11390:6;11346:72;:::i;:::-;10983:442;;;;;;:::o;11431:180::-;11479:77;11476:1;11469:88;11576:4;11573:1;11566:15;11600:4;11597:1;11590:15;11617:191;11657:3;11676:20;11694:1;11676:20;:::i;:::-;11671:25;;11710:20;11728:1;11710:20;:::i;:::-;11705:25;;11753:1;11750;11746:9;11739:16;;11774:3;11771:1;11768:10;11765:36;;;11781:18;;:::i;:::-;11765:36;11617:191;;;;:::o;11814:98::-;11865:6;11899:5;11893:12;11883:22;;11814:98;;;:::o;11918:168::-;12001:11;12035:6;12030:3;12023:19;12075:4;12070:3;12066:14;12051:29;;11918:168;;;;:::o;12092:373::-;12178:3;12206:38;12238:5;12206:38;:::i;:::-;12260:70;12323:6;12318:3;12260:70;:::i;:::-;12253:77;;12339:65;12397:6;12392:3;12385:4;12378:5;12374:16;12339:65;:::i;:::-;12429:29;12451:6;12429:29;:::i;:::-;12424:3;12420:39;12413:46;;12182:283;12092:373;;;;:::o;12471:640::-;12666:4;12704:3;12693:9;12689:19;12681:27;;12718:71;12786:1;12775:9;12771:17;12762:6;12718:71;:::i;:::-;12799:72;12867:2;12856:9;12852:18;12843:6;12799:72;:::i;:::-;12881;12949:2;12938:9;12934:18;12925:6;12881:72;:::i;:::-;13000:9;12994:4;12990:20;12985:2;12974:9;12970:18;12963:48;13028:76;13099:4;13090:6;13028:76;:::i;:::-;13020:84;;12471:640;;;;;;;:::o;13117:141::-;13173:5;13204:6;13198:13;13189:22;;13220:32;13246:5;13220:32;:::i;:::-;13117:141;;;;:::o;13264:349::-;13333:6;13382:2;13370:9;13361:7;13357:23;13353:32;13350:119;;;13388:79;;:::i;:::-;13350:119;13508:1;13533:63;13588:7;13579:6;13568:9;13564:22;13533:63;:::i;:::-;13523:73;;13479:127;13264:349;;;;:::o;13619:332::-;13740:4;13778:2;13767:9;13763:18;13755:26;;13791:71;13859:1;13848:9;13844:17;13835:6;13791:71;:::i;:::-;13872:72;13940:2;13929:9;13925:18;13916:6;13872:72;:::i;:::-;13619:332;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1439000","executionCost":"infinite","totalCost":"infinite"},"external":{"TOKEN_URI()":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"infinite","getApproved(uint256)":"infinite","getTokenCounter()":"2526","isApprovedForAll(address,address)":"infinite","mintNft()":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"797","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"TOKEN_URI()":"78ce9035","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","getTokenCounter()":"6e02007d","isApprovedForAll(address,address)":"e985e9c5","mintNft()":"c2229fea","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BasicNft.sol\":\"BasicNft\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/BasicNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract BasicNft is ERC721 {\\r\\n    string public constant TOKEN_URI =\\r\\n        \\\"ipfs://bafybeig37ioir76s7mg5oobetncojcm3c3hxasyd4rvid4jqhy4gkaheg4/?filename=0-PUG.json\\\";\\r\\n    uint256 private s_tokenCounter;\\r\\n\\r\\n    constructor() ERC721(\\\"Dogie\\\", \\\"DOG\\\") {\\r\\n        s_tokenCounter = 0;\\r\\n    }\\r\\n\\r\\n    function mintNft() public {\\r\\n        _safeMint(msg.sender, s_tokenCounter);\\r\\n        s_tokenCounter = s_tokenCounter + 1;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 /*tokenId*/) public view override returns (string memory) { \\r\\n        return TOKEN_URI;\\r\\n    }\\r\\n\\r\\n    function getTokenCounter() public view returns (uint256) {\\r\\n        return s_tokenCounter;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7ef1277ce0c4a9a0e950440a5dd9a6ab24f7c2912a13a68610a46d9e05c357aa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1726,"contract":"contracts/BasicNft.sol:BasicNft","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1728,"contract":"contracts/BasicNft.sol:BasicNft","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1732,"contract":"contracts/BasicNft.sol:BasicNft","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1736,"contract":"contracts/BasicNft.sol:BasicNft","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1740,"contract":"contracts/BasicNft.sol:BasicNft","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1746,"contract":"contracts/BasicNft.sol:BasicNft","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":4481,"contract":"contracts/BasicNft.sol:BasicNft","label":"s_tokenCounter","offset":0,"slot":"6","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/RandomIpfs.sol":{"RandomIpfs":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint32","name":"callBackGasLimit","type":"uint32"},{"internalType":"string[3]","name":"dogTokenUris","type":"string[3]"},{"internalType":"uint256","name":"mintFee","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"RandomIpfs__NOT_ENOUGH_ETH_ENTERED","type":"error"},{"inputs":[],"name":"RandomIpfs__OUT_OF_RANGE","type":"error"},{"inputs":[],"name":"RandomIpfs__OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":true,"internalType":"enum RandomIpfs.Breed","name":"breed","type":"uint8"},{"indexed":false,"internalType":"address","name":"minter","type":"address"}],"name":"NftMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"},{"indexed":true,"internalType":"address","name":"requester","type":"address"}],"name":"NftRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"moddedRng","type":"uint256"}],"name":"getBreedFromRandomNum","outputs":[{"internalType":"enum RandomIpfs.Breed","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getChancesArray","outputs":[{"internalType":"uint256[3]","name":"","type":"uint256[3]"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getDogTokenUris","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getMintFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestNft","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"s_requestIdToSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1340":{"entryPoint":null,"id":1340,"parameterSlots":1,"returnSlots":0},"@_1763":{"entryPoint":null,"id":1763,"parameterSlots":2,"returnSlots":0},"@_4652":{"entryPoint":null,"id":4652,"parameterSlots":6,"returnSlots":0},"abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory":{"entryPoint":1394,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":1268,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":749,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory":{"entryPoint":1534,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":877,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":1343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":1618,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":818,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32t_array$_t_string_memory_ptr_$3_memory_ptrt_uint256_fromMemory":{"entryPoint":1641,"id":null,"parameterSlots":2,"returnSlots":6},"allocate_memory":{"entryPoint":1088,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":651,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr":{"entryPoint":1119,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":1170,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":1939,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1828,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":2250,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":703,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":841,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":671,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1582,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":900,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":772,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":2211,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":2085,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":2405,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":1224,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":1960,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1886,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":2375,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":1034,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":2075,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":2343,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":1839,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":987,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":2125,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":965,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":1160,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1165,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":666,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":661,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":970,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":1976,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":2330,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":2183,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":1989,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":2135,"id":null,"parameterSlots":3,"returnSlots":0},"validator_revert_t_address":{"entryPoint":723,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":851,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1592,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":916,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":792,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":2178,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:12678:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"379:81:27","statements":[{"nodeType":"YulAssignment","src":"389:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:27"},"nodeType":"YulFunctionCall","src":"400:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:27","type":""}],"src":"334:126:27"},{"body":{"nodeType":"YulBlock","src":"511:51:27","statements":[{"nodeType":"YulAssignment","src":"521:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:27"},"nodeType":"YulFunctionCall","src":"532:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:27","type":""}],"src":"466:96:27"},{"body":{"nodeType":"YulBlock","src":"611:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:27"},"nodeType":"YulFunctionCall","src":"670:12:27"},"nodeType":"YulExpressionStatement","src":"670:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:27"},"nodeType":"YulFunctionCall","src":"641:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:27"},"nodeType":"YulFunctionCall","src":"631:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:27"},"nodeType":"YulFunctionCall","src":"624:43:27"},"nodeType":"YulIf","src":"621:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:27","type":""}],"src":"568:122:27"},{"body":{"nodeType":"YulBlock","src":"759:80:27","statements":[{"nodeType":"YulAssignment","src":"769:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:27"},"nodeType":"YulFunctionCall","src":"778:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:27"},"nodeType":"YulFunctionCall","src":"800:33:27"},"nodeType":"YulExpressionStatement","src":"800:33:27"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:27","type":""}],"src":"696:143:27"},{"body":{"nodeType":"YulBlock","src":"889:57:27","statements":[{"nodeType":"YulAssignment","src":"899:41:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"914:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"921:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"910:3:27"},"nodeType":"YulFunctionCall","src":"910:30:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"899:7:27"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"871:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"881:7:27","type":""}],"src":"845:101:27"},{"body":{"nodeType":"YulBlock","src":"994:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"1050:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1059:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1062:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1052:6:27"},"nodeType":"YulFunctionCall","src":"1052:12:27"},"nodeType":"YulExpressionStatement","src":"1052:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1017:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1041:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"1024:16:27"},"nodeType":"YulFunctionCall","src":"1024:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1014:2:27"},"nodeType":"YulFunctionCall","src":"1014:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1007:6:27"},"nodeType":"YulFunctionCall","src":"1007:42:27"},"nodeType":"YulIf","src":"1004:62:27"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"987:5:27","type":""}],"src":"952:120:27"},{"body":{"nodeType":"YulBlock","src":"1140:79:27","statements":[{"nodeType":"YulAssignment","src":"1150:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1165:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1159:5:27"},"nodeType":"YulFunctionCall","src":"1159:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1150:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1207:5:27"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"1181:25:27"},"nodeType":"YulFunctionCall","src":"1181:32:27"},"nodeType":"YulExpressionStatement","src":"1181:32:27"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1118:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1126:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1134:5:27","type":""}],"src":"1078:141:27"},{"body":{"nodeType":"YulBlock","src":"1270:32:27","statements":[{"nodeType":"YulAssignment","src":"1280:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"1291:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1280:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1252:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1262:7:27","type":""}],"src":"1225:77:27"},{"body":{"nodeType":"YulBlock","src":"1351:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"1408:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1417:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1420:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1410:6:27"},"nodeType":"YulFunctionCall","src":"1410:12:27"},"nodeType":"YulExpressionStatement","src":"1410:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1374:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1399:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1381:17:27"},"nodeType":"YulFunctionCall","src":"1381:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1371:2:27"},"nodeType":"YulFunctionCall","src":"1371:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1364:6:27"},"nodeType":"YulFunctionCall","src":"1364:43:27"},"nodeType":"YulIf","src":"1361:63:27"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1344:5:27","type":""}],"src":"1308:122:27"},{"body":{"nodeType":"YulBlock","src":"1499:80:27","statements":[{"nodeType":"YulAssignment","src":"1509:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1524:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1518:5:27"},"nodeType":"YulFunctionCall","src":"1518:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1509:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1567:5:27"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1540:26:27"},"nodeType":"YulFunctionCall","src":"1540:33:27"},"nodeType":"YulExpressionStatement","src":"1540:33:27"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1477:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1485:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1493:5:27","type":""}],"src":"1436:143:27"},{"body":{"nodeType":"YulBlock","src":"1629:49:27","statements":[{"nodeType":"YulAssignment","src":"1639:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1654:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"1661:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1650:3:27"},"nodeType":"YulFunctionCall","src":"1650:22:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1639:7:27"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1611:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1621:7:27","type":""}],"src":"1585:93:27"},{"body":{"nodeType":"YulBlock","src":"1726:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"1782:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1791:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1794:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1784:6:27"},"nodeType":"YulFunctionCall","src":"1784:12:27"},"nodeType":"YulExpressionStatement","src":"1784:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1749:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1773:5:27"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"1756:16:27"},"nodeType":"YulFunctionCall","src":"1756:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1746:2:27"},"nodeType":"YulFunctionCall","src":"1746:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1739:6:27"},"nodeType":"YulFunctionCall","src":"1739:42:27"},"nodeType":"YulIf","src":"1736:62:27"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1719:5:27","type":""}],"src":"1684:120:27"},{"body":{"nodeType":"YulBlock","src":"1872:79:27","statements":[{"nodeType":"YulAssignment","src":"1882:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1897:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1891:5:27"},"nodeType":"YulFunctionCall","src":"1891:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1882:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1939:5:27"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"1913:25:27"},"nodeType":"YulFunctionCall","src":"1913:32:27"},"nodeType":"YulExpressionStatement","src":"1913:32:27"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1850:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"1858:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1866:5:27","type":""}],"src":"1810:141:27"},{"body":{"nodeType":"YulBlock","src":"2046:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2063:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2066:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2056:6:27"},"nodeType":"YulFunctionCall","src":"2056:12:27"},"nodeType":"YulExpressionStatement","src":"2056:12:27"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"1957:117:27"},{"body":{"nodeType":"YulBlock","src":"2128:54:27","statements":[{"nodeType":"YulAssignment","src":"2138:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2156:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2163:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2152:3:27"},"nodeType":"YulFunctionCall","src":"2152:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2172:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2168:3:27"},"nodeType":"YulFunctionCall","src":"2168:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2148:3:27"},"nodeType":"YulFunctionCall","src":"2148:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2138:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2111:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2121:6:27","type":""}],"src":"2080:102:27"},{"body":{"nodeType":"YulBlock","src":"2216:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2233:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2236:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2226:6:27"},"nodeType":"YulFunctionCall","src":"2226:88:27"},"nodeType":"YulExpressionStatement","src":"2226:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2330:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2333:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2323:6:27"},"nodeType":"YulFunctionCall","src":"2323:15:27"},"nodeType":"YulExpressionStatement","src":"2323:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2354:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2357:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2347:6:27"},"nodeType":"YulFunctionCall","src":"2347:15:27"},"nodeType":"YulExpressionStatement","src":"2347:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2188:180:27"},{"body":{"nodeType":"YulBlock","src":"2417:238:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2427:58:27","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2449:6:27"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2479:4:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2457:21:27"},"nodeType":"YulFunctionCall","src":"2457:27:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2445:3:27"},"nodeType":"YulFunctionCall","src":"2445:40:27"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"2431:10:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"2596:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2598:16:27"},"nodeType":"YulFunctionCall","src":"2598:18:27"},"nodeType":"YulExpressionStatement","src":"2598:18:27"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2539:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"2551:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2536:2:27"},"nodeType":"YulFunctionCall","src":"2536:34:27"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2575:10:27"},{"name":"memPtr","nodeType":"YulIdentifier","src":"2587:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2572:2:27"},"nodeType":"YulFunctionCall","src":"2572:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2533:2:27"},"nodeType":"YulFunctionCall","src":"2533:62:27"},"nodeType":"YulIf","src":"2530:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2634:2:27","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"2638:10:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2627:6:27"},"nodeType":"YulFunctionCall","src":"2627:22:27"},"nodeType":"YulExpressionStatement","src":"2627:22:27"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"2403:6:27","type":""},{"name":"size","nodeType":"YulTypedName","src":"2411:4:27","type":""}],"src":"2374:281:27"},{"body":{"nodeType":"YulBlock","src":"2702:88:27","statements":[{"nodeType":"YulAssignment","src":"2712:30:27","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"2722:18:27"},"nodeType":"YulFunctionCall","src":"2722:20:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2712:6:27"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"2771:6:27"},{"name":"size","nodeType":"YulIdentifier","src":"2779:4:27"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"2751:19:27"},"nodeType":"YulFunctionCall","src":"2751:33:27"},"nodeType":"YulExpressionStatement","src":"2751:33:27"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"2686:4:27","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"2695:6:27","type":""}],"src":"2661:129:27"},{"body":{"nodeType":"YulBlock","src":"2886:169:27","statements":[{"body":{"nodeType":"YulBlock","src":"2991:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2993:16:27"},"nodeType":"YulFunctionCall","src":"2993:18:27"},"nodeType":"YulExpressionStatement","src":"2993:18:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2963:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"2971:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2960:2:27"},"nodeType":"YulFunctionCall","src":"2960:30:27"},"nodeType":"YulIf","src":"2957:56:27"},{"nodeType":"YulAssignment","src":"3023:25:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3035:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"3043:4:27","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3031:3:27"},"nodeType":"YulFunctionCall","src":"3031:17:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3023:4:27"}]}]},"name":"array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"2870:6:27","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"2881:4:27","type":""}],"src":"2796:259:27"},{"body":{"nodeType":"YulBlock","src":"3150:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3167:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3170:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3160:6:27"},"nodeType":"YulFunctionCall","src":"3160:12:27"},"nodeType":"YulExpressionStatement","src":"3160:12:27"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"3061:117:27"},{"body":{"nodeType":"YulBlock","src":"3273:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3290:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3293:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3283:6:27"},"nodeType":"YulFunctionCall","src":"3283:12:27"},"nodeType":"YulExpressionStatement","src":"3283:12:27"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"3184:117:27"},{"body":{"nodeType":"YulBlock","src":"3374:241:27","statements":[{"body":{"nodeType":"YulBlock","src":"3479:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3481:16:27"},"nodeType":"YulFunctionCall","src":"3481:18:27"},"nodeType":"YulExpressionStatement","src":"3481:18:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3451:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"3459:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3448:2:27"},"nodeType":"YulFunctionCall","src":"3448:30:27"},"nodeType":"YulIf","src":"3445:56:27"},{"nodeType":"YulAssignment","src":"3511:37:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3541:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"3519:21:27"},"nodeType":"YulFunctionCall","src":"3519:29:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3511:4:27"}]},{"nodeType":"YulAssignment","src":"3585:23:27","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"3597:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"3603:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3593:3:27"},"nodeType":"YulFunctionCall","src":"3593:15:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"3585:4:27"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"3358:6:27","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"3369:4:27","type":""}],"src":"3307:308:27"},{"body":{"nodeType":"YulBlock","src":"3683:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3693:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3702:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3697:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"3762:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3787:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"3792:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3783:3:27"},"nodeType":"YulFunctionCall","src":"3783:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3806:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"3811:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3802:3:27"},"nodeType":"YulFunctionCall","src":"3802:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3796:5:27"},"nodeType":"YulFunctionCall","src":"3796:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3776:6:27"},"nodeType":"YulFunctionCall","src":"3776:39:27"},"nodeType":"YulExpressionStatement","src":"3776:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3723:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"3726:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3720:2:27"},"nodeType":"YulFunctionCall","src":"3720:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3734:19:27","statements":[{"nodeType":"YulAssignment","src":"3736:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3745:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"3748:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3741:3:27"},"nodeType":"YulFunctionCall","src":"3741:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3736:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"3716:3:27","statements":[]},"src":"3712:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3845:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"3850:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3841:3:27"},"nodeType":"YulFunctionCall","src":"3841:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"3859:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3834:6:27"},"nodeType":"YulFunctionCall","src":"3834:27:27"},"nodeType":"YulExpressionStatement","src":"3834:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3665:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"3670:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"3675:6:27","type":""}],"src":"3621:246:27"},{"body":{"nodeType":"YulBlock","src":"3968:339:27","statements":[{"nodeType":"YulAssignment","src":"3978:75:27","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4045:6:27"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"4003:41:27"},"nodeType":"YulFunctionCall","src":"4003:49:27"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3987:15:27"},"nodeType":"YulFunctionCall","src":"3987:66:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3978:5:27"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4069:5:27"},{"name":"length","nodeType":"YulIdentifier","src":"4076:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4062:6:27"},"nodeType":"YulFunctionCall","src":"4062:21:27"},"nodeType":"YulExpressionStatement","src":"4062:21:27"},{"nodeType":"YulVariableDeclaration","src":"4092:27:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"4107:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"4114:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4103:3:27"},"nodeType":"YulFunctionCall","src":"4103:16:27"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4096:3:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"4157:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"4159:77:27"},"nodeType":"YulFunctionCall","src":"4159:79:27"},"nodeType":"YulExpressionStatement","src":"4159:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4138:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"4143:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4134:3:27"},"nodeType":"YulFunctionCall","src":"4134:16:27"},{"name":"end","nodeType":"YulIdentifier","src":"4152:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4131:2:27"},"nodeType":"YulFunctionCall","src":"4131:25:27"},"nodeType":"YulIf","src":"4128:112:27"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4284:3:27"},{"name":"dst","nodeType":"YulIdentifier","src":"4289:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"4294:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4249:34:27"},"nodeType":"YulFunctionCall","src":"4249:52:27"},"nodeType":"YulExpressionStatement","src":"4249:52:27"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3941:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"3946:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"3954:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3962:5:27","type":""}],"src":"3873:434:27"},{"body":{"nodeType":"YulBlock","src":"4400:282:27","statements":[{"body":{"nodeType":"YulBlock","src":"4449:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4451:77:27"},"nodeType":"YulFunctionCall","src":"4451:79:27"},"nodeType":"YulExpressionStatement","src":"4451:79:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4428:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4436:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4424:3:27"},"nodeType":"YulFunctionCall","src":"4424:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"4443:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4420:3:27"},"nodeType":"YulFunctionCall","src":"4420:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4413:6:27"},"nodeType":"YulFunctionCall","src":"4413:35:27"},"nodeType":"YulIf","src":"4410:122:27"},{"nodeType":"YulVariableDeclaration","src":"4541:27:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4561:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4555:5:27"},"nodeType":"YulFunctionCall","src":"4555:13:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"4545:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4577:99:27","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4649:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"4657:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4645:3:27"},"nodeType":"YulFunctionCall","src":"4645:17:27"},{"name":"length","nodeType":"YulIdentifier","src":"4664:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"4672:3:27"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"4586:58:27"},"nodeType":"YulFunctionCall","src":"4586:90:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4577:5:27"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4378:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"4386:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4394:5:27","type":""}],"src":"4327:355:27"},{"body":{"nodeType":"YulBlock","src":"4826:772:27","statements":[{"nodeType":"YulAssignment","src":"4836:98:27","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4926:6:27"}],"functionName":{"name":"array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr","nodeType":"YulIdentifier","src":"4861:64:27"},"nodeType":"YulFunctionCall","src":"4861:72:27"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"4845:15:27"},"nodeType":"YulFunctionCall","src":"4845:89:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4836:5:27"}]},{"nodeType":"YulVariableDeclaration","src":"4943:16:27","value":{"name":"array","nodeType":"YulIdentifier","src":"4954:5:27"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4947:3:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4969:44:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4987:6:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4999:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5007:4:27","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4995:3:27"},"nodeType":"YulFunctionCall","src":"4995:17:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4983:3:27"},"nodeType":"YulFunctionCall","src":"4983:30:27"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"4973:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"5041:103:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"5055:77:27"},"nodeType":"YulFunctionCall","src":"5055:79:27"},"nodeType":"YulExpressionStatement","src":"5055:79:27"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5028:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"5036:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5025:2:27"},"nodeType":"YulFunctionCall","src":"5025:15:27"},"nodeType":"YulIf","src":"5022:122:27"},{"body":{"nodeType":"YulBlock","src":"5229:363:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5244:29:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5269:3:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5263:5:27"},"nodeType":"YulFunctionCall","src":"5263:10:27"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"5248:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"5325:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"5327:77:27"},"nodeType":"YulFunctionCall","src":"5327:79:27"},"nodeType":"YulExpressionStatement","src":"5327:79:27"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"5292:11:27"},{"kind":"number","nodeType":"YulLiteral","src":"5305:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5289:2:27"},"nodeType":"YulFunctionCall","src":"5289:35:27"},"nodeType":"YulIf","src":"5286:122:27"},{"nodeType":"YulVariableDeclaration","src":"5421:42:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5443:6:27"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"5451:11:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5439:3:27"},"nodeType":"YulFunctionCall","src":"5439:24:27"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"5425:10:27","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5484:3:27"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"5531:10:27"},{"name":"end","nodeType":"YulIdentifier","src":"5543:3:27"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"5489:41:27"},"nodeType":"YulFunctionCall","src":"5489:58:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5477:6:27"},"nodeType":"YulFunctionCall","src":"5477:71:27"},"nodeType":"YulExpressionStatement","src":"5477:71:27"},{"nodeType":"YulAssignment","src":"5561:21:27","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5572:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"5577:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5568:3:27"},"nodeType":"YulFunctionCall","src":"5568:14:27"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5561:3:27"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5182:3:27"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5187:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5179:2:27"},"nodeType":"YulFunctionCall","src":"5179:15:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5195:25:27","statements":[{"nodeType":"YulAssignment","src":"5197:21:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5208:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"5213:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:27"},"nodeType":"YulFunctionCall","src":"5204:14:27"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5197:3:27"}]}]},"pre":{"nodeType":"YulBlock","src":"5157:21:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5159:17:27","value":{"name":"offset","nodeType":"YulIdentifier","src":"5170:6:27"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5163:3:27","type":""}]}]},"src":"5153:439:27"}]},"name":"abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4796:6:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"4804:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"4812:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4820:5:27","type":""}],"src":"4705:893:27"},{"body":{"nodeType":"YulBlock","src":"5717:285:27","statements":[{"body":{"nodeType":"YulBlock","src":"5766:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"5768:77:27"},"nodeType":"YulFunctionCall","src":"5768:79:27"},"nodeType":"YulExpressionStatement","src":"5768:79:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5745:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5753:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5741:3:27"},"nodeType":"YulFunctionCall","src":"5741:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"5760:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5737:3:27"},"nodeType":"YulFunctionCall","src":"5737:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5730:6:27"},"nodeType":"YulFunctionCall","src":"5730:35:27"},"nodeType":"YulIf","src":"5727:122:27"},{"nodeType":"YulVariableDeclaration","src":"5858:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"5872:4:27","type":"","value":"0x03"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5862:6:27","type":""}]},{"nodeType":"YulAssignment","src":"5885:111:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5976:6:27"},{"name":"length","nodeType":"YulIdentifier","src":"5984:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"5992:3:27"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"5894:81:27"},"nodeType":"YulFunctionCall","src":"5894:102:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"5885:5:27"}]}]},"name":"abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5695:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"5703:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"5711:5:27","type":""}],"src":"5621:381:27"},{"body":{"nodeType":"YulBlock","src":"6053:32:27","statements":[{"nodeType":"YulAssignment","src":"6063:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"6074:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6063:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6035:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6045:7:27","type":""}],"src":"6008:77:27"},{"body":{"nodeType":"YulBlock","src":"6134:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"6191:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6200:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6203:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6193:6:27"},"nodeType":"YulFunctionCall","src":"6193:12:27"},"nodeType":"YulExpressionStatement","src":"6193:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6157:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6182:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6164:17:27"},"nodeType":"YulFunctionCall","src":"6164:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6154:2:27"},"nodeType":"YulFunctionCall","src":"6154:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6147:6:27"},"nodeType":"YulFunctionCall","src":"6147:43:27"},"nodeType":"YulIf","src":"6144:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6127:5:27","type":""}],"src":"6091:122:27"},{"body":{"nodeType":"YulBlock","src":"6282:80:27","statements":[{"nodeType":"YulAssignment","src":"6292:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6307:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6301:5:27"},"nodeType":"YulFunctionCall","src":"6301:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6292:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6350:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"6323:26:27"},"nodeType":"YulFunctionCall","src":"6323:33:27"},"nodeType":"YulExpressionStatement","src":"6323:33:27"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6260:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"6268:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6276:5:27","type":""}],"src":"6219:143:27"},{"body":{"nodeType":"YulBlock","src":"6561:1156:27","statements":[{"body":{"nodeType":"YulBlock","src":"6608:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6610:77:27"},"nodeType":"YulFunctionCall","src":"6610:79:27"},"nodeType":"YulExpressionStatement","src":"6610:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6582:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"6591:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6578:3:27"},"nodeType":"YulFunctionCall","src":"6578:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"6603:3:27","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6574:3:27"},"nodeType":"YulFunctionCall","src":"6574:33:27"},"nodeType":"YulIf","src":"6571:120:27"},{"nodeType":"YulBlock","src":"6701:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6716:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6730:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6720:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6745:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6791:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6802:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6787:3:27"},"nodeType":"YulFunctionCall","src":"6787:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6811:7:27"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"6755:31:27"},"nodeType":"YulFunctionCall","src":"6755:64:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6745:6:27"}]}]},{"nodeType":"YulBlock","src":"6839:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6854:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"6868:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6858:6:27","type":""}]},{"nodeType":"YulAssignment","src":"6884:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6929:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"6940:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6925:3:27"},"nodeType":"YulFunctionCall","src":"6925:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6949:7:27"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"6894:30:27"},"nodeType":"YulFunctionCall","src":"6894:63:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6884:6:27"}]}]},{"nodeType":"YulBlock","src":"6977:129:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6992:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7006:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6996:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7022:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7068:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7079:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7064:3:27"},"nodeType":"YulFunctionCall","src":"7064:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7088:7:27"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"7032:31:27"},"nodeType":"YulFunctionCall","src":"7032:64:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7022:6:27"}]}]},{"nodeType":"YulBlock","src":"7116:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7131:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7145:2:27","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7135:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7161:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7206:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7217:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7202:3:27"},"nodeType":"YulFunctionCall","src":"7202:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7226:7:27"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"7171:30:27"},"nodeType":"YulFunctionCall","src":"7171:63:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7161:6:27"}]}]},{"nodeType":"YulBlock","src":"7254:316:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7269:40:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7293:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7304:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7289:3:27"},"nodeType":"YulFunctionCall","src":"7289:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7283:5:27"},"nodeType":"YulFunctionCall","src":"7283:26:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7273:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"7356:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7358:77:27"},"nodeType":"YulFunctionCall","src":"7358:79:27"},"nodeType":"YulExpressionStatement","src":"7358:79:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7328:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7336:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7325:2:27"},"nodeType":"YulFunctionCall","src":"7325:30:27"},"nodeType":"YulIf","src":"7322:117:27"},{"nodeType":"YulAssignment","src":"7453:107:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7532:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7543:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7528:3:27"},"nodeType":"YulFunctionCall","src":"7528:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7552:7:27"}],"functionName":{"name":"abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"7463:64:27"},"nodeType":"YulFunctionCall","src":"7463:97:27"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7453:6:27"}]}]},{"nodeType":"YulBlock","src":"7580:130:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7595:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7609:3:27","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7599:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7626:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7672:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7683:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7668:3:27"},"nodeType":"YulFunctionCall","src":"7668:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7692:7:27"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"7636:31:27"},"nodeType":"YulFunctionCall","src":"7636:64:27"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7626:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32t_array$_t_string_memory_ptr_$3_memory_ptrt_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6491:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6502:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6514:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6522:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6530:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6538:6:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6546:6:27","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6554:6:27","type":""}],"src":"6368:1349:27"},{"body":{"nodeType":"YulBlock","src":"7782:40:27","statements":[{"nodeType":"YulAssignment","src":"7793:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7809:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7803:5:27"},"nodeType":"YulFunctionCall","src":"7803:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7793:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7765:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7775:6:27","type":""}],"src":"7723:99:27"},{"body":{"nodeType":"YulBlock","src":"7856:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7873:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7876:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7866:6:27"},"nodeType":"YulFunctionCall","src":"7866:88:27"},"nodeType":"YulExpressionStatement","src":"7866:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7970:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7973:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7963:6:27"},"nodeType":"YulFunctionCall","src":"7963:15:27"},"nodeType":"YulExpressionStatement","src":"7963:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7994:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7997:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7987:6:27"},"nodeType":"YulFunctionCall","src":"7987:15:27"},"nodeType":"YulExpressionStatement","src":"7987:15:27"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"7828:180:27"},{"body":{"nodeType":"YulBlock","src":"8065:269:27","statements":[{"nodeType":"YulAssignment","src":"8075:22:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8089:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"8095:1:27","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8085:3:27"},"nodeType":"YulFunctionCall","src":"8085:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8075:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"8106:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8136:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"8142:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8132:3:27"},"nodeType":"YulFunctionCall","src":"8132:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8110:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"8183:51:27","statements":[{"nodeType":"YulAssignment","src":"8197:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8211:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"8219:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8207:3:27"},"nodeType":"YulFunctionCall","src":"8207:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8197:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8163:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8156:6:27"},"nodeType":"YulFunctionCall","src":"8156:26:27"},"nodeType":"YulIf","src":"8153:81:27"},{"body":{"nodeType":"YulBlock","src":"8286:42:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"8300:16:27"},"nodeType":"YulFunctionCall","src":"8300:18:27"},"nodeType":"YulExpressionStatement","src":"8300:18:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8250:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8273:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"8281:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8270:2:27"},"nodeType":"YulFunctionCall","src":"8270:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8247:2:27"},"nodeType":"YulFunctionCall","src":"8247:38:27"},"nodeType":"YulIf","src":"8244:84:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8049:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8058:6:27","type":""}],"src":"8014:320:27"},{"body":{"nodeType":"YulBlock","src":"8394:87:27","statements":[{"nodeType":"YulAssignment","src":"8404:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"8412:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8404:4:27"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8432:1:27","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"8435:3:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8425:6:27"},"nodeType":"YulFunctionCall","src":"8425:14:27"},"nodeType":"YulExpressionStatement","src":"8425:14:27"},{"nodeType":"YulAssignment","src":"8448:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8466:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8469:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8456:9:27"},"nodeType":"YulFunctionCall","src":"8456:18:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8448:4:27"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"8381:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"8389:4:27","type":""}],"src":"8340:141:27"},{"body":{"nodeType":"YulBlock","src":"8531:49:27","statements":[{"nodeType":"YulAssignment","src":"8541:33:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8559:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"8566:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8555:3:27"},"nodeType":"YulFunctionCall","src":"8555:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"8571:2:27","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8551:3:27"},"nodeType":"YulFunctionCall","src":"8551:23:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8541:6:27"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8514:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"8524:6:27","type":""}],"src":"8487:93:27"},{"body":{"nodeType":"YulBlock","src":"8639:54:27","statements":[{"nodeType":"YulAssignment","src":"8649:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"8674:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"8680:5:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8670:3:27"},"nodeType":"YulFunctionCall","src":"8670:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"8649:8:27"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"8614:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"8620:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"8630:8:27","type":""}],"src":"8586:107:27"},{"body":{"nodeType":"YulBlock","src":"8775:317:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8785:35:27","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"8806:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"8818:1:27","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8802:3:27"},"nodeType":"YulFunctionCall","src":"8802:18:27"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"8789:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"8829:109:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"8860:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8871:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"8841:18:27"},"nodeType":"YulFunctionCall","src":"8841:97:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"8833:4:27","type":""}]},{"nodeType":"YulAssignment","src":"8947:51:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"8978:9:27"},{"name":"toInsert","nodeType":"YulIdentifier","src":"8989:8:27"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"8959:18:27"},"nodeType":"YulFunctionCall","src":"8959:39:27"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"8947:8:27"}]},{"nodeType":"YulAssignment","src":"9007:30:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9020:5:27"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"9031:4:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9027:3:27"},"nodeType":"YulFunctionCall","src":"9027:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9016:3:27"},"nodeType":"YulFunctionCall","src":"9016:21:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9007:5:27"}]},{"nodeType":"YulAssignment","src":"9046:40:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9059:5:27"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"9070:8:27"},{"name":"mask","nodeType":"YulIdentifier","src":"9080:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9066:3:27"},"nodeType":"YulFunctionCall","src":"9066:19:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9056:2:27"},"nodeType":"YulFunctionCall","src":"9056:30:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"9046:6:27"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8736:5:27","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"8743:10:27","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"8755:8:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"8768:6:27","type":""}],"src":"8699:393:27"},{"body":{"nodeType":"YulBlock","src":"9130:28:27","statements":[{"nodeType":"YulAssignment","src":"9140:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"9147:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9140:3:27"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9116:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9126:3:27","type":""}],"src":"9098:60:27"},{"body":{"nodeType":"YulBlock","src":"9224:82:27","statements":[{"nodeType":"YulAssignment","src":"9234:66:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9292:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9274:17:27"},"nodeType":"YulFunctionCall","src":"9274:24:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"9265:8:27"},"nodeType":"YulFunctionCall","src":"9265:34:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9247:17:27"},"nodeType":"YulFunctionCall","src":"9247:53:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9234:9:27"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9204:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9214:9:27","type":""}],"src":"9164:142:27"},{"body":{"nodeType":"YulBlock","src":"9359:28:27","statements":[{"nodeType":"YulAssignment","src":"9369:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"9376:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9369:3:27"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9345:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9355:3:27","type":""}],"src":"9312:75:27"},{"body":{"nodeType":"YulBlock","src":"9469:193:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9479:63:27","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"9534:7:27"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"9503:30:27"},"nodeType":"YulFunctionCall","src":"9503:39:27"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"9483:16:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9558:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9598:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"9592:5:27"},"nodeType":"YulFunctionCall","src":"9592:11:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9605:6:27"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"9637:16:27"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"9613:23:27"},"nodeType":"YulFunctionCall","src":"9613:41:27"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"9564:27:27"},"nodeType":"YulFunctionCall","src":"9564:91:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"9551:6:27"},"nodeType":"YulFunctionCall","src":"9551:105:27"},"nodeType":"YulExpressionStatement","src":"9551:105:27"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"9446:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"9452:6:27","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"9460:7:27","type":""}],"src":"9393:269:27"},{"body":{"nodeType":"YulBlock","src":"9717:24:27","statements":[{"nodeType":"YulAssignment","src":"9727:8:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9734:1:27","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"9727:3:27"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"9713:3:27","type":""}],"src":"9668:73:27"},{"body":{"nodeType":"YulBlock","src":"9800:136:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9810:46:27","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"9824:30:27"},"nodeType":"YulFunctionCall","src":"9824:32:27"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"9814:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"9909:4:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9915:6:27"},{"name":"zero_0","nodeType":"YulIdentifier","src":"9923:6:27"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"9865:43:27"},"nodeType":"YulFunctionCall","src":"9865:65:27"},"nodeType":"YulExpressionStatement","src":"9865:65:27"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"9786:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"9792:6:27","type":""}],"src":"9747:189:27"},{"body":{"nodeType":"YulBlock","src":"9992:136:27","statements":[{"body":{"nodeType":"YulBlock","src":"10059:63:27","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10103:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"10110:1:27","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"10073:29:27"},"nodeType":"YulFunctionCall","src":"10073:39:27"},"nodeType":"YulExpressionStatement","src":"10073:39:27"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10012:5:27"},{"name":"end","nodeType":"YulIdentifier","src":"10019:3:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10009:2:27"},"nodeType":"YulFunctionCall","src":"10009:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10024:26:27","statements":[{"nodeType":"YulAssignment","src":"10026:22:27","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"10039:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"10046:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10035:3:27"},"nodeType":"YulFunctionCall","src":"10035:13:27"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"10026:5:27"}]}]},"pre":{"nodeType":"YulBlock","src":"10006:2:27","statements":[]},"src":"10002:120:27"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"9980:5:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"9987:3:27","type":""}],"src":"9942:186:27"},{"body":{"nodeType":"YulBlock","src":"10213:464:27","statements":[{"body":{"nodeType":"YulBlock","src":"10239:431:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10253:54:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"10301:5:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"10269:31:27"},"nodeType":"YulFunctionCall","src":"10269:38:27"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"10257:8:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10320:63:27","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"10343:8:27"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"10371:10:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"10353:17:27"},"nodeType":"YulFunctionCall","src":"10353:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10339:3:27"},"nodeType":"YulFunctionCall","src":"10339:44:27"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"10324:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"10540:27:27","statements":[{"nodeType":"YulAssignment","src":"10542:23:27","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"10557:8:27"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"10542:11:27"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"10524:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"10536:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10521:2:27"},"nodeType":"YulFunctionCall","src":"10521:18:27"},"nodeType":"YulIf","src":"10518:49:27"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"10609:11:27"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"10626:8:27"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10654:3:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"10636:17:27"},"nodeType":"YulFunctionCall","src":"10636:22:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10622:3:27"},"nodeType":"YulFunctionCall","src":"10622:37:27"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"10580:28:27"},"nodeType":"YulFunctionCall","src":"10580:80:27"},"nodeType":"YulExpressionStatement","src":"10580:80:27"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"10230:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"10235:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10227:2:27"},"nodeType":"YulFunctionCall","src":"10227:11:27"},"nodeType":"YulIf","src":"10224:446:27"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"10189:5:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"10196:3:27","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"10201:10:27","type":""}],"src":"10134:543:27"},{"body":{"nodeType":"YulBlock","src":"10746:54:27","statements":[{"nodeType":"YulAssignment","src":"10756:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"10781:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"10787:5:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10777:3:27"},"nodeType":"YulFunctionCall","src":"10777:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"10756:8:27"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"10721:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"10727:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"10737:8:27","type":""}],"src":"10683:117:27"},{"body":{"nodeType":"YulBlock","src":"10857:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"10867:68:27","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10916:1:27","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"10919:5:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10912:3:27"},"nodeType":"YulFunctionCall","src":"10912:13:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10931:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10927:3:27"},"nodeType":"YulFunctionCall","src":"10927:6:27"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"10883:28:27"},"nodeType":"YulFunctionCall","src":"10883:51:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10879:3:27"},"nodeType":"YulFunctionCall","src":"10879:56:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"10871:4:27","type":""}]},{"nodeType":"YulAssignment","src":"10944:25:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10958:4:27"},{"name":"mask","nodeType":"YulIdentifier","src":"10964:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10954:3:27"},"nodeType":"YulFunctionCall","src":"10954:15:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10944:6:27"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10834:4:27","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"10840:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"10850:6:27","type":""}],"src":"10806:169:27"},{"body":{"nodeType":"YulBlock","src":"11061:214:27","statements":[{"nodeType":"YulAssignment","src":"11194:37:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"11221:4:27"},{"name":"len","nodeType":"YulIdentifier","src":"11227:3:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"11202:18:27"},"nodeType":"YulFunctionCall","src":"11202:29:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"11194:4:27"}]},{"nodeType":"YulAssignment","src":"11240:29:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"11251:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11261:1:27","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"11264:3:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11257:3:27"},"nodeType":"YulFunctionCall","src":"11257:11:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11248:2:27"},"nodeType":"YulFunctionCall","src":"11248:21:27"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"11240:4:27"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"11042:4:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"11048:3:27","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"11056:4:27","type":""}],"src":"10980:295:27"},{"body":{"nodeType":"YulBlock","src":"11372:1303:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11383:51:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"11430:3:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"11397:32:27"},"nodeType":"YulFunctionCall","src":"11397:37:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"11387:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"11519:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"11521:16:27"},"nodeType":"YulFunctionCall","src":"11521:18:27"},"nodeType":"YulExpressionStatement","src":"11521:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"11491:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11499:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11488:2:27"},"nodeType":"YulFunctionCall","src":"11488:30:27"},"nodeType":"YulIf","src":"11485:56:27"},{"nodeType":"YulVariableDeclaration","src":"11551:52:27","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11597:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"11591:5:27"},"nodeType":"YulFunctionCall","src":"11591:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"11565:25:27"},"nodeType":"YulFunctionCall","src":"11565:38:27"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"11555:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11696:4:27"},{"name":"oldLen","nodeType":"YulIdentifier","src":"11702:6:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"11710:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"11650:45:27"},"nodeType":"YulFunctionCall","src":"11650:67:27"},"nodeType":"YulExpressionStatement","src":"11650:67:27"},{"nodeType":"YulVariableDeclaration","src":"11727:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11744:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"11731:9:27","type":""}]},{"nodeType":"YulAssignment","src":"11755:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11768:4:27","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"11755:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"11819:611:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11833:37:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"11852:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11864:4:27","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11860:3:27"},"nodeType":"YulFunctionCall","src":"11860:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11848:3:27"},"nodeType":"YulFunctionCall","src":"11848:22:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"11837:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11884:51:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"11930:4:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"11898:31:27"},"nodeType":"YulFunctionCall","src":"11898:37:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"11888:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11948:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11957:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"11952:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"12016:163:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12041:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12059:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"12064:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12055:3:27"},"nodeType":"YulFunctionCall","src":"12055:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12049:5:27"},"nodeType":"YulFunctionCall","src":"12049:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12034:6:27"},"nodeType":"YulFunctionCall","src":"12034:42:27"},"nodeType":"YulExpressionStatement","src":"12034:42:27"},{"nodeType":"YulAssignment","src":"12093:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12107:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"12115:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12103:3:27"},"nodeType":"YulFunctionCall","src":"12103:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12093:6:27"}]},{"nodeType":"YulAssignment","src":"12134:31:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"12151:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"12162:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12147:3:27"},"nodeType":"YulFunctionCall","src":"12147:18:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"12134:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11982:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"11985:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11979:2:27"},"nodeType":"YulFunctionCall","src":"11979:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11994:21:27","statements":[{"nodeType":"YulAssignment","src":"11996:17:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12005:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"12008:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12001:3:27"},"nodeType":"YulFunctionCall","src":"12001:12:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11996:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"11975:3:27","statements":[]},"src":"11971:208:27"},{"body":{"nodeType":"YulBlock","src":"12215:156:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12233:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12260:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"12265:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12256:3:27"},"nodeType":"YulFunctionCall","src":"12256:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12250:5:27"},"nodeType":"YulFunctionCall","src":"12250:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"12237:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"12300:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"12327:9:27"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"12342:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"12350:4:27","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12338:3:27"},"nodeType":"YulFunctionCall","src":"12338:17:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"12308:18:27"},"nodeType":"YulFunctionCall","src":"12308:48:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12293:6:27"},"nodeType":"YulFunctionCall","src":"12293:64:27"},"nodeType":"YulExpressionStatement","src":"12293:64:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"12198:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"12207:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12195:2:27"},"nodeType":"YulFunctionCall","src":"12195:19:27"},"nodeType":"YulIf","src":"12192:179:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12391:4:27"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"12405:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"12413:1:27","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"12401:3:27"},"nodeType":"YulFunctionCall","src":"12401:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"12417:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12397:3:27"},"nodeType":"YulFunctionCall","src":"12397:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12384:6:27"},"nodeType":"YulFunctionCall","src":"12384:36:27"},"nodeType":"YulExpressionStatement","src":"12384:36:27"}]},"nodeType":"YulCase","src":"11812:618:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11817:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"12447:222:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12461:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12474:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"12465:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"12498:67:27","statements":[{"nodeType":"YulAssignment","src":"12516:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12535:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"12540:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12531:3:27"},"nodeType":"YulFunctionCall","src":"12531:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12525:5:27"},"nodeType":"YulFunctionCall","src":"12525:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12516:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"12491:6:27"},"nodeType":"YulIf","src":"12488:77:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"12585:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12644:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"12651:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"12591:52:27"},"nodeType":"YulFunctionCall","src":"12591:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"12578:6:27"},"nodeType":"YulFunctionCall","src":"12578:81:27"},"nodeType":"YulExpressionStatement","src":"12578:81:27"}]},"nodeType":"YulCase","src":"12439:230:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"11792:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"11800:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11789:2:27"},"nodeType":"YulFunctionCall","src":"11789:14:27"},"nodeType":"YulSwitch","src":"11782:887:27"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"11361:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"11367:3:27","type":""}],"src":"11280:1395:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    // string[3]\n    function abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_string_memory_ptr_$3_memory_ptr(length))\n        let dst := array\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let innerOffset := mload(src)\n            if gt(innerOffset, 0xffffffffffffffff) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n            let elementPos := add(offset, innerOffset)\n\n            mstore(dst, abi_decode_t_string_memory_ptr_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // string[3]\n    function abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := 0x03\n        array := abi_decode_available_length_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(offset, length, end)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32t_array$_t_string_memory_ptr_$3_memory_ptrt_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4 := abi_decode_t_array$_t_string_memory_ptr_$3_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x3C28 CODESIZE SUB DUP1 PUSH3 0x3C28 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x669 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x52616E646F6D446F67734E667400000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x444F475300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP8 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0xEB SWAP2 SWAP1 PUSH3 0x965 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xFD SWAP2 SWAP1 PUSH3 0x965 JUMP JUMPDEST POP POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP4 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP3 PUSH4 0xFFFFFFFF AND PUSH2 0x100 DUP2 PUSH4 0xFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x8 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9 SWAP1 PUSH1 0x3 PUSH3 0x188 SWAP3 SWAP2 SWAP1 PUSH3 0x19E JUMP JUMPDEST POP DUP1 PUSH2 0x120 DUP2 DUP2 MSTORE POP POP POP POP POP POP POP POP PUSH3 0xA4C JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x1EB JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1EA JUMPI DUP3 MLOAD DUP3 SWAP1 DUP2 PUSH3 0x1D9 SWAP2 SWAP1 PUSH3 0x965 JUMP JUMPDEST POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1BF JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x1FA SWAP2 SWAP1 PUSH3 0x1FE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x222 JUMPI PUSH1 0x0 DUP2 DUP2 PUSH3 0x218 SWAP2 SWAP1 PUSH3 0x226 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH3 0x1FF JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH3 0x234 SWAP1 PUSH3 0x75E JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH3 0x248 JUMPI POP PUSH3 0x269 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH3 0x268 SWAP2 SWAP1 PUSH3 0x26C JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x287 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x26D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2CC DUP3 PUSH3 0x29F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2DE DUP2 PUSH3 0x2BF JUMP JUMPDEST DUP2 EQ PUSH3 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x2FE DUP2 PUSH3 0x2D3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x323 DUP2 PUSH3 0x304 JUMP JUMPDEST DUP2 EQ PUSH3 0x32F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x343 DUP2 PUSH3 0x318 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x35E DUP2 PUSH3 0x349 JUMP JUMPDEST DUP2 EQ PUSH3 0x36A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x37E DUP2 PUSH3 0x353 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x39F DUP2 PUSH3 0x384 JUMP JUMPDEST DUP2 EQ PUSH3 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x3BF DUP2 PUSH3 0x394 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x415 DUP3 PUSH3 0x3CA JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x437 JUMPI PUSH3 0x436 PUSH3 0x3DB JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x44C PUSH3 0x28B JUMP JUMPDEST SWAP1 POP PUSH3 0x45A DUP3 DUP3 PUSH3 0x40A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x47D JUMPI PUSH3 0x47C PUSH3 0x3DB JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x4B0 JUMPI PUSH3 0x4AF PUSH3 0x3DB JUMP JUMPDEST JUMPDEST PUSH3 0x4BB DUP3 PUSH3 0x3CA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x4E8 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x4CB JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x50B PUSH3 0x505 DUP5 PUSH3 0x492 JUMP JUMPDEST PUSH3 0x440 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x52A JUMPI PUSH3 0x529 PUSH3 0x48D JUMP JUMPDEST JUMPDEST PUSH3 0x537 DUP5 DUP3 DUP6 PUSH3 0x4C8 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x557 JUMPI PUSH3 0x556 PUSH3 0x3C5 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x569 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x4F4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x589 PUSH3 0x583 DUP5 PUSH3 0x45F JUMP JUMPDEST PUSH3 0x440 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH3 0x5A6 JUMPI PUSH3 0x5A5 PUSH3 0x488 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x5F4 JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5CF JUMPI PUSH3 0x5CE PUSH3 0x3C5 JUMP JUMPDEST JUMPDEST DUP1 DUP7 ADD PUSH3 0x5DE DUP10 DUP3 PUSH3 0x53F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x5A8 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x616 JUMPI PUSH3 0x615 PUSH3 0x3C5 JUMP JUMPDEST JUMPDEST PUSH1 0x3 PUSH3 0x625 DUP5 DUP3 DUP6 PUSH3 0x572 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x643 DUP2 PUSH3 0x62E JUMP JUMPDEST DUP2 EQ PUSH3 0x64F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x663 DUP2 PUSH3 0x638 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x689 JUMPI PUSH3 0x688 PUSH3 0x295 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x699 DUP10 DUP3 DUP11 ADD PUSH3 0x2ED JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x6AC DUP10 DUP3 DUP11 ADD PUSH3 0x332 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x6BF DUP10 DUP3 DUP11 ADD PUSH3 0x36D JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x6D2 DUP10 DUP3 DUP11 ADD PUSH3 0x3AE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x6F6 JUMPI PUSH3 0x6F5 PUSH3 0x29A JUMP JUMPDEST JUMPDEST PUSH3 0x704 DUP10 DUP3 DUP11 ADD PUSH3 0x5FE JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x717 DUP10 DUP3 DUP11 ADD PUSH3 0x652 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x777 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x78D JUMPI PUSH3 0x78C PUSH3 0x72F JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x7F7 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x7B8 JUMP JUMPDEST PUSH3 0x803 DUP7 DUP4 PUSH3 0x7B8 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x846 PUSH3 0x840 PUSH3 0x83A DUP5 PUSH3 0x62E JUMP JUMPDEST PUSH3 0x81B JUMP JUMPDEST PUSH3 0x62E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x862 DUP4 PUSH3 0x825 JUMP JUMPDEST PUSH3 0x87A PUSH3 0x871 DUP3 PUSH3 0x84D JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x7C5 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x891 PUSH3 0x882 JUMP JUMPDEST PUSH3 0x89E DUP2 DUP5 DUP5 PUSH3 0x857 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x8C6 JUMPI PUSH3 0x8BA PUSH1 0x0 DUP3 PUSH3 0x887 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x8A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x915 JUMPI PUSH3 0x8DF DUP2 PUSH3 0x793 JUMP JUMPDEST PUSH3 0x8EA DUP5 PUSH3 0x7A8 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x8FA JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x912 PUSH3 0x909 DUP6 PUSH3 0x7A8 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x8A3 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x93A PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x91A JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x955 DUP4 DUP4 PUSH3 0x927 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x970 DUP3 PUSH3 0x724 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x98C JUMPI PUSH3 0x98B PUSH3 0x3DB JUMP JUMPDEST JUMPDEST PUSH3 0x998 DUP3 SLOAD PUSH3 0x75E JUMP JUMPDEST PUSH3 0x9A5 DUP3 DUP3 DUP6 PUSH3 0x8CA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x9DD JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x9C8 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x9D4 DUP6 DUP3 PUSH3 0x947 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0xA44 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x9ED DUP7 PUSH3 0x793 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0xA17 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x9F0 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0xA37 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0xA33 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x927 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x317E PUSH3 0xAAA PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0xC07 ADD MSTORE PUSH2 0xD5F ADD MSTORE PUSH1 0x0 PUSH2 0xE39 ADD MSTORE PUSH1 0x0 PUSH2 0xDF5 ADD MSTORE PUSH1 0x0 PUSH2 0xE16 ADD MSTORE PUSH1 0x0 PUSH2 0xDB9 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x6BE ADD MSTORE PUSH2 0x712 ADD MSTORE PUSH2 0x317E PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xA36F573B EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0xAA152491 EQ PUSH2 0x4D6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x55A JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x73D9AA2B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x7A5CAAB3 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0x893D20E8 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x8A857201 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x445 JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x3AF25975 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x6E02007D EQ PUSH2 0x31F JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x213 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x227B JUMP JUMPDEST PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x197 PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0x68A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x247B JUMP JUMPDEST PUSH2 0x6A6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x2603 JUMP JUMPDEST PUSH2 0x6BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x263 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x265F JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x287 SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x299 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B7 PUSH2 0x92E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DB SWAP2 SWAP1 PUSH2 0x265F JUMP JUMPDEST PUSH2 0xA46 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xA66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x341 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36C SWAP2 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH2 0xA82 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37E SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xB3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x2780 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D9 PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E6 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x404 PUSH2 0xC2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42F PUSH2 0xC55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x43C SWAP2 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45A PUSH2 0xC80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x467 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x492 SWAP2 SWAP1 PUSH2 0x288D JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CD SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4DE PUSH2 0xD5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4EB SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x516 SWAP2 SWAP1 PUSH2 0x2982 JUMP JUMPDEST PUSH2 0xF58 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x544 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53F SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xF75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x581 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x2A05 JUMP JUMPDEST PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x5F1 JUMPI POP PUSH2 0x5F0 DUP3 PUSH2 0x111C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x607 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x633 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x680 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x655 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x680 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x663 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x695 DUP3 PUSH2 0x11FE JUMP JUMPDEST POP PUSH2 0x69F DUP3 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6B8 DUP3 DUP3 PUSH2 0x6B3 PUSH2 0x12C3 JUMP JUMPDEST PUSH2 0x12CB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76E JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x765 SWAP3 SWAP2 SWAP1 PUSH2 0x2AA5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x778 DUP3 DUP3 PUSH2 0x12DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7EE JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E5 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x802 DUP4 DUP4 PUSH2 0x7FD PUSH2 0x12C3 JUMP JUMPDEST PUSH2 0x148C JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x878 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x86F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2ACE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x894 JUMPI PUSH2 0x893 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x8A9 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8D5 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x922 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x922 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x905 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x94D PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x99A JUMPI PUSH1 0x40 MLOAD PUSH32 0xF65F0DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x9C5 SWAP1 PUSH2 0x2B65 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9F96A15000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA61 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF58 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP3 PUSH2 0x11FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAF5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAEC SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB47 PUSH2 0xC55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xBCB JUMPI DUP2 DUP6 LT ISZERO DUP1 ISZERO PUSH2 0xB7C JUMPI POP DUP3 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xB74 JUMPI PUSH2 0xB73 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP6 LT JUMPDEST ISZERO PUSH2 0xB9E JUMPI DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB94 JUMPI PUSH2 0xB93 PUSH2 0x2709 JUMP JUMPDEST JUMPDEST SWAP4 POP POP POP POP PUSH2 0xBFE JUMP JUMPDEST DUP3 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xBB1 JUMPI PUSH2 0xBB0 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP2 POP DUP1 DUP1 PUSH2 0xBC3 SWAP1 PUSH2 0x2BA9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB4D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xE9636ADD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC5D PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x64 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xC8F SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCBB SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD08 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCDD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD08 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCEB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD24 PUSH2 0xD1D PUSH2 0x12C3 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x16A6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0xDB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BB4756200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE7A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEBD SWAP2 SWAP1 PUSH2 0x2CD1 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xF873236E6CC0ECC5BE1A9A35C95EE5B8D1AC4CC7BFEF0CC5060391D6CC98E26B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP1 JUMP JUMPDEST PUSH2 0xF63 DUP5 DUP5 DUP5 PUSH2 0x77C JUMP JUMPDEST PUSH2 0xF6F DUP5 DUP5 DUP5 DUP5 PUSH2 0x1815 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF80 DUP3 PUSH2 0x11FE JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xFA1 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFCD SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x101A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFEF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x101A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFFD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x102B PUSH2 0x19CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1040 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1075 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x105D SWAP3 SWAP2 SWAP1 PUSH2 0x2D3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x1083 JUMP JUMPDEST PUSH2 0x107E DUP5 PUSH2 0x19E3 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x11E7 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x11F7 JUMPI POP PUSH2 0x11F6 DUP3 PUSH2 0x1A4C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x120A DUP4 PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x127D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1274 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x12D8 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1AF3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x8 SLOAD SWAP1 POP PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x132F SWAP1 PUSH2 0x2BA9 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x0 PUSH1 0x64 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x134C JUMPI PUSH2 0x134B PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x135E SWAP2 SWAP1 PUSH2 0x2D8D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x136B DUP3 PUSH2 0xB3C JUMP JUMPDEST SWAP1 POP PUSH2 0x1377 DUP5 DUP5 PUSH2 0x1CB8 JUMP JUMPDEST PUSH2 0x1439 DUP4 PUSH1 0x9 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1390 JUMPI PUSH2 0x138F PUSH2 0x2709 JUMP JUMPDEST JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x13A1 JUMPI PUSH2 0x13A0 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x13B6 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13E2 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x142F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1404 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x142F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1412 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x1CD6 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x144C JUMPI PUSH2 0x144B PUSH2 0x2709 JUMP JUMPDEST JUMPDEST DUP4 PUSH32 0x826D84DE86B9D47351AD75C90B9A8B7211E761E448CCD64623FC26341DD0B8DC DUP7 PUSH1 0x40 MLOAD PUSH2 0x147C SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1498 DUP5 PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14DA JUMPI PUSH2 0x14D9 DUP2 DUP5 DUP7 PUSH2 0x1D32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x156B JUMPI PUSH2 0x151C PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1AF3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15EE JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1717 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x170E SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1808 SWAP2 SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x19C6 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1859 PUSH2 0x12C3 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x187B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E13 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x18B7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18B4 SWAP2 SWAP1 PUSH2 0x2E74 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x193B JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1933 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x192A SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x19C4 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19BB SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19EE DUP3 PUSH2 0x11FE JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x19F9 PUSH2 0x19CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1A19 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A44 JUMP JUMPDEST DUP1 PUSH2 0x1A23 DUP5 PUSH2 0x1DF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A34 SWAP3 SWAP2 SWAP1 PUSH2 0x2D3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1B2C JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1C60 JUMPI PUSH1 0x0 PUSH2 0x1B3C DUP5 PUSH2 0x11FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1BA7 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1BBA JUMPI POP PUSH2 0x1BB8 DUP2 DUP5 PUSH2 0x1088 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1BFC JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BF3 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1C5E JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1CD2 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1EC4 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0x1CF6 SWAP2 SWAP1 PUSH2 0x304D JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1D26 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1D3D DUP4 DUP4 DUP4 PUSH2 0x1EE0 JUMP JUMPDEST PUSH2 0x1DF1 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DB2 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DA9 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DE8 SWAP3 SWAP2 SWAP1 PUSH2 0x311F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1E05 DUP5 PUSH2 0x1FA1 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E24 JUMPI PUSH2 0x1E23 PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E56 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1EB9 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1EAD JUMPI PUSH2 0x1EAC PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x1E64 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ECE DUP4 DUP4 PUSH2 0x20F4 JUMP JUMPDEST PUSH2 0x1EDB PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1815 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1F98 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1F59 JUMPI POP PUSH2 0x1F58 DUP5 DUP5 PUSH2 0x1088 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1F97 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1F7F DUP4 PUSH2 0x1286 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1FFF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1FF5 JUMPI PUSH2 0x1FF4 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x203C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2032 JUMPI PUSH2 0x2031 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x206B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2061 JUMPI PUSH2 0x2060 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2094 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x208A JUMPI PUSH2 0x2089 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x20B9 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x20AF JUMPI PUSH2 0x20AE PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x20DC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x20D2 JUMPI PUSH2 0x20D1 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x20EB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2166 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x215D SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2174 DUP4 DUP4 PUSH1 0x0 PUSH2 0x148C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21E8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21DF SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2258 DUP2 PUSH2 0x2223 JUMP JUMPDEST DUP2 EQ PUSH2 0x2263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2275 DUP2 PUSH2 0x224F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2291 JUMPI PUSH2 0x2290 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x229F DUP5 DUP3 DUP6 ADD PUSH2 0x2266 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22BD DUP2 PUSH2 0x22A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x22D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2318 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x22FD JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2340 DUP3 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x234A DUP2 DUP6 PUSH2 0x22E9 JUMP JUMPDEST SWAP4 POP PUSH2 0x235A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x22FA JUMP JUMPDEST PUSH2 0x2363 DUP2 PUSH2 0x2324 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2388 DUP2 DUP5 PUSH2 0x2335 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23A3 DUP2 PUSH2 0x2390 JUMP JUMPDEST DUP2 EQ PUSH2 0x23AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23C0 DUP2 PUSH2 0x239A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23DC JUMPI PUSH2 0x23DB PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23EA DUP5 DUP3 DUP6 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x241E DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x242E DUP2 PUSH2 0x2413 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2449 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2425 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2458 DUP2 PUSH2 0x2413 JUMP JUMPDEST DUP2 EQ PUSH2 0x2463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2475 DUP2 PUSH2 0x244F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2492 JUMPI PUSH2 0x2491 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24A0 DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24B1 DUP6 DUP3 DUP7 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x24F8 DUP3 PUSH2 0x2324 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2517 JUMPI PUSH2 0x2516 PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252A PUSH2 0x220F JUMP JUMPDEST SWAP1 POP PUSH2 0x2536 DUP3 DUP3 PUSH2 0x24EF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2556 JUMPI PUSH2 0x2555 PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x257F PUSH2 0x257A DUP5 PUSH2 0x253B JUMP JUMPDEST PUSH2 0x2520 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x25A2 JUMPI PUSH2 0x25A1 PUSH2 0x2567 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x25CB JUMPI DUP1 PUSH2 0x25B7 DUP9 DUP3 PUSH2 0x23B1 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25A4 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25EA JUMPI PUSH2 0x25E9 PUSH2 0x24BB JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x25FA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x256C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x261A JUMPI PUSH2 0x2619 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2628 DUP6 DUP3 DUP7 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2649 JUMPI PUSH2 0x2648 PUSH2 0x221E JUMP JUMPDEST JUMPDEST PUSH2 0x2655 DUP6 DUP3 DUP7 ADD PUSH2 0x25D5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2678 JUMPI PUSH2 0x2677 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2686 DUP7 DUP3 DUP8 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2697 DUP7 DUP3 DUP8 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x26A8 DUP7 DUP3 DUP8 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x26BB DUP2 PUSH2 0x2390 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26D6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26B2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26F2 JUMPI PUSH2 0x26F1 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2700 DUP5 DUP3 DUP6 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x2749 JUMPI PUSH2 0x2748 PUSH2 0x2709 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x275A DUP3 PUSH2 0x2738 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x276A DUP3 PUSH2 0x274C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x277A DUP2 PUSH2 0x275F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2795 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2771 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27C4 DUP2 PUSH2 0x2390 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27D6 DUP4 DUP4 PUSH2 0x27BB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27F8 DUP2 PUSH2 0x279B JUMP JUMPDEST PUSH2 0x2802 DUP2 DUP5 PUSH2 0x27A6 JUMP JUMPDEST SWAP3 POP PUSH2 0x280D DUP3 PUSH2 0x27B1 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x283E JUMPI DUP2 MLOAD PUSH2 0x2825 DUP8 DUP3 PUSH2 0x27CA JUMP JUMPDEST SWAP7 POP PUSH2 0x2830 DUP4 PUSH2 0x27E2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2811 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x285B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x286A DUP2 PUSH2 0x22A8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2887 DUP2 PUSH2 0x2861 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28A4 JUMPI PUSH2 0x28A3 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28C3 DUP6 DUP3 DUP7 ADD PUSH2 0x2878 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x28ED JUMPI PUSH2 0x28EC PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH2 0x28F6 DUP3 PUSH2 0x2324 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2925 PUSH2 0x2920 DUP5 PUSH2 0x28D2 JUMP JUMPDEST PUSH2 0x2520 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2941 JUMPI PUSH2 0x2940 PUSH2 0x28CD JUMP JUMPDEST JUMPDEST PUSH2 0x294C DUP5 DUP3 DUP6 PUSH2 0x2903 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2969 JUMPI PUSH2 0x2968 PUSH2 0x24BB JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2979 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2912 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x299C JUMPI PUSH2 0x299B PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29AA DUP8 DUP3 DUP9 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x29BB DUP8 DUP3 DUP9 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x29CC DUP8 DUP3 DUP9 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29ED JUMPI PUSH2 0x29EC PUSH2 0x221E JUMP JUMPDEST JUMPDEST PUSH2 0x29F9 DUP8 DUP3 DUP9 ADD PUSH2 0x2954 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A1C JUMPI PUSH2 0x2A1B PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A2A DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2A3B DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2A8C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2A9F JUMPI PUSH2 0x2A9E PUSH2 0x2A45 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2ABA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2AC7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2425 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2AE3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2AF0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26B2 JUMP JUMPDEST PUSH2 0x2AFD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2425 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B4F PUSH1 0x0 DUP4 PUSH2 0x2B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B5A DUP3 PUSH2 0x2B3F JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B70 DUP3 PUSH2 0x2B42 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2BB4 DUP3 PUSH2 0x2390 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2BE6 JUMPI PUSH2 0x2BE5 PUSH2 0x2B7A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C04 DUP2 PUSH2 0x2BF1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C27 DUP2 PUSH2 0x2C0A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C44 DUP2 PUSH2 0x2C2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C63 DUP2 PUSH2 0x2C4A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2C7E PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2BFB JUMP JUMPDEST PUSH2 0x2C8B PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2C1E JUMP JUMPDEST PUSH2 0x2C98 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2C3B JUMP JUMPDEST PUSH2 0x2CA5 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2C5A JUMP JUMPDEST PUSH2 0x2CB2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2C5A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2CCB DUP2 PUSH2 0x239A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CE7 JUMPI PUSH2 0x2CE6 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CF5 DUP5 DUP3 DUP6 ADD PUSH2 0x2CBC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D14 DUP3 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x2D1E DUP2 DUP6 PUSH2 0x2CFE JUMP JUMPDEST SWAP4 POP PUSH2 0x2D2E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x22FA JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D46 DUP3 DUP6 PUSH2 0x2D09 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D52 DUP3 DUP5 PUSH2 0x2D09 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D98 DUP3 PUSH2 0x2390 JUMP JUMPDEST SWAP2 POP PUSH2 0x2DA3 DUP4 PUSH2 0x2390 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2DB3 JUMPI PUSH2 0x2DB2 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE5 DUP3 PUSH2 0x2DBE JUMP JUMPDEST PUSH2 0x2DEF DUP2 DUP6 PUSH2 0x2DC9 JUMP JUMPDEST SWAP4 POP PUSH2 0x2DFF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x22FA JUMP JUMPDEST PUSH2 0x2E08 DUP2 PUSH2 0x2324 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2E28 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2E35 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2E42 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x26B2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2E54 DUP2 DUP5 PUSH2 0x2DDA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E6E DUP2 PUSH2 0x224F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E8A JUMPI PUSH2 0x2E89 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E98 DUP5 DUP3 DUP6 ADD PUSH2 0x2E5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x2F03 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2EC6 JUMP JUMPDEST PUSH2 0x2F0D DUP7 DUP4 PUSH2 0x2EC6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F4A PUSH2 0x2F45 PUSH2 0x2F40 DUP5 PUSH2 0x2390 JUMP JUMPDEST PUSH2 0x2F25 JUMP JUMPDEST PUSH2 0x2390 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F64 DUP4 PUSH2 0x2F2F JUMP JUMPDEST PUSH2 0x2F78 PUSH2 0x2F70 DUP3 PUSH2 0x2F51 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2ED3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F8D PUSH2 0x2F80 JUMP JUMPDEST PUSH2 0x2F98 DUP2 DUP5 DUP5 PUSH2 0x2F5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2FBC JUMPI PUSH2 0x2FB1 PUSH1 0x0 DUP3 PUSH2 0x2F85 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2F9E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3001 JUMPI PUSH2 0x2FD2 DUP2 PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x2FDB DUP5 PUSH2 0x2EB6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2FEA JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x2FFE PUSH2 0x2FF6 DUP6 PUSH2 0x2EB6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x2F9D JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3024 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3006 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x303D DUP4 DUP4 PUSH2 0x3013 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3056 DUP3 PUSH2 0x22DE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x306F JUMPI PUSH2 0x306E PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH2 0x3079 DUP3 SLOAD PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x3084 DUP3 DUP3 DUP6 PUSH2 0x2FC0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x30B7 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x30A5 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x30AF DUP6 DUP3 PUSH2 0x3031 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3117 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x30C5 DUP7 PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x30ED JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x30C8 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x310A JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3106 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3013 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3134 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x3141 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26B2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xD0 PUSH31 0xC5E1D8A224271BF3A2D285B387108E050AA5C8429ED67CDCC2BD32977E6473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"546:3524:24:-:0;;;1405:495;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1381:113:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1577:16:24;5616:15:6;5599:32;;;;;;;;;;5556:80;1455:5:12;1447;:13;;;;;;:::i;:::-;;1480:7;1470;:17;;;;;;:::i;:::-;;1381:113;;1682:16:24::2;1635:64;;;;;;;;::::0;::::2;1725:14;1706:33;;;;;;;;::::0;::::2;1758:7;1746:19;;;;::::0;::::2;1793:16;1772:37;;;;;;;;::::0;::::2;1833:1;1816:14;:18;;;;1858:12;1841:14;:29;;;;;;;:::i;:::-;;1889:7;1877:19;;;;::::0;::::2;1405:495:::0;;;;;;546:3524;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:27:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:101::-;881:7;921:18;914:5;910:30;899:41;;845:101;;;:::o;952:120::-;1024:23;1041:5;1024:23;:::i;:::-;1017:5;1014:34;1004:62;;1062:1;1059;1052:12;1004:62;952:120;:::o;1078:141::-;1134:5;1165:6;1159:13;1150:22;;1181:32;1207:5;1181:32;:::i;:::-;1078:141;;;;:::o;1225:77::-;1262:7;1291:5;1280:16;;1225:77;;;:::o;1308:122::-;1381:24;1399:5;1381:24;:::i;:::-;1374:5;1371:35;1361:63;;1420:1;1417;1410:12;1361:63;1308:122;:::o;1436:143::-;1493:5;1524:6;1518:13;1509:22;;1540:33;1567:5;1540:33;:::i;:::-;1436:143;;;;:::o;1585:93::-;1621:7;1661:10;1654:5;1650:22;1639:33;;1585:93;;;:::o;1684:120::-;1756:23;1773:5;1756:23;:::i;:::-;1749:5;1746:34;1736:62;;1794:1;1791;1784:12;1736:62;1684:120;:::o;1810:141::-;1866:5;1897:6;1891:13;1882:22;;1913:32;1939:5;1913:32;:::i;:::-;1810:141;;;;:::o;1957:117::-;2066:1;2063;2056:12;2080:102;2121:6;2172:2;2168:7;2163:2;2156:5;2152:14;2148:28;2138:38;;2080:102;;;:::o;2188:180::-;2236:77;2233:1;2226:88;2333:4;2330:1;2323:15;2357:4;2354:1;2347:15;2374:281;2457:27;2479:4;2457:27;:::i;:::-;2449:6;2445:40;2587:6;2575:10;2572:22;2551:18;2539:10;2536:34;2533:62;2530:88;;;2598:18;;:::i;:::-;2530:88;2638:10;2634:2;2627:22;2417:238;2374:281;;:::o;2661:129::-;2695:6;2722:20;;:::i;:::-;2712:30;;2751:33;2779:4;2771:6;2751:33;:::i;:::-;2661:129;;;:::o;2796:259::-;2881:4;2971:18;2963:6;2960:30;2957:56;;;2993:18;;:::i;:::-;2957:56;3043:4;3035:6;3031:17;3023:25;;2796:259;;;:::o;3061:117::-;3170:1;3167;3160:12;3184:117;3293:1;3290;3283:12;3307:308;3369:4;3459:18;3451:6;3448:30;3445:56;;;3481:18;;:::i;:::-;3445:56;3519:29;3541:6;3519:29;:::i;:::-;3511:37;;3603:4;3597;3593:15;3585:23;;3307:308;;;:::o;3621:246::-;3702:1;3712:113;3726:6;3723:1;3720:13;3712:113;;;3811:1;3806:3;3802:11;3796:18;3792:1;3787:3;3783:11;3776:39;3748:2;3745:1;3741:10;3736:15;;3712:113;;;3859:1;3850:6;3845:3;3841:16;3834:27;3683:184;3621:246;;;:::o;3873:434::-;3962:5;3987:66;4003:49;4045:6;4003:49;:::i;:::-;3987:66;:::i;:::-;3978:75;;4076:6;4069:5;4062:21;4114:4;4107:5;4103:16;4152:3;4143:6;4138:3;4134:16;4131:25;4128:112;;;4159:79;;:::i;:::-;4128:112;4249:52;4294:6;4289:3;4284;4249:52;:::i;:::-;3968:339;3873:434;;;;;:::o;4327:355::-;4394:5;4443:3;4436:4;4428:6;4424:17;4420:27;4410:122;;4451:79;;:::i;:::-;4410:122;4561:6;4555:13;4586:90;4672:3;4664:6;4657:4;4649:6;4645:17;4586:90;:::i;:::-;4577:99;;4400:282;4327:355;;;;:::o;4705:893::-;4820:5;4845:89;4861:72;4926:6;4861:72;:::i;:::-;4845:89;:::i;:::-;4836:98;;4954:5;5007:4;4999:6;4995:17;4987:6;4983:30;5036:3;5028:6;5025:15;5022:122;;;5055:79;;:::i;:::-;5022:122;5170:6;5153:439;5187:6;5182:3;5179:15;5153:439;;;5269:3;5263:10;5305:18;5292:11;5289:35;5286:122;;;5327:79;;:::i;:::-;5286:122;5451:11;5443:6;5439:24;5489:58;5543:3;5531:10;5489:58;:::i;:::-;5484:3;5477:71;5577:4;5572:3;5568:14;5561:21;;5229:363;;5213:4;5208:3;5204:14;5197:21;;5153:439;;;5157:21;4826:772;;4705:893;;;;;:::o;5621:381::-;5711:5;5760:3;5753:4;5745:6;5741:17;5737:27;5727:122;;5768:79;;:::i;:::-;5727:122;5872:4;5894:102;5992:3;5984:6;5976;5894:102;:::i;:::-;5885:111;;5717:285;5621:381;;;;:::o;6008:77::-;6045:7;6074:5;6063:16;;6008:77;;;:::o;6091:122::-;6164:24;6182:5;6164:24;:::i;:::-;6157:5;6154:35;6144:63;;6203:1;6200;6193:12;6144:63;6091:122;:::o;6219:143::-;6276:5;6307:6;6301:13;6292:22;;6323:33;6350:5;6323:33;:::i;:::-;6219:143;;;;:::o;6368:1349::-;6514:6;6522;6530;6538;6546;6554;6603:3;6591:9;6582:7;6578:23;6574:33;6571:120;;;6610:79;;:::i;:::-;6571:120;6730:1;6755:64;6811:7;6802:6;6791:9;6787:22;6755:64;:::i;:::-;6745:74;;6701:128;6868:2;6894:63;6949:7;6940:6;6929:9;6925:22;6894:63;:::i;:::-;6884:73;;6839:128;7006:2;7032:64;7088:7;7079:6;7068:9;7064:22;7032:64;:::i;:::-;7022:74;;6977:129;7145:2;7171:63;7226:7;7217:6;7206:9;7202:22;7171:63;:::i;:::-;7161:73;;7116:128;7304:3;7293:9;7289:19;7283:26;7336:18;7328:6;7325:30;7322:117;;;7358:79;;:::i;:::-;7322:117;7463:97;7552:7;7543:6;7532:9;7528:22;7463:97;:::i;:::-;7453:107;;7254:316;7609:3;7636:64;7692:7;7683:6;7672:9;7668:22;7636:64;:::i;:::-;7626:74;;7580:130;6368:1349;;;;;;;;:::o;7723:99::-;7775:6;7809:5;7803:12;7793:22;;7723:99;;;:::o;7828:180::-;7876:77;7873:1;7866:88;7973:4;7970:1;7963:15;7997:4;7994:1;7987:15;8014:320;8058:6;8095:1;8089:4;8085:12;8075:22;;8142:1;8136:4;8132:12;8163:18;8153:81;;8219:4;8211:6;8207:17;8197:27;;8153:81;8281:2;8273:6;8270:14;8250:18;8247:38;8244:84;;8300:18;;:::i;:::-;8244:84;8065:269;8014:320;;;:::o;8340:141::-;8389:4;8412:3;8404:11;;8435:3;8432:1;8425:14;8469:4;8466:1;8456:18;8448:26;;8340:141;;;:::o;8487:93::-;8524:6;8571:2;8566;8559:5;8555:14;8551:23;8541:33;;8487:93;;;:::o;8586:107::-;8630:8;8680:5;8674:4;8670:16;8649:37;;8586:107;;;;:::o;8699:393::-;8768:6;8818:1;8806:10;8802:18;8841:97;8871:66;8860:9;8841:97;:::i;:::-;8959:39;8989:8;8978:9;8959:39;:::i;:::-;8947:51;;9031:4;9027:9;9020:5;9016:21;9007:30;;9080:4;9070:8;9066:19;9059:5;9056:30;9046:40;;8775:317;;8699:393;;;;;:::o;9098:60::-;9126:3;9147:5;9140:12;;9098:60;;;:::o;9164:142::-;9214:9;9247:53;9265:34;9274:24;9292:5;9274:24;:::i;:::-;9265:34;:::i;:::-;9247:53;:::i;:::-;9234:66;;9164:142;;;:::o;9312:75::-;9355:3;9376:5;9369:12;;9312:75;;;:::o;9393:269::-;9503:39;9534:7;9503:39;:::i;:::-;9564:91;9613:41;9637:16;9613:41;:::i;:::-;9605:6;9598:4;9592:11;9564:91;:::i;:::-;9558:4;9551:105;9469:193;9393:269;;;:::o;9668:73::-;9713:3;9668:73;:::o;9747:189::-;9824:32;;:::i;:::-;9865:65;9923:6;9915;9909:4;9865:65;:::i;:::-;9800:136;9747:189;;:::o;9942:186::-;10002:120;10019:3;10012:5;10009:14;10002:120;;;10073:39;10110:1;10103:5;10073:39;:::i;:::-;10046:1;10039:5;10035:13;10026:22;;10002:120;;;9942:186;;:::o;10134:543::-;10235:2;10230:3;10227:11;10224:446;;;10269:38;10301:5;10269:38;:::i;:::-;10353:29;10371:10;10353:29;:::i;:::-;10343:8;10339:44;10536:2;10524:10;10521:18;10518:49;;;10557:8;10542:23;;10518:49;10580:80;10636:22;10654:3;10636:22;:::i;:::-;10626:8;10622:37;10609:11;10580:80;:::i;:::-;10239:431;;10224:446;10134:543;;;:::o;10683:117::-;10737:8;10787:5;10781:4;10777:16;10756:37;;10683:117;;;;:::o;10806:169::-;10850:6;10883:51;10931:1;10927:6;10919:5;10916:1;10912:13;10883:51;:::i;:::-;10879:56;10964:4;10958;10954:15;10944:25;;10857:118;10806:169;;;;:::o;10980:295::-;11056:4;11202:29;11227:3;11221:4;11202:29;:::i;:::-;11194:37;;11264:3;11261:1;11257:11;11251:4;11248:21;11240:29;;10980:295;;;;:::o;11280:1395::-;11397:37;11430:3;11397:37;:::i;:::-;11499:18;11491:6;11488:30;11485:56;;;11521:18;;:::i;:::-;11485:56;11565:38;11597:4;11591:11;11565:38;:::i;:::-;11650:67;11710:6;11702;11696:4;11650:67;:::i;:::-;11744:1;11768:4;11755:17;;11800:2;11792:6;11789:14;11817:1;11812:618;;;;12474:1;12491:6;12488:77;;;12540:9;12535:3;12531:19;12525:26;12516:35;;12488:77;12591:67;12651:6;12644:5;12591:67;:::i;:::-;12585:4;12578:81;12447:222;11782:887;;11812:618;11864:4;11860:9;11852:6;11848:22;11898:37;11930:4;11898:37;:::i;:::-;11957:1;11971:208;11985:7;11982:1;11979:14;11971:208;;;12064:9;12059:3;12055:19;12049:26;12041:6;12034:42;12115:1;12107:6;12103:14;12093:24;;12162:2;12151:9;12147:18;12134:31;;12008:4;12005:1;12001:12;11996:17;;11971:208;;;12207:6;12198:7;12195:19;12192:179;;;12265:9;12260:3;12256:19;12250:26;12308:48;12350:4;12342:6;12338:17;12327:9;12308:48;:::i;:::-;12300:6;12293:64;12215:156;12192:179;12417:1;12413;12405:6;12401:14;12397:22;12391:4;12384:36;11819:611;;;11782:887;;11372:1303;;;11280:1395;;:::o;546:3524:24:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_approve_2505":{"entryPoint":4811,"id":2505,"parameterSlots":3,"returnSlots":0},"@_approve_2571":{"entryPoint":6899,"id":2571,"parameterSlots":4,"returnSlots":0},"@_baseURI_1898":{"entryPoint":6604,"id":1898,"parameterSlots":0,"returnSlots":1},"@_checkAuthorized_2153":{"entryPoint":7474,"id":2153,"parameterSlots":3,"returnSlots":0},"@_checkOnERC721Received_2701":{"entryPoint":6165,"id":2701,"parameterSlots":4,"returnSlots":0},"@_getApproved_2080":{"entryPoint":4742,"id":2080,"parameterSlots":1,"returnSlots":1},"@_isAuthorized_2116":{"entryPoint":7904,"id":2116,"parameterSlots":3,"returnSlots":1},"@_mint_2309":{"entryPoint":8436,"id":2309,"parameterSlots":2,"returnSlots":0},"@_msgSender_3003":{"entryPoint":4803,"id":3003,"parameterSlots":0,"returnSlots":1},"@_ownerOf_2067":{"entryPoint":6838,"id":2067,"parameterSlots":1,"returnSlots":1},"@_requireOwned_2637":{"entryPoint":4606,"id":2637,"parameterSlots":1,"returnSlots":1},"@_safeMint_2324":{"entryPoint":7352,"id":2324,"parameterSlots":2,"returnSlots":0},"@_safeMint_2350":{"entryPoint":7876,"id":2350,"parameterSlots":3,"returnSlots":0},"@_setApprovalForAll_2608":{"entryPoint":5798,"id":2608,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_2962":{"entryPoint":7382,"id":2962,"parameterSlots":2,"returnSlots":0},"@_update_2259":{"entryPoint":5260,"id":2259,"parameterSlots":3,"returnSlots":1},"@approve_1914":{"entryPoint":1702,"id":1914,"parameterSlots":2,"returnSlots":0},"@balanceOf_1822":{"entryPoint":2690,"id":1822,"parameterSlots":1,"returnSlots":1},"@fulfillRandomWords_4750":{"entryPoint":4829,"id":4750,"parameterSlots":2,"returnSlots":0},"@getApproved_1931":{"entryPoint":1674,"id":1931,"parameterSlots":1,"returnSlots":1},"@getBreedFromRandomNum_4822":{"entryPoint":2876,"id":4822,"parameterSlots":1,"returnSlots":1},"@getChancesArray_4763":{"entryPoint":3157,"id":4763,"parameterSlots":0,"returnSlots":1},"@getDogTokenUris_4892":{"entryPoint":2174,"id":4892,"parameterSlots":1,"returnSlots":1},"@getMintFee_4880":{"entryPoint":3075,"id":4880,"parameterSlots":0,"returnSlots":1},"@getOwner_4830":{"entryPoint":3115,"id":4830,"parameterSlots":0,"returnSlots":1},"@getTokenCounter_4900":{"entryPoint":2680,"id":4900,"parameterSlots":0,"returnSlots":1},"@isApprovedForAll_1964":{"entryPoint":4232,"id":1964,"parameterSlots":2,"returnSlots":1},"@log10_4186":{"entryPoint":8097,"id":4186,"parameterSlots":1,"returnSlots":1},"@name_1844":{"entryPoint":1528,"id":1844,"parameterSlots":0,"returnSlots":1},"@ownerOf_1835":{"entryPoint":2662,"id":1835,"parameterSlots":1,"returnSlots":1},"@rawFulfillRandomWords_1375":{"entryPoint":1724,"id":1375,"parameterSlots":2,"returnSlots":0},"@requestNft_4691":{"entryPoint":3419,"id":4691,"parameterSlots":0,"returnSlots":1},"@s_requestIdToSender_4566":{"entryPoint":3368,"id":4566,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_2028":{"entryPoint":2630,"id":2028,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_2054":{"entryPoint":3928,"id":2054,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1947":{"entryPoint":3346,"id":1947,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1794":{"entryPoint":4380,"id":1794,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2886":{"entryPoint":1431,"id":2886,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3299":{"entryPoint":6732,"id":3299,"parameterSlots":1,"returnSlots":1},"@symbol_1853":{"entryPoint":3200,"id":1853,"parameterSlots":0,"returnSlots":1},"@toString_3089":{"entryPoint":7670,"id":3089,"parameterSlots":1,"returnSlots":1},"@tokenURI_1889":{"entryPoint":6627,"id":1889,"parameterSlots":1,"returnSlots":1},"@tokenURI_2943":{"entryPoint":3957,"id":2943,"parameterSlots":1,"returnSlots":1},"@transferFrom_2010":{"entryPoint":1916,"id":2010,"parameterSlots":3,"returnSlots":0},"@withdraw_4872":{"entryPoint":2350,"id":4872,"parameterSlots":0,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9580,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":10514,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":9318,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9685,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":10360,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":8806,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":11871,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":10580,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":9137,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":11452,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":9948,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":10757,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":9823,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":10626,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":10381,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9339,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8827,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11892,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9158,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":11473,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9731,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":10186,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":9253,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack":{"entryPoint":10223,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":8884,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":11259,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11738,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_Breed_$4582_to_t_uint8_fromStack":{"entryPoint":10097,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":9013,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11529,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11074,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":11323,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":10171,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":9906,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":11354,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":11294,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11578,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11109,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":9268,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":10917,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11795,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":12575,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":10958,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed":{"entryPoint":10310,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":8899,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":11369,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_Breed_$4582__to_t_uint8__fromStack_reversed":{"entryPoint":10112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9070,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":9921,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":9504,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":8719,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":9531,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":10450,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":10161,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":11937,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":10139,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11710,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":8926,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":10210,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack":{"entryPoint":10150,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":11721,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11060,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":8937,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":11518,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":12224,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_address":{"entryPoint":9235,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":8872,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":11249,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":8739,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_Breed_$4582":{"entryPoint":10060,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":11309,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":9203,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9104,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":11338,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":11274,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":12189,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_enum$_Breed_$4582_to_t_uint8":{"entryPoint":10079,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint256_to_t_uint256":{"entryPoint":12079,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":12365,"id":null,"parameterSlots":2,"returnSlots":0},"copy_calldata_to_memory_with_cleanup":{"entryPoint":10499,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":8954,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":11958,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":10868,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":12337,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":9455,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":12069,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":11177,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":12307,"id":null,"parameterSlots":2,"returnSlots":1},"mod_t_uint256":{"entryPoint":11661,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":11130,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":11614,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":9993,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":10821,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":11013,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":9408,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":12113,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":9403,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":9575,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":10445,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":8734,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":8729,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":8996,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":11974,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":12294,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":12165,"id":null,"parameterSlots":2,"returnSlots":0},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":11071,"id":null,"parameterSlots":1,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":11987,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":12123,"id":null,"parameterSlots":3,"returnSlots":0},"validator_assert_t_enum$_Breed_$4582":{"entryPoint":10040,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":9295,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":10337,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":8783,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9114,"id":null,"parameterSlots":1,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":12160,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:28378:27","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:27","statements":[{"nodeType":"YulAssignment","src":"57:19:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:27","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:27"},"nodeType":"YulFunctionCall","src":"67:9:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:27"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:27","type":""}],"src":"7:75:27"},{"body":{"nodeType":"YulBlock","src":"177:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:27"},"nodeType":"YulFunctionCall","src":"187:12:27"},"nodeType":"YulExpressionStatement","src":"187:12:27"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:27"},{"body":{"nodeType":"YulBlock","src":"300:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:27"},"nodeType":"YulFunctionCall","src":"310:12:27"},"nodeType":"YulExpressionStatement","src":"310:12:27"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:27"},{"body":{"nodeType":"YulBlock","src":"378:105:27","statements":[{"nodeType":"YulAssignment","src":"388:89:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:27","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:27"},"nodeType":"YulFunctionCall","src":"399:78:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:27"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:27","type":""}],"src":"334:149:27"},{"body":{"nodeType":"YulBlock","src":"531:78:27","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:27"},"nodeType":"YulFunctionCall","src":"589:12:27"},"nodeType":"YulExpressionStatement","src":"589:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:27"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:27"},"nodeType":"YulFunctionCall","src":"561:23:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:27"},"nodeType":"YulFunctionCall","src":"551:34:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:27"},"nodeType":"YulFunctionCall","src":"544:42:27"},"nodeType":"YulIf","src":"541:62:27"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:27","type":""}],"src":"489:120:27"},{"body":{"nodeType":"YulBlock","src":"666:86:27","statements":[{"nodeType":"YulAssignment","src":"676:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:27"},"nodeType":"YulFunctionCall","src":"685:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:27"},"nodeType":"YulFunctionCall","src":"714:32:27"},"nodeType":"YulExpressionStatement","src":"714:32:27"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:27","type":""}],"src":"615:137:27"},{"body":{"nodeType":"YulBlock","src":"823:262:27","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:27"},"nodeType":"YulFunctionCall","src":"871:79:27"},"nodeType":"YulExpressionStatement","src":"871:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:27"},"nodeType":"YulFunctionCall","src":"840:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:27"},"nodeType":"YulFunctionCall","src":"836:32:27"},"nodeType":"YulIf","src":"833:119:27"},{"nodeType":"YulBlock","src":"962:116:27","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:27","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:27"},"nodeType":"YulFunctionCall","src":"1036:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:27"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:27"},"nodeType":"YulFunctionCall","src":"1016:52:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:27","type":""}],"src":"758:327:27"},{"body":{"nodeType":"YulBlock","src":"1133:48:27","statements":[{"nodeType":"YulAssignment","src":"1143:32:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:27"},"nodeType":"YulFunctionCall","src":"1161:13:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:27"},"nodeType":"YulFunctionCall","src":"1154:21:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:27"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:27","type":""}],"src":"1091:90:27"},{"body":{"nodeType":"YulBlock","src":"1246:50:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:27"},"nodeType":"YulFunctionCall","src":"1268:21:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:27"},"nodeType":"YulFunctionCall","src":"1256:34:27"},"nodeType":"YulExpressionStatement","src":"1256:34:27"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:27","type":""}],"src":"1187:109:27"},{"body":{"nodeType":"YulBlock","src":"1394:118:27","statements":[{"nodeType":"YulAssignment","src":"1404:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:27"},"nodeType":"YulFunctionCall","src":"1412:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:27"},"nodeType":"YulFunctionCall","src":"1487:17:27"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:27"},"nodeType":"YulFunctionCall","src":"1440:65:27"},"nodeType":"YulExpressionStatement","src":"1440:65:27"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:27","type":""}],"src":"1302:210:27"},{"body":{"nodeType":"YulBlock","src":"1577:40:27","statements":[{"nodeType":"YulAssignment","src":"1588:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:27"},"nodeType":"YulFunctionCall","src":"1598:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:27"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:27","type":""}],"src":"1518:99:27"},{"body":{"nodeType":"YulBlock","src":"1719:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:27"},"nodeType":"YulFunctionCall","src":"1729:19:27"},"nodeType":"YulExpressionStatement","src":"1729:19:27"},{"nodeType":"YulAssignment","src":"1757:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:27"},"nodeType":"YulFunctionCall","src":"1772:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:27","type":""}],"src":"1623:169:27"},{"body":{"nodeType":"YulBlock","src":"1860:184:27","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:27","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:27"},"nodeType":"YulFunctionCall","src":"1960:11:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:27"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:27"},"nodeType":"YulFunctionCall","src":"1979:11:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:27"},"nodeType":"YulFunctionCall","src":"1973:18:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:27"},"nodeType":"YulFunctionCall","src":"1953:39:27"},"nodeType":"YulExpressionStatement","src":"1953:39:27"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:27"},"nodeType":"YulFunctionCall","src":"1897:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:27","statements":[{"nodeType":"YulAssignment","src":"1913:15:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:27"},"nodeType":"YulFunctionCall","src":"1918:10:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:27","statements":[]},"src":"1889:113:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:27"},"nodeType":"YulFunctionCall","src":"2018:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:27"},"nodeType":"YulFunctionCall","src":"2011:27:27"},"nodeType":"YulExpressionStatement","src":"2011:27:27"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:27","type":""}],"src":"1798:246:27"},{"body":{"nodeType":"YulBlock","src":"2098:54:27","statements":[{"nodeType":"YulAssignment","src":"2108:38:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:27"},"nodeType":"YulFunctionCall","src":"2122:14:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:27","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:27"},"nodeType":"YulFunctionCall","src":"2138:7:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:27"},"nodeType":"YulFunctionCall","src":"2118:28:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:27"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:27","type":""}],"src":"2050:102:27"},{"body":{"nodeType":"YulBlock","src":"2250:285:27","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:27"},"nodeType":"YulFunctionCall","src":"2274:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:27","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:27"},"nodeType":"YulFunctionCall","src":"2329:71:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:27"},"nodeType":"YulFunctionCall","src":"2444:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:27"},"nodeType":"YulFunctionCall","src":"2409:65:27"},"nodeType":"YulExpressionStatement","src":"2409:65:27"},{"nodeType":"YulAssignment","src":"2483:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:27"},"nodeType":"YulFunctionCall","src":"2499:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:27"},"nodeType":"YulFunctionCall","src":"2490:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:27","type":""}],"src":"2158:377:27"},{"body":{"nodeType":"YulBlock","src":"2659:195:27","statements":[{"nodeType":"YulAssignment","src":"2669:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:27"},"nodeType":"YulFunctionCall","src":"2677:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:27"},"nodeType":"YulFunctionCall","src":"2712:17:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:27"},"nodeType":"YulFunctionCall","src":"2731:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:27"},"nodeType":"YulFunctionCall","src":"2705:47:27"},"nodeType":"YulExpressionStatement","src":"2705:47:27"},{"nodeType":"YulAssignment","src":"2761:86:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:27"},"nodeType":"YulFunctionCall","src":"2769:78:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:27"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:27","type":""}],"src":"2541:313:27"},{"body":{"nodeType":"YulBlock","src":"2905:32:27","statements":[{"nodeType":"YulAssignment","src":"2915:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:27"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:27","type":""}],"src":"2860:77:27"},{"body":{"nodeType":"YulBlock","src":"2986:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:27"},"nodeType":"YulFunctionCall","src":"3045:12:27"},"nodeType":"YulExpressionStatement","src":"3045:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:27"},"nodeType":"YulFunctionCall","src":"3016:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:27"},"nodeType":"YulFunctionCall","src":"3006:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:27"},"nodeType":"YulFunctionCall","src":"2999:43:27"},"nodeType":"YulIf","src":"2996:63:27"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:27","type":""}],"src":"2943:122:27"},{"body":{"nodeType":"YulBlock","src":"3123:87:27","statements":[{"nodeType":"YulAssignment","src":"3133:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:27"},"nodeType":"YulFunctionCall","src":"3142:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:27"},"nodeType":"YulFunctionCall","src":"3171:33:27"},"nodeType":"YulExpressionStatement","src":"3171:33:27"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:27","type":""}],"src":"3071:139:27"},{"body":{"nodeType":"YulBlock","src":"3282:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:27"},"nodeType":"YulFunctionCall","src":"3330:79:27"},"nodeType":"YulExpressionStatement","src":"3330:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:27"},"nodeType":"YulFunctionCall","src":"3299:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:27"},"nodeType":"YulFunctionCall","src":"3295:32:27"},"nodeType":"YulIf","src":"3292:119:27"},{"nodeType":"YulBlock","src":"3421:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:27","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:27"},"nodeType":"YulFunctionCall","src":"3496:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:27"},"nodeType":"YulFunctionCall","src":"3475:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:27","type":""}],"src":"3216:329:27"},{"body":{"nodeType":"YulBlock","src":"3596:81:27","statements":[{"nodeType":"YulAssignment","src":"3606:65:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:27"},"nodeType":"YulFunctionCall","src":"3617:54:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:27"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:27","type":""}],"src":"3551:126:27"},{"body":{"nodeType":"YulBlock","src":"3728:51:27","statements":[{"nodeType":"YulAssignment","src":"3738:35:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:27"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:27"},"nodeType":"YulFunctionCall","src":"3749:24:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:27"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:27","type":""}],"src":"3683:96:27"},{"body":{"nodeType":"YulBlock","src":"3850:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:27"},"nodeType":"YulFunctionCall","src":"3872:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:27"},"nodeType":"YulFunctionCall","src":"3860:37:27"},"nodeType":"YulExpressionStatement","src":"3860:37:27"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:27","type":""}],"src":"3785:118:27"},{"body":{"nodeType":"YulBlock","src":"4007:124:27","statements":[{"nodeType":"YulAssignment","src":"4017:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:27"},"nodeType":"YulFunctionCall","src":"4025:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:27"},"nodeType":"YulFunctionCall","src":"4106:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:27"},"nodeType":"YulFunctionCall","src":"4053:71:27"},"nodeType":"YulExpressionStatement","src":"4053:71:27"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:27","type":""}],"src":"3909:222:27"},{"body":{"nodeType":"YulBlock","src":"4180:79:27","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:27"},"nodeType":"YulFunctionCall","src":"4239:12:27"},"nodeType":"YulExpressionStatement","src":"4239:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:27"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:27"},"nodeType":"YulFunctionCall","src":"4210:24:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:27"},"nodeType":"YulFunctionCall","src":"4200:35:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:27"},"nodeType":"YulFunctionCall","src":"4193:43:27"},"nodeType":"YulIf","src":"4190:63:27"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:27","type":""}],"src":"4137:122:27"},{"body":{"nodeType":"YulBlock","src":"4317:87:27","statements":[{"nodeType":"YulAssignment","src":"4327:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:27"},"nodeType":"YulFunctionCall","src":"4336:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:27"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:27"},"nodeType":"YulFunctionCall","src":"4365:33:27"},"nodeType":"YulExpressionStatement","src":"4365:33:27"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:27","type":""}],"src":"4265:139:27"},{"body":{"nodeType":"YulBlock","src":"4493:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:27"},"nodeType":"YulFunctionCall","src":"4541:79:27"},"nodeType":"YulExpressionStatement","src":"4541:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:27"},"nodeType":"YulFunctionCall","src":"4510:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:27"},"nodeType":"YulFunctionCall","src":"4506:32:27"},"nodeType":"YulIf","src":"4503:119:27"},{"nodeType":"YulBlock","src":"4632:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:27"},"nodeType":"YulFunctionCall","src":"4707:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:27"},"nodeType":"YulFunctionCall","src":"4686:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:27"}]}]},{"nodeType":"YulBlock","src":"4759:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:27","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:27"},"nodeType":"YulFunctionCall","src":"4835:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:27"},"nodeType":"YulFunctionCall","src":"4814:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:27","type":""}],"src":"4410:474:27"},{"body":{"nodeType":"YulBlock","src":"4979:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4996:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4999:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4989:6:27"},"nodeType":"YulFunctionCall","src":"4989:12:27"},"nodeType":"YulExpressionStatement","src":"4989:12:27"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4890:117:27"},{"body":{"nodeType":"YulBlock","src":"5041:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5058:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5061:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5051:6:27"},"nodeType":"YulFunctionCall","src":"5051:88:27"},"nodeType":"YulExpressionStatement","src":"5051:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5155:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5158:4:27","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5148:6:27"},"nodeType":"YulFunctionCall","src":"5148:15:27"},"nodeType":"YulExpressionStatement","src":"5148:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5179:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5182:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5172:6:27"},"nodeType":"YulFunctionCall","src":"5172:15:27"},"nodeType":"YulExpressionStatement","src":"5172:15:27"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5013:180:27"},{"body":{"nodeType":"YulBlock","src":"5242:238:27","statements":[{"nodeType":"YulVariableDeclaration","src":"5252:58:27","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5274:6:27"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5304:4:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5282:21:27"},"nodeType":"YulFunctionCall","src":"5282:27:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5270:3:27"},"nodeType":"YulFunctionCall","src":"5270:40:27"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5256:10:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"5421:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5423:16:27"},"nodeType":"YulFunctionCall","src":"5423:18:27"},"nodeType":"YulExpressionStatement","src":"5423:18:27"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5364:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"5376:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5361:2:27"},"nodeType":"YulFunctionCall","src":"5361:34:27"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5400:10:27"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5412:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5397:2:27"},"nodeType":"YulFunctionCall","src":"5397:22:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5358:2:27"},"nodeType":"YulFunctionCall","src":"5358:62:27"},"nodeType":"YulIf","src":"5355:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5459:2:27","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5463:10:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5452:6:27"},"nodeType":"YulFunctionCall","src":"5452:22:27"},"nodeType":"YulExpressionStatement","src":"5452:22:27"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5228:6:27","type":""},{"name":"size","nodeType":"YulTypedName","src":"5236:4:27","type":""}],"src":"5199:281:27"},{"body":{"nodeType":"YulBlock","src":"5527:88:27","statements":[{"nodeType":"YulAssignment","src":"5537:30:27","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5547:18:27"},"nodeType":"YulFunctionCall","src":"5547:20:27"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5537:6:27"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5596:6:27"},{"name":"size","nodeType":"YulIdentifier","src":"5604:4:27"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5576:19:27"},"nodeType":"YulFunctionCall","src":"5576:33:27"},"nodeType":"YulExpressionStatement","src":"5576:33:27"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5511:4:27","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5520:6:27","type":""}],"src":"5486:129:27"},{"body":{"nodeType":"YulBlock","src":"5703:229:27","statements":[{"body":{"nodeType":"YulBlock","src":"5808:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5810:16:27"},"nodeType":"YulFunctionCall","src":"5810:18:27"},"nodeType":"YulExpressionStatement","src":"5810:18:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5780:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5788:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5777:2:27"},"nodeType":"YulFunctionCall","src":"5777:30:27"},"nodeType":"YulIf","src":"5774:56:27"},{"nodeType":"YulAssignment","src":"5840:25:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5852:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"5860:4:27","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5848:3:27"},"nodeType":"YulFunctionCall","src":"5848:17:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5840:4:27"}]},{"nodeType":"YulAssignment","src":"5902:23:27","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5914:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"5920:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5910:3:27"},"nodeType":"YulFunctionCall","src":"5910:15:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"5902:4:27"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"5687:6:27","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"5698:4:27","type":""}],"src":"5621:311:27"},{"body":{"nodeType":"YulBlock","src":"6027:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6044:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6047:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6037:6:27"},"nodeType":"YulFunctionCall","src":"6037:12:27"},"nodeType":"YulExpressionStatement","src":"6037:12:27"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"5938:117:27"},{"body":{"nodeType":"YulBlock","src":"6180:608:27","statements":[{"nodeType":"YulAssignment","src":"6190:90:27","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6272:6:27"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"6215:56:27"},"nodeType":"YulFunctionCall","src":"6215:64:27"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6199:15:27"},"nodeType":"YulFunctionCall","src":"6199:81:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6190:5:27"}]},{"nodeType":"YulVariableDeclaration","src":"6289:16:27","value":{"name":"array","nodeType":"YulIdentifier","src":"6300:5:27"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6293:3:27","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6322:5:27"},{"name":"length","nodeType":"YulIdentifier","src":"6329:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6315:6:27"},"nodeType":"YulFunctionCall","src":"6315:21:27"},"nodeType":"YulExpressionStatement","src":"6315:21:27"},{"nodeType":"YulAssignment","src":"6345:23:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6356:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"6363:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6352:3:27"},"nodeType":"YulFunctionCall","src":"6352:16:27"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6345:3:27"}]},{"nodeType":"YulVariableDeclaration","src":"6378:44:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6396:6:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6408:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6416:4:27","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6404:3:27"},"nodeType":"YulFunctionCall","src":"6404:17:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6392:3:27"},"nodeType":"YulFunctionCall","src":"6392:30:27"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6382:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"6450:103:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6464:77:27"},"nodeType":"YulFunctionCall","src":"6464:79:27"},"nodeType":"YulExpressionStatement","src":"6464:79:27"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6437:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"6445:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6434:2:27"},"nodeType":"YulFunctionCall","src":"6434:15:27"},"nodeType":"YulIf","src":"6431:122:27"},{"body":{"nodeType":"YulBlock","src":"6638:144:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6653:21:27","value":{"name":"src","nodeType":"YulIdentifier","src":"6671:3:27"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"6657:10:27","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6695:3:27"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"6721:10:27"},{"name":"end","nodeType":"YulIdentifier","src":"6733:3:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"6700:20:27"},"nodeType":"YulFunctionCall","src":"6700:37:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6688:6:27"},"nodeType":"YulFunctionCall","src":"6688:50:27"},"nodeType":"YulExpressionStatement","src":"6688:50:27"},{"nodeType":"YulAssignment","src":"6751:21:27","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6762:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"6767:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6758:3:27"},"nodeType":"YulFunctionCall","src":"6758:14:27"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6751:3:27"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6591:3:27"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6596:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6588:2:27"},"nodeType":"YulFunctionCall","src":"6588:15:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6604:25:27","statements":[{"nodeType":"YulAssignment","src":"6606:21:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6617:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"6622:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6613:3:27"},"nodeType":"YulFunctionCall","src":"6613:14:27"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"6606:3:27"}]}]},"pre":{"nodeType":"YulBlock","src":"6566:21:27","statements":[{"nodeType":"YulVariableDeclaration","src":"6568:17:27","value":{"name":"offset","nodeType":"YulIdentifier","src":"6579:6:27"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6572:3:27","type":""}]}]},"src":"6562:220:27"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6150:6:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"6158:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"6166:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6174:5:27","type":""}],"src":"6078:710:27"},{"body":{"nodeType":"YulBlock","src":"6888:293:27","statements":[{"body":{"nodeType":"YulBlock","src":"6937:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"6939:77:27"},"nodeType":"YulFunctionCall","src":"6939:79:27"},"nodeType":"YulExpressionStatement","src":"6939:79:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6916:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"6924:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6912:3:27"},"nodeType":"YulFunctionCall","src":"6912:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"6931:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6908:3:27"},"nodeType":"YulFunctionCall","src":"6908:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6901:6:27"},"nodeType":"YulFunctionCall","src":"6901:35:27"},"nodeType":"YulIf","src":"6898:122:27"},{"nodeType":"YulVariableDeclaration","src":"7029:34:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7056:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7043:12:27"},"nodeType":"YulFunctionCall","src":"7043:20:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7033:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7072:103:27","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7148:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7156:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7144:3:27"},"nodeType":"YulFunctionCall","src":"7144:17:27"},{"name":"length","nodeType":"YulIdentifier","src":"7163:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"7171:3:27"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7081:62:27"},"nodeType":"YulFunctionCall","src":"7081:94:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7072:5:27"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6866:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"6874:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6882:5:27","type":""}],"src":"6811:370:27"},{"body":{"nodeType":"YulBlock","src":"7295:576:27","statements":[{"body":{"nodeType":"YulBlock","src":"7341:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7343:77:27"},"nodeType":"YulFunctionCall","src":"7343:79:27"},"nodeType":"YulExpressionStatement","src":"7343:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7316:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"7325:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7312:3:27"},"nodeType":"YulFunctionCall","src":"7312:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"7337:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7308:3:27"},"nodeType":"YulFunctionCall","src":"7308:32:27"},"nodeType":"YulIf","src":"7305:119:27"},{"nodeType":"YulBlock","src":"7434:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7449:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"7463:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7453:6:27","type":""}]},{"nodeType":"YulAssignment","src":"7478:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7513:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7524:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7509:3:27"},"nodeType":"YulFunctionCall","src":"7509:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7533:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7488:20:27"},"nodeType":"YulFunctionCall","src":"7488:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7478:6:27"}]}]},{"nodeType":"YulBlock","src":"7561:303:27","statements":[{"nodeType":"YulVariableDeclaration","src":"7576:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7607:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"7618:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7603:3:27"},"nodeType":"YulFunctionCall","src":"7603:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7590:12:27"},"nodeType":"YulFunctionCall","src":"7590:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7580:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"7669:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"7671:77:27"},"nodeType":"YulFunctionCall","src":"7671:79:27"},"nodeType":"YulExpressionStatement","src":"7671:79:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7641:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"7649:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7638:2:27"},"nodeType":"YulFunctionCall","src":"7638:30:27"},"nodeType":"YulIf","src":"7635:117:27"},{"nodeType":"YulAssignment","src":"7766:88:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7826:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"7837:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7822:3:27"},"nodeType":"YulFunctionCall","src":"7822:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7846:7:27"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7776:45:27"},"nodeType":"YulFunctionCall","src":"7776:78:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7766:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7257:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7268:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7280:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7288:6:27","type":""}],"src":"7187:684:27"},{"body":{"nodeType":"YulBlock","src":"7977:519:27","statements":[{"body":{"nodeType":"YulBlock","src":"8023:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8025:77:27"},"nodeType":"YulFunctionCall","src":"8025:79:27"},"nodeType":"YulExpressionStatement","src":"8025:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7998:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8007:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7994:3:27"},"nodeType":"YulFunctionCall","src":"7994:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"8019:2:27","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7990:3:27"},"nodeType":"YulFunctionCall","src":"7990:32:27"},"nodeType":"YulIf","src":"7987:119:27"},{"nodeType":"YulBlock","src":"8116:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8131:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8145:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8135:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8160:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8195:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8206:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8191:3:27"},"nodeType":"YulFunctionCall","src":"8191:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8215:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8170:20:27"},"nodeType":"YulFunctionCall","src":"8170:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8160:6:27"}]}]},{"nodeType":"YulBlock","src":"8243:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8258:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8272:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8262:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8288:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8323:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8334:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8319:3:27"},"nodeType":"YulFunctionCall","src":"8319:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8343:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8298:20:27"},"nodeType":"YulFunctionCall","src":"8298:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8288:6:27"}]}]},{"nodeType":"YulBlock","src":"8371:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"8386:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"8400:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8390:6:27","type":""}]},{"nodeType":"YulAssignment","src":"8416:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8451:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"8462:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8447:3:27"},"nodeType":"YulFunctionCall","src":"8447:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8471:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8426:20:27"},"nodeType":"YulFunctionCall","src":"8426:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8416:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7931:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7942:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7954:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7962:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7970:6:27","type":""}],"src":"7877:619:27"},{"body":{"nodeType":"YulBlock","src":"8567:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8584:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8607:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8589:17:27"},"nodeType":"YulFunctionCall","src":"8589:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8577:6:27"},"nodeType":"YulFunctionCall","src":"8577:37:27"},"nodeType":"YulExpressionStatement","src":"8577:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8555:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8562:3:27","type":""}],"src":"8502:118:27"},{"body":{"nodeType":"YulBlock","src":"8724:124:27","statements":[{"nodeType":"YulAssignment","src":"8734:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8746:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8757:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8742:3:27"},"nodeType":"YulFunctionCall","src":"8742:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8734:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8814:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8827:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"8838:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8823:3:27"},"nodeType":"YulFunctionCall","src":"8823:17:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8770:43:27"},"nodeType":"YulFunctionCall","src":"8770:71:27"},"nodeType":"YulExpressionStatement","src":"8770:71:27"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8696:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8708:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8719:4:27","type":""}],"src":"8626:222:27"},{"body":{"nodeType":"YulBlock","src":"8920:263:27","statements":[{"body":{"nodeType":"YulBlock","src":"8966:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8968:77:27"},"nodeType":"YulFunctionCall","src":"8968:79:27"},"nodeType":"YulExpressionStatement","src":"8968:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8941:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"8950:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8937:3:27"},"nodeType":"YulFunctionCall","src":"8937:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"8962:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8933:3:27"},"nodeType":"YulFunctionCall","src":"8933:32:27"},"nodeType":"YulIf","src":"8930:119:27"},{"nodeType":"YulBlock","src":"9059:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"9074:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"9088:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9078:6:27","type":""}]},{"nodeType":"YulAssignment","src":"9103:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9138:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"9149:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9134:3:27"},"nodeType":"YulFunctionCall","src":"9134:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9158:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9113:20:27"},"nodeType":"YulFunctionCall","src":"9113:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9103:6:27"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8890:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8901:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8913:6:27","type":""}],"src":"8854:329:27"},{"body":{"nodeType":"YulBlock","src":"9217:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9234:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9237:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9227:6:27"},"nodeType":"YulFunctionCall","src":"9227:88:27"},"nodeType":"YulExpressionStatement","src":"9227:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9331:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9334:4:27","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9324:6:27"},"nodeType":"YulFunctionCall","src":"9324:15:27"},"nodeType":"YulExpressionStatement","src":"9324:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9355:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9358:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9348:6:27"},"nodeType":"YulFunctionCall","src":"9348:15:27"},"nodeType":"YulExpressionStatement","src":"9348:15:27"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"9189:180:27"},{"body":{"nodeType":"YulBlock","src":"9428:62:27","statements":[{"body":{"nodeType":"YulBlock","src":"9462:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"9464:16:27"},"nodeType":"YulFunctionCall","src":"9464:18:27"},"nodeType":"YulExpressionStatement","src":"9464:18:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9451:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"9458:1:27","type":"","value":"3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9448:2:27"},"nodeType":"YulFunctionCall","src":"9448:12:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9441:6:27"},"nodeType":"YulFunctionCall","src":"9441:20:27"},"nodeType":"YulIf","src":"9438:46:27"}]},"name":"validator_assert_t_enum$_Breed_$4582","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9421:5:27","type":""}],"src":"9375:115:27"},{"body":{"nodeType":"YulBlock","src":"9551:76:27","statements":[{"nodeType":"YulAssignment","src":"9561:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"9572:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"9561:7:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9615:5:27"}],"functionName":{"name":"validator_assert_t_enum$_Breed_$4582","nodeType":"YulIdentifier","src":"9578:36:27"},"nodeType":"YulFunctionCall","src":"9578:43:27"},"nodeType":"YulExpressionStatement","src":"9578:43:27"}]},"name":"cleanup_t_enum$_Breed_$4582","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9533:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"9543:7:27","type":""}],"src":"9496:131:27"},{"body":{"nodeType":"YulBlock","src":"9701:63:27","statements":[{"nodeType":"YulAssignment","src":"9711:47:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9752:5:27"}],"functionName":{"name":"cleanup_t_enum$_Breed_$4582","nodeType":"YulIdentifier","src":"9724:27:27"},"nodeType":"YulFunctionCall","src":"9724:34:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"9711:9:27"}]}]},"name":"convert_t_enum$_Breed_$4582_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9681:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"9691:9:27","type":""}],"src":"9633:131:27"},{"body":{"nodeType":"YulBlock","src":"9843:74:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9860:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9904:5:27"}],"functionName":{"name":"convert_t_enum$_Breed_$4582_to_t_uint8","nodeType":"YulIdentifier","src":"9865:38:27"},"nodeType":"YulFunctionCall","src":"9865:45:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9853:6:27"},"nodeType":"YulFunctionCall","src":"9853:58:27"},"nodeType":"YulExpressionStatement","src":"9853:58:27"}]},"name":"abi_encode_t_enum$_Breed_$4582_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9831:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9838:3:27","type":""}],"src":"9770:147:27"},{"body":{"nodeType":"YulBlock","src":"10029:132:27","statements":[{"nodeType":"YulAssignment","src":"10039:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10051:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10062:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10047:3:27"},"nodeType":"YulFunctionCall","src":"10047:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10039:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10127:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10140:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"10151:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10136:3:27"},"nodeType":"YulFunctionCall","src":"10136:17:27"}],"functionName":{"name":"abi_encode_t_enum$_Breed_$4582_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"10075:51:27"},"nodeType":"YulFunctionCall","src":"10075:79:27"},"nodeType":"YulExpressionStatement","src":"10075:79:27"}]},"name":"abi_encode_tuple_t_enum$_Breed_$4582__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10001:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10013:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10024:4:27","type":""}],"src":"9923:238:27"},{"body":{"nodeType":"YulBlock","src":"10239:32:27","statements":[{"nodeType":"YulAssignment","src":"10250:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"10260:4:27","type":"","value":"0x03"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10250:6:27"}]}]},"name":"array_length_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10222:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10232:6:27","type":""}],"src":"10167:104:27"},{"body":{"nodeType":"YulBlock","src":"10386:34:27","statements":[{"nodeType":"YulAssignment","src":"10396:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"10411:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10396:11:27"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10358:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"10363:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10374:11:27","type":""}],"src":"10277:143:27"},{"body":{"nodeType":"YulBlock","src":"10496:28:27","statements":[{"nodeType":"YulAssignment","src":"10506:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"10514:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"10506:4:27"}]}]},"name":"array_dataslot_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"10483:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"10491:4:27","type":""}],"src":"10426:98:27"},{"body":{"nodeType":"YulBlock","src":"10585:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10602:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10625:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10607:17:27"},"nodeType":"YulFunctionCall","src":"10607:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10595:6:27"},"nodeType":"YulFunctionCall","src":"10595:37:27"},"nodeType":"YulExpressionStatement","src":"10595:37:27"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10573:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10580:3:27","type":""}],"src":"10530:108:27"},{"body":{"nodeType":"YulBlock","src":"10724:99:27","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10768:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"10776:3:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"10734:33:27"},"nodeType":"YulFunctionCall","src":"10734:46:27"},"nodeType":"YulExpressionStatement","src":"10734:46:27"},{"nodeType":"YulAssignment","src":"10789:28:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10807:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"10812:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10803:3:27"},"nodeType":"YulFunctionCall","src":"10803:14:27"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"10789:10:27"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"10697:6:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10705:3:27","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"10713:10:27","type":""}],"src":"10644:179:27"},{"body":{"nodeType":"YulBlock","src":"10902:38:27","statements":[{"nodeType":"YulAssignment","src":"10912:22:27","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"10924:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"10929:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10920:3:27"},"nodeType":"YulFunctionCall","src":"10920:14:27"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"10912:4:27"}]}]},"name":"array_nextElement_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"10889:3:27","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"10897:4:27","type":""}],"src":"10829:111:27"},{"body":{"nodeType":"YulBlock","src":"11090:582:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11100:66:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11160:5:27"}],"functionName":{"name":"array_length_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"11114:45:27"},"nodeType":"YulFunctionCall","src":"11114:52:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11104:6:27","type":""}]},{"nodeType":"YulAssignment","src":"11175:91:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11254:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"11259:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11182:71:27"},"nodeType":"YulFunctionCall","src":"11182:84:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11175:3:27"}]},{"nodeType":"YulVariableDeclaration","src":"11275:69:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11338:5:27"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"11290:47:27"},"nodeType":"YulFunctionCall","src":"11290:54:27"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"11279:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11353:21:27","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"11367:7:27"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"11357:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"11443:222:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11457:34:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11484:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11478:5:27"},"nodeType":"YulFunctionCall","src":"11478:13:27"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"11461:13:27","type":""}]},{"nodeType":"YulAssignment","src":"11504:70:27","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"11555:13:27"},{"name":"pos","nodeType":"YulIdentifier","src":"11570:3:27"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"11511:43:27"},"nodeType":"YulFunctionCall","src":"11511:63:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11504:3:27"}]},{"nodeType":"YulAssignment","src":"11587:68:27","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11648:6:27"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"11597:50:27"},"nodeType":"YulFunctionCall","src":"11597:58:27"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11587:6:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11405:1:27"},{"name":"length","nodeType":"YulIdentifier","src":"11408:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11402:2:27"},"nodeType":"YulFunctionCall","src":"11402:13:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11416:18:27","statements":[{"nodeType":"YulAssignment","src":"11418:14:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11427:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"11430:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11423:3:27"},"nodeType":"YulFunctionCall","src":"11423:9:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11418:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"11387:14:27","statements":[{"nodeType":"YulVariableDeclaration","src":"11389:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"11398:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"11393:1:27","type":""}]}]},"src":"11383:282:27"}]},"name":"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11077:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11084:3:27","type":""}],"src":"10978:694:27"},{"body":{"nodeType":"YulBlock","src":"11822:170:27","statements":[{"nodeType":"YulAssignment","src":"11832:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11844:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11855:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11840:3:27"},"nodeType":"YulFunctionCall","src":"11840:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11832:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11958:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11971:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"11982:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11967:3:27"},"nodeType":"YulFunctionCall","src":"11967:17:27"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11868:89:27"},"nodeType":"YulFunctionCall","src":"11868:117:27"},"nodeType":"YulExpressionStatement","src":"11868:117:27"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11794:9:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11806:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11817:4:27","type":""}],"src":"11678:314:27"},{"body":{"nodeType":"YulBlock","src":"12038:76:27","statements":[{"body":{"nodeType":"YulBlock","src":"12092:16:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12101:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12104:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12094:6:27"},"nodeType":"YulFunctionCall","src":"12094:12:27"},"nodeType":"YulExpressionStatement","src":"12094:12:27"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12061:5:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12083:5:27"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"12068:14:27"},"nodeType":"YulFunctionCall","src":"12068:21:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12058:2:27"},"nodeType":"YulFunctionCall","src":"12058:32:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12051:6:27"},"nodeType":"YulFunctionCall","src":"12051:40:27"},"nodeType":"YulIf","src":"12048:60:27"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12031:5:27","type":""}],"src":"11998:116:27"},{"body":{"nodeType":"YulBlock","src":"12169:84:27","statements":[{"nodeType":"YulAssignment","src":"12179:29:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12201:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12188:12:27"},"nodeType":"YulFunctionCall","src":"12188:20:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12179:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12241:5:27"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"12217:23:27"},"nodeType":"YulFunctionCall","src":"12217:30:27"},"nodeType":"YulExpressionStatement","src":"12217:30:27"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12147:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"12155:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"12163:5:27","type":""}],"src":"12120:133:27"},{"body":{"nodeType":"YulBlock","src":"12339:388:27","statements":[{"body":{"nodeType":"YulBlock","src":"12385:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12387:77:27"},"nodeType":"YulFunctionCall","src":"12387:79:27"},"nodeType":"YulExpressionStatement","src":"12387:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12360:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"12369:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12356:3:27"},"nodeType":"YulFunctionCall","src":"12356:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"12381:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12352:3:27"},"nodeType":"YulFunctionCall","src":"12352:32:27"},"nodeType":"YulIf","src":"12349:119:27"},{"nodeType":"YulBlock","src":"12478:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12493:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12507:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12497:6:27","type":""}]},{"nodeType":"YulAssignment","src":"12522:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12557:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"12568:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12553:3:27"},"nodeType":"YulFunctionCall","src":"12553:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12577:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12532:20:27"},"nodeType":"YulFunctionCall","src":"12532:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12522:6:27"}]}]},{"nodeType":"YulBlock","src":"12605:115:27","statements":[{"nodeType":"YulVariableDeclaration","src":"12620:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"12634:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12624:6:27","type":""}]},{"nodeType":"YulAssignment","src":"12650:60:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12682:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"12693:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12678:3:27"},"nodeType":"YulFunctionCall","src":"12678:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12702:7:27"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"12660:17:27"},"nodeType":"YulFunctionCall","src":"12660:50:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12650:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12301:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12312:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12324:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12332:6:27","type":""}],"src":"12259:468:27"},{"body":{"nodeType":"YulBlock","src":"12822:28:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12839:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12842:1:27","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12832:6:27"},"nodeType":"YulFunctionCall","src":"12832:12:27"},"nodeType":"YulExpressionStatement","src":"12832:12:27"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"12733:117:27"},{"body":{"nodeType":"YulBlock","src":"12922:241:27","statements":[{"body":{"nodeType":"YulBlock","src":"13027:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13029:16:27"},"nodeType":"YulFunctionCall","src":"13029:18:27"},"nodeType":"YulExpressionStatement","src":"13029:18:27"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12999:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"13007:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12996:2:27"},"nodeType":"YulFunctionCall","src":"12996:30:27"},"nodeType":"YulIf","src":"12993:56:27"},{"nodeType":"YulAssignment","src":"13059:37:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13089:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13067:21:27"},"nodeType":"YulFunctionCall","src":"13067:29:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13059:4:27"}]},{"nodeType":"YulAssignment","src":"13133:23:27","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"13145:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"13151:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13141:3:27"},"nodeType":"YulFunctionCall","src":"13141:15:27"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13133:4:27"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"12906:6:27","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"12917:4:27","type":""}],"src":"12856:307:27"},{"body":{"nodeType":"YulBlock","src":"13233:82:27","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13256:3:27"},{"name":"src","nodeType":"YulIdentifier","src":"13261:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"13266:6:27"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"13243:12:27"},"nodeType":"YulFunctionCall","src":"13243:30:27"},"nodeType":"YulExpressionStatement","src":"13243:30:27"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13293:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"13298:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13289:3:27"},"nodeType":"YulFunctionCall","src":"13289:16:27"},{"kind":"number","nodeType":"YulLiteral","src":"13307:1:27","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13282:6:27"},"nodeType":"YulFunctionCall","src":"13282:27:27"},"nodeType":"YulExpressionStatement","src":"13282:27:27"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13215:3:27","type":""},{"name":"dst","nodeType":"YulTypedName","src":"13220:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"13225:6:27","type":""}],"src":"13169:146:27"},{"body":{"nodeType":"YulBlock","src":"13404:340:27","statements":[{"nodeType":"YulAssignment","src":"13414:74:27","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13480:6:27"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13439:40:27"},"nodeType":"YulFunctionCall","src":"13439:48:27"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13423:15:27"},"nodeType":"YulFunctionCall","src":"13423:65:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13414:5:27"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13504:5:27"},{"name":"length","nodeType":"YulIdentifier","src":"13511:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13497:6:27"},"nodeType":"YulFunctionCall","src":"13497:21:27"},"nodeType":"YulExpressionStatement","src":"13497:21:27"},{"nodeType":"YulVariableDeclaration","src":"13527:27:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13542:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"13549:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13538:3:27"},"nodeType":"YulFunctionCall","src":"13538:16:27"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"13531:3:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"13592:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"13594:77:27"},"nodeType":"YulFunctionCall","src":"13594:79:27"},"nodeType":"YulExpressionStatement","src":"13594:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13573:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"13578:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13569:3:27"},"nodeType":"YulFunctionCall","src":"13569:16:27"},{"name":"end","nodeType":"YulIdentifier","src":"13587:3:27"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13566:2:27"},"nodeType":"YulFunctionCall","src":"13566:25:27"},"nodeType":"YulIf","src":"13563:112:27"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13721:3:27"},{"name":"dst","nodeType":"YulIdentifier","src":"13726:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"13731:6:27"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"13684:36:27"},"nodeType":"YulFunctionCall","src":"13684:54:27"},"nodeType":"YulExpressionStatement","src":"13684:54:27"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13377:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"13382:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"13390:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13398:5:27","type":""}],"src":"13321:423:27"},{"body":{"nodeType":"YulBlock","src":"13824:277:27","statements":[{"body":{"nodeType":"YulBlock","src":"13873:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"13875:77:27"},"nodeType":"YulFunctionCall","src":"13875:79:27"},"nodeType":"YulExpressionStatement","src":"13875:79:27"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13852:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"13860:4:27","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13848:3:27"},"nodeType":"YulFunctionCall","src":"13848:17:27"},{"name":"end","nodeType":"YulIdentifier","src":"13867:3:27"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13844:3:27"},"nodeType":"YulFunctionCall","src":"13844:27:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13837:6:27"},"nodeType":"YulFunctionCall","src":"13837:35:27"},"nodeType":"YulIf","src":"13834:122:27"},{"nodeType":"YulVariableDeclaration","src":"13965:34:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13992:6:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13979:12:27"},"nodeType":"YulFunctionCall","src":"13979:20:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13969:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14008:87:27","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14068:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14076:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14064:3:27"},"nodeType":"YulFunctionCall","src":"14064:17:27"},{"name":"length","nodeType":"YulIdentifier","src":"14083:6:27"},{"name":"end","nodeType":"YulIdentifier","src":"14091:3:27"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14017:46:27"},"nodeType":"YulFunctionCall","src":"14017:78:27"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14008:5:27"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13802:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"13810:3:27","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13818:5:27","type":""}],"src":"13763:338:27"},{"body":{"nodeType":"YulBlock","src":"14233:817:27","statements":[{"body":{"nodeType":"YulBlock","src":"14280:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14282:77:27"},"nodeType":"YulFunctionCall","src":"14282:79:27"},"nodeType":"YulExpressionStatement","src":"14282:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14254:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"14263:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14250:3:27"},"nodeType":"YulFunctionCall","src":"14250:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"14275:3:27","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14246:3:27"},"nodeType":"YulFunctionCall","src":"14246:33:27"},"nodeType":"YulIf","src":"14243:120:27"},{"nodeType":"YulBlock","src":"14373:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14388:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14402:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14392:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14417:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14452:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"14463:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14448:3:27"},"nodeType":"YulFunctionCall","src":"14448:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14472:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14427:20:27"},"nodeType":"YulFunctionCall","src":"14427:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14417:6:27"}]}]},{"nodeType":"YulBlock","src":"14500:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14515:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14529:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14519:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14545:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14580:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"14591:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14576:3:27"},"nodeType":"YulFunctionCall","src":"14576:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14600:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14555:20:27"},"nodeType":"YulFunctionCall","src":"14555:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14545:6:27"}]}]},{"nodeType":"YulBlock","src":"14628:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14643:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"14657:2:27","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14647:6:27","type":""}]},{"nodeType":"YulAssignment","src":"14673:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14708:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"14719:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14704:3:27"},"nodeType":"YulFunctionCall","src":"14704:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14728:7:27"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"14683:20:27"},"nodeType":"YulFunctionCall","src":"14683:53:27"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14673:6:27"}]}]},{"nodeType":"YulBlock","src":"14756:287:27","statements":[{"nodeType":"YulVariableDeclaration","src":"14771:46:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14802:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"14813:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14798:3:27"},"nodeType":"YulFunctionCall","src":"14798:18:27"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14785:12:27"},"nodeType":"YulFunctionCall","src":"14785:32:27"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14775:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"14864:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14866:77:27"},"nodeType":"YulFunctionCall","src":"14866:79:27"},"nodeType":"YulExpressionStatement","src":"14866:79:27"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14836:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"14844:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14833:2:27"},"nodeType":"YulFunctionCall","src":"14833:30:27"},"nodeType":"YulIf","src":"14830:117:27"},{"nodeType":"YulAssignment","src":"14961:72:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15005:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"15016:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15001:3:27"},"nodeType":"YulFunctionCall","src":"15001:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15025:7:27"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14971:29:27"},"nodeType":"YulFunctionCall","src":"14971:62:27"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"14961:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14179:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14190:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14202:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14210:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14218:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14226:6:27","type":""}],"src":"14107:943:27"},{"body":{"nodeType":"YulBlock","src":"15139:391:27","statements":[{"body":{"nodeType":"YulBlock","src":"15185:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15187:77:27"},"nodeType":"YulFunctionCall","src":"15187:79:27"},"nodeType":"YulExpressionStatement","src":"15187:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15160:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"15169:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15156:3:27"},"nodeType":"YulFunctionCall","src":"15156:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"15181:2:27","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15152:3:27"},"nodeType":"YulFunctionCall","src":"15152:32:27"},"nodeType":"YulIf","src":"15149:119:27"},{"nodeType":"YulBlock","src":"15278:117:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15293:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15307:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15297:6:27","type":""}]},{"nodeType":"YulAssignment","src":"15322:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15357:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"15368:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15353:3:27"},"nodeType":"YulFunctionCall","src":"15353:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15377:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15332:20:27"},"nodeType":"YulFunctionCall","src":"15332:53:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15322:6:27"}]}]},{"nodeType":"YulBlock","src":"15405:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"15420:16:27","value":{"kind":"number","nodeType":"YulLiteral","src":"15434:2:27","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15424:6:27","type":""}]},{"nodeType":"YulAssignment","src":"15450:63:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15485:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"15496:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15481:3:27"},"nodeType":"YulFunctionCall","src":"15481:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15505:7:27"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15460:20:27"},"nodeType":"YulFunctionCall","src":"15460:53:27"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15450:6:27"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15101:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15112:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15124:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15132:6:27","type":""}],"src":"15056:474:27"},{"body":{"nodeType":"YulBlock","src":"15564:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15581:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15584:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15574:6:27"},"nodeType":"YulFunctionCall","src":"15574:88:27"},"nodeType":"YulExpressionStatement","src":"15574:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15678:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15681:4:27","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15671:6:27"},"nodeType":"YulFunctionCall","src":"15671:15:27"},"nodeType":"YulExpressionStatement","src":"15671:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15702:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15705:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15695:6:27"},"nodeType":"YulFunctionCall","src":"15695:15:27"},"nodeType":"YulExpressionStatement","src":"15695:15:27"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"15536:180:27"},{"body":{"nodeType":"YulBlock","src":"15773:269:27","statements":[{"nodeType":"YulAssignment","src":"15783:22:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15797:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"15803:1:27","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15793:3:27"},"nodeType":"YulFunctionCall","src":"15793:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15783:6:27"}]},{"nodeType":"YulVariableDeclaration","src":"15814:38:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15844:4:27"},{"kind":"number","nodeType":"YulLiteral","src":"15850:1:27","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15840:3:27"},"nodeType":"YulFunctionCall","src":"15840:12:27"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"15818:18:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"15891:51:27","statements":[{"nodeType":"YulAssignment","src":"15905:27:27","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15919:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15927:4:27","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15915:3:27"},"nodeType":"YulFunctionCall","src":"15915:17:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15905:6:27"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15871:18:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15864:6:27"},"nodeType":"YulFunctionCall","src":"15864:26:27"},"nodeType":"YulIf","src":"15861:81:27"},{"body":{"nodeType":"YulBlock","src":"15994:42:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"16008:16:27"},"nodeType":"YulFunctionCall","src":"16008:18:27"},"nodeType":"YulExpressionStatement","src":"16008:18:27"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15958:18:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15981:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"15989:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15978:2:27"},"nodeType":"YulFunctionCall","src":"15978:14:27"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15955:2:27"},"nodeType":"YulFunctionCall","src":"15955:38:27"},"nodeType":"YulIf","src":"15952:84:27"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15757:4:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"15766:6:27","type":""}],"src":"15722:320:27"},{"body":{"nodeType":"YulBlock","src":"16174:206:27","statements":[{"nodeType":"YulAssignment","src":"16184:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16196:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16207:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16192:3:27"},"nodeType":"YulFunctionCall","src":"16192:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16184:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16264:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16277:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16288:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16273:3:27"},"nodeType":"YulFunctionCall","src":"16273:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16220:43:27"},"nodeType":"YulFunctionCall","src":"16220:71:27"},"nodeType":"YulExpressionStatement","src":"16220:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16345:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16358:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16369:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16354:3:27"},"nodeType":"YulFunctionCall","src":"16354:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16301:43:27"},"nodeType":"YulFunctionCall","src":"16301:72:27"},"nodeType":"YulExpressionStatement","src":"16301:72:27"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16138:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16150:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16158:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16169:4:27","type":""}],"src":"16048:332:27"},{"body":{"nodeType":"YulBlock","src":"16540:288:27","statements":[{"nodeType":"YulAssignment","src":"16550:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16562:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16573:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16558:3:27"},"nodeType":"YulFunctionCall","src":"16558:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16550:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16630:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16643:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16654:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16639:3:27"},"nodeType":"YulFunctionCall","src":"16639:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16586:43:27"},"nodeType":"YulFunctionCall","src":"16586:71:27"},"nodeType":"YulExpressionStatement","src":"16586:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16711:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16724:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16735:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16720:3:27"},"nodeType":"YulFunctionCall","src":"16720:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"16667:43:27"},"nodeType":"YulFunctionCall","src":"16667:72:27"},"nodeType":"YulExpressionStatement","src":"16667:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"16793:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16806:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"16817:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16802:3:27"},"nodeType":"YulFunctionCall","src":"16802:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"16749:43:27"},"nodeType":"YulFunctionCall","src":"16749:72:27"},"nodeType":"YulExpressionStatement","src":"16749:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16496:9:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16508:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16516:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16524:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16535:4:27","type":""}],"src":"16386:442:27"},{"body":{"nodeType":"YulBlock","src":"16862:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16879:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16882:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16872:6:27"},"nodeType":"YulFunctionCall","src":"16872:88:27"},"nodeType":"YulExpressionStatement","src":"16872:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16976:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16979:4:27","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16969:6:27"},"nodeType":"YulFunctionCall","src":"16969:15:27"},"nodeType":"YulExpressionStatement","src":"16969:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17000:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"17003:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16993:6:27"},"nodeType":"YulFunctionCall","src":"16993:15:27"},"nodeType":"YulExpressionStatement","src":"16993:15:27"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"16834:180:27"},{"body":{"nodeType":"YulBlock","src":"17133:34:27","statements":[{"nodeType":"YulAssignment","src":"17143:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"17158:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"17143:11:27"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17105:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"17110:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"17121:11:27","type":""}],"src":"17020:147:27"},{"body":{"nodeType":"YulBlock","src":"17279:8:27","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17271:6:27","type":""}],"src":"17173:114:27"},{"body":{"nodeType":"YulBlock","src":"17456:235:27","statements":[{"nodeType":"YulAssignment","src":"17466:90:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17549:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17554:1:27","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17473:75:27"},"nodeType":"YulFunctionCall","src":"17473:83:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17466:3:27"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17654:3:27"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"17565:88:27"},"nodeType":"YulFunctionCall","src":"17565:93:27"},"nodeType":"YulExpressionStatement","src":"17565:93:27"},{"nodeType":"YulAssignment","src":"17667:18:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17678:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"17683:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17674:3:27"},"nodeType":"YulFunctionCall","src":"17674:11:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17667:3:27"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17444:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17452:3:27","type":""}],"src":"17293:398:27"},{"body":{"nodeType":"YulBlock","src":"17885:191:27","statements":[{"nodeType":"YulAssignment","src":"17896:154:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18046:3:27"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17903:141:27"},"nodeType":"YulFunctionCall","src":"17903:147:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17896:3:27"}]},{"nodeType":"YulAssignment","src":"18060:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"18067:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18060:3:27"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17872:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17881:3:27","type":""}],"src":"17697:379:27"},{"body":{"nodeType":"YulBlock","src":"18110:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18127:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18130:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18120:6:27"},"nodeType":"YulFunctionCall","src":"18120:88:27"},"nodeType":"YulExpressionStatement","src":"18120:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18224:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18227:4:27","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18217:6:27"},"nodeType":"YulFunctionCall","src":"18217:15:27"},"nodeType":"YulExpressionStatement","src":"18217:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18248:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18251:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18241:6:27"},"nodeType":"YulFunctionCall","src":"18241:15:27"},"nodeType":"YulExpressionStatement","src":"18241:15:27"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"18082:180:27"},{"body":{"nodeType":"YulBlock","src":"18311:190:27","statements":[{"nodeType":"YulAssignment","src":"18321:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18348:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18330:17:27"},"nodeType":"YulFunctionCall","src":"18330:24:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18321:5:27"}]},{"body":{"nodeType":"YulBlock","src":"18444:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18446:16:27"},"nodeType":"YulFunctionCall","src":"18446:18:27"},"nodeType":"YulExpressionStatement","src":"18446:18:27"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18369:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"18376:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18366:2:27"},"nodeType":"YulFunctionCall","src":"18366:77:27"},"nodeType":"YulIf","src":"18363:103:27"},{"nodeType":"YulAssignment","src":"18475:20:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18486:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"18493:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18482:3:27"},"nodeType":"YulFunctionCall","src":"18482:13:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"18475:3:27"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18297:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"18307:3:27","type":""}],"src":"18268:233:27"},{"body":{"nodeType":"YulBlock","src":"18552:32:27","statements":[{"nodeType":"YulAssignment","src":"18562:16:27","value":{"name":"value","nodeType":"YulIdentifier","src":"18573:5:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18562:7:27"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18534:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18544:7:27","type":""}],"src":"18507:77:27"},{"body":{"nodeType":"YulBlock","src":"18655:53:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18672:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18695:5:27"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"18677:17:27"},"nodeType":"YulFunctionCall","src":"18677:24:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18665:6:27"},"nodeType":"YulFunctionCall","src":"18665:37:27"},"nodeType":"YulExpressionStatement","src":"18665:37:27"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18643:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18650:3:27","type":""}],"src":"18590:118:27"},{"body":{"nodeType":"YulBlock","src":"18758:57:27","statements":[{"nodeType":"YulAssignment","src":"18768:41:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18783:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"18790:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18779:3:27"},"nodeType":"YulFunctionCall","src":"18779:30:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18768:7:27"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18740:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18750:7:27","type":""}],"src":"18714:101:27"},{"body":{"nodeType":"YulBlock","src":"18884:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18901:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18923:5:27"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"18906:16:27"},"nodeType":"YulFunctionCall","src":"18906:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18894:6:27"},"nodeType":"YulFunctionCall","src":"18894:36:27"},"nodeType":"YulExpressionStatement","src":"18894:36:27"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18872:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"18879:3:27","type":""}],"src":"18821:115:27"},{"body":{"nodeType":"YulBlock","src":"18986:45:27","statements":[{"nodeType":"YulAssignment","src":"18996:29:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19011:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"19018:6:27","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19007:3:27"},"nodeType":"YulFunctionCall","src":"19007:18:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"18996:7:27"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18968:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"18978:7:27","type":""}],"src":"18942:89:27"},{"body":{"nodeType":"YulBlock","src":"19100:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19117:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19139:5:27"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"19122:16:27"},"nodeType":"YulFunctionCall","src":"19122:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19110:6:27"},"nodeType":"YulFunctionCall","src":"19110:36:27"},"nodeType":"YulExpressionStatement","src":"19110:36:27"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19088:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19095:3:27","type":""}],"src":"19037:115:27"},{"body":{"nodeType":"YulBlock","src":"19202:49:27","statements":[{"nodeType":"YulAssignment","src":"19212:33:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19227:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"19234:10:27","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"19223:3:27"},"nodeType":"YulFunctionCall","src":"19223:22:27"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"19212:7:27"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19184:5:27","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"19194:7:27","type":""}],"src":"19158:93:27"},{"body":{"nodeType":"YulBlock","src":"19320:52:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19337:3:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19359:5:27"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"19342:16:27"},"nodeType":"YulFunctionCall","src":"19342:23:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19330:6:27"},"nodeType":"YulFunctionCall","src":"19330:36:27"},"nodeType":"YulExpressionStatement","src":"19330:36:27"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19308:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19315:3:27","type":""}],"src":"19257:115:27"},{"body":{"nodeType":"YulBlock","src":"19580:446:27","statements":[{"nodeType":"YulAssignment","src":"19590:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19602:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19613:3:27","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19598:3:27"},"nodeType":"YulFunctionCall","src":"19598:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19590:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19671:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19684:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19695:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19680:3:27"},"nodeType":"YulFunctionCall","src":"19680:17:27"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"19627:43:27"},"nodeType":"YulFunctionCall","src":"19627:71:27"},"nodeType":"YulExpressionStatement","src":"19627:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"19750:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19763:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19774:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19759:3:27"},"nodeType":"YulFunctionCall","src":"19759:18:27"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"19708:41:27"},"nodeType":"YulFunctionCall","src":"19708:70:27"},"nodeType":"YulExpressionStatement","src":"19708:70:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"19830:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19843:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19854:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19839:3:27"},"nodeType":"YulFunctionCall","src":"19839:18:27"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"19788:41:27"},"nodeType":"YulFunctionCall","src":"19788:70:27"},"nodeType":"YulExpressionStatement","src":"19788:70:27"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"19910:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19923:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"19934:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19919:3:27"},"nodeType":"YulFunctionCall","src":"19919:18:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"19868:41:27"},"nodeType":"YulFunctionCall","src":"19868:70:27"},"nodeType":"YulExpressionStatement","src":"19868:70:27"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"19990:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20003:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"20014:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19999:3:27"},"nodeType":"YulFunctionCall","src":"19999:19:27"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"19948:41:27"},"nodeType":"YulFunctionCall","src":"19948:71:27"},"nodeType":"YulExpressionStatement","src":"19948:71:27"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19520:9:27","type":""},{"name":"value4","nodeType":"YulTypedName","src":"19532:6:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"19540:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"19548:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"19556:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19564:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19575:4:27","type":""}],"src":"19378:648:27"},{"body":{"nodeType":"YulBlock","src":"20095:80:27","statements":[{"nodeType":"YulAssignment","src":"20105:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"20120:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20114:5:27"},"nodeType":"YulFunctionCall","src":"20114:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"20105:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20163:5:27"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"20136:26:27"},"nodeType":"YulFunctionCall","src":"20136:33:27"},"nodeType":"YulExpressionStatement","src":"20136:33:27"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"20073:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"20081:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"20089:5:27","type":""}],"src":"20032:143:27"},{"body":{"nodeType":"YulBlock","src":"20258:274:27","statements":[{"body":{"nodeType":"YulBlock","src":"20304:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"20306:77:27"},"nodeType":"YulFunctionCall","src":"20306:79:27"},"nodeType":"YulExpressionStatement","src":"20306:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"20279:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"20288:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20275:3:27"},"nodeType":"YulFunctionCall","src":"20275:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"20300:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"20271:3:27"},"nodeType":"YulFunctionCall","src":"20271:32:27"},"nodeType":"YulIf","src":"20268:119:27"},{"nodeType":"YulBlock","src":"20397:128:27","statements":[{"nodeType":"YulVariableDeclaration","src":"20412:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"20426:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"20416:6:27","type":""}]},{"nodeType":"YulAssignment","src":"20441:74:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20487:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"20498:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20483:3:27"},"nodeType":"YulFunctionCall","src":"20483:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"20507:7:27"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"20451:31:27"},"nodeType":"YulFunctionCall","src":"20451:64:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"20441:6:27"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20228:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"20239:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"20251:6:27","type":""}],"src":"20181:351:27"},{"body":{"nodeType":"YulBlock","src":"20652:34:27","statements":[{"nodeType":"YulAssignment","src":"20662:18:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"20677:3:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"20662:11:27"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20624:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"20629:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"20640:11:27","type":""}],"src":"20538:148:27"},{"body":{"nodeType":"YulBlock","src":"20802:280:27","statements":[{"nodeType":"YulVariableDeclaration","src":"20812:53:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"20859:5:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"20826:32:27"},"nodeType":"YulFunctionCall","src":"20826:39:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"20816:6:27","type":""}]},{"nodeType":"YulAssignment","src":"20874:96:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20958:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"20963:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"20881:76:27"},"nodeType":"YulFunctionCall","src":"20881:89:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20874:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21018:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"21025:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21014:3:27"},"nodeType":"YulFunctionCall","src":"21014:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"21032:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"21037:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"20979:34:27"},"nodeType":"YulFunctionCall","src":"20979:65:27"},"nodeType":"YulExpressionStatement","src":"20979:65:27"},{"nodeType":"YulAssignment","src":"21053:23:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21064:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"21069:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21060:3:27"},"nodeType":"YulFunctionCall","src":"21060:16:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21053:3:27"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"20783:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"20790:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20798:3:27","type":""}],"src":"20692:390:27"},{"body":{"nodeType":"YulBlock","src":"21272:251:27","statements":[{"nodeType":"YulAssignment","src":"21283:102:27","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21372:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"21381:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21290:81:27"},"nodeType":"YulFunctionCall","src":"21290:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21283:3:27"}]},{"nodeType":"YulAssignment","src":"21395:102:27","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21484:6:27"},{"name":"pos","nodeType":"YulIdentifier","src":"21493:3:27"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"21402:81:27"},"nodeType":"YulFunctionCall","src":"21402:95:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21395:3:27"}]},{"nodeType":"YulAssignment","src":"21507:10:27","value":{"name":"pos","nodeType":"YulIdentifier","src":"21514:3:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21507:3:27"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21243:3:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21249:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21257:6:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21268:3:27","type":""}],"src":"21088:435:27"},{"body":{"nodeType":"YulBlock","src":"21557:152:27","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21574:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21577:77:27","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21567:6:27"},"nodeType":"YulFunctionCall","src":"21567:88:27"},"nodeType":"YulExpressionStatement","src":"21567:88:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21671:1:27","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21674:4:27","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21664:6:27"},"nodeType":"YulFunctionCall","src":"21664:15:27"},"nodeType":"YulExpressionStatement","src":"21664:15:27"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21695:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21698:4:27","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21688:6:27"},"nodeType":"YulFunctionCall","src":"21688:15:27"},"nodeType":"YulExpressionStatement","src":"21688:15:27"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"21529:180:27"},{"body":{"nodeType":"YulBlock","src":"21749:142:27","statements":[{"nodeType":"YulAssignment","src":"21759:25:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21782:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21764:17:27"},"nodeType":"YulFunctionCall","src":"21764:20:27"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21759:1:27"}]},{"nodeType":"YulAssignment","src":"21793:25:27","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21816:1:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21798:17:27"},"nodeType":"YulFunctionCall","src":"21798:20:27"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21793:1:27"}]},{"body":{"nodeType":"YulBlock","src":"21840:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"21842:16:27"},"nodeType":"YulFunctionCall","src":"21842:18:27"},"nodeType":"YulExpressionStatement","src":"21842:18:27"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21837:1:27"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21830:6:27"},"nodeType":"YulFunctionCall","src":"21830:9:27"},"nodeType":"YulIf","src":"21827:35:27"},{"nodeType":"YulAssignment","src":"21871:14:27","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21880:1:27"},{"name":"y","nodeType":"YulIdentifier","src":"21883:1:27"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"21876:3:27"},"nodeType":"YulFunctionCall","src":"21876:9:27"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"21871:1:27"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21738:1:27","type":""},{"name":"y","nodeType":"YulTypedName","src":"21741:1:27","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"21747:1:27","type":""}],"src":"21715:176:27"},{"body":{"nodeType":"YulBlock","src":"21955:40:27","statements":[{"nodeType":"YulAssignment","src":"21966:22:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21982:5:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21976:5:27"},"nodeType":"YulFunctionCall","src":"21976:12:27"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"21966:6:27"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21938:5:27","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"21948:6:27","type":""}],"src":"21897:98:27"},{"body":{"nodeType":"YulBlock","src":"22096:73:27","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22113:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"22118:6:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22106:6:27"},"nodeType":"YulFunctionCall","src":"22106:19:27"},"nodeType":"YulExpressionStatement","src":"22106:19:27"},{"nodeType":"YulAssignment","src":"22134:29:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22153:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"22158:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22149:3:27"},"nodeType":"YulFunctionCall","src":"22149:14:27"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22134:11:27"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22068:3:27","type":""},{"name":"length","nodeType":"YulTypedName","src":"22073:6:27","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22084:11:27","type":""}],"src":"22001:168:27"},{"body":{"nodeType":"YulBlock","src":"22265:283:27","statements":[{"nodeType":"YulVariableDeclaration","src":"22275:52:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22321:5:27"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22289:31:27"},"nodeType":"YulFunctionCall","src":"22289:38:27"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22279:6:27","type":""}]},{"nodeType":"YulAssignment","src":"22336:77:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22401:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"22406:6:27"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22343:57:27"},"nodeType":"YulFunctionCall","src":"22343:70:27"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22336:3:27"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22461:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"22468:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22457:3:27"},"nodeType":"YulFunctionCall","src":"22457:16:27"},{"name":"pos","nodeType":"YulIdentifier","src":"22475:3:27"},{"name":"length","nodeType":"YulIdentifier","src":"22480:6:27"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"22422:34:27"},"nodeType":"YulFunctionCall","src":"22422:65:27"},"nodeType":"YulExpressionStatement","src":"22422:65:27"},{"nodeType":"YulAssignment","src":"22496:46:27","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22507:3:27"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22534:6:27"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22512:21:27"},"nodeType":"YulFunctionCall","src":"22512:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22503:3:27"},"nodeType":"YulFunctionCall","src":"22503:39:27"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22496:3:27"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22246:5:27","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22253:3:27","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22261:3:27","type":""}],"src":"22175:373:27"},{"body":{"nodeType":"YulBlock","src":"22754:440:27","statements":[{"nodeType":"YulAssignment","src":"22764:27:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22776:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22787:3:27","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22772:3:27"},"nodeType":"YulFunctionCall","src":"22772:19:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22764:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22845:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22858:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22869:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22854:3:27"},"nodeType":"YulFunctionCall","src":"22854:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22801:43:27"},"nodeType":"YulFunctionCall","src":"22801:71:27"},"nodeType":"YulExpressionStatement","src":"22801:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22926:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22939:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"22950:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22935:3:27"},"nodeType":"YulFunctionCall","src":"22935:18:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22882:43:27"},"nodeType":"YulFunctionCall","src":"22882:72:27"},"nodeType":"YulExpressionStatement","src":"22882:72:27"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23008:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23021:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23032:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23017:3:27"},"nodeType":"YulFunctionCall","src":"23017:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22964:43:27"},"nodeType":"YulFunctionCall","src":"22964:72:27"},"nodeType":"YulExpressionStatement","src":"22964:72:27"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23057:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"23068:2:27","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23053:3:27"},"nodeType":"YulFunctionCall","src":"23053:18:27"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23077:4:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"23083:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23073:3:27"},"nodeType":"YulFunctionCall","src":"23073:20:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23046:6:27"},"nodeType":"YulFunctionCall","src":"23046:48:27"},"nodeType":"YulExpressionStatement","src":"23046:48:27"},{"nodeType":"YulAssignment","src":"23103:84:27","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23173:6:27"},{"name":"tail","nodeType":"YulIdentifier","src":"23182:4:27"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23111:61:27"},"nodeType":"YulFunctionCall","src":"23111:76:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23103:4:27"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22702:9:27","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22714:6:27","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22722:6:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22730:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22738:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22749:4:27","type":""}],"src":"22554:640:27"},{"body":{"nodeType":"YulBlock","src":"23262:79:27","statements":[{"nodeType":"YulAssignment","src":"23272:22:27","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23287:6:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23281:5:27"},"nodeType":"YulFunctionCall","src":"23281:13:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23272:5:27"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23329:5:27"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"23303:25:27"},"nodeType":"YulFunctionCall","src":"23303:32:27"},"nodeType":"YulExpressionStatement","src":"23303:32:27"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23240:6:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"23248:3:27","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23256:5:27","type":""}],"src":"23200:141:27"},{"body":{"nodeType":"YulBlock","src":"23423:273:27","statements":[{"body":{"nodeType":"YulBlock","src":"23469:83:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23471:77:27"},"nodeType":"YulFunctionCall","src":"23471:79:27"},"nodeType":"YulExpressionStatement","src":"23471:79:27"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23444:7:27"},{"name":"headStart","nodeType":"YulIdentifier","src":"23453:9:27"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23440:3:27"},"nodeType":"YulFunctionCall","src":"23440:23:27"},{"kind":"number","nodeType":"YulLiteral","src":"23465:2:27","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23436:3:27"},"nodeType":"YulFunctionCall","src":"23436:32:27"},"nodeType":"YulIf","src":"23433:119:27"},{"nodeType":"YulBlock","src":"23562:127:27","statements":[{"nodeType":"YulVariableDeclaration","src":"23577:15:27","value":{"kind":"number","nodeType":"YulLiteral","src":"23591:1:27","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23581:6:27","type":""}]},{"nodeType":"YulAssignment","src":"23606:73:27","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23651:9:27"},{"name":"offset","nodeType":"YulIdentifier","src":"23662:6:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23647:3:27"},"nodeType":"YulFunctionCall","src":"23647:22:27"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23671:7:27"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"23616:30:27"},"nodeType":"YulFunctionCall","src":"23616:63:27"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23606:6:27"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23393:9:27","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23404:7:27","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23416:6:27","type":""}],"src":"23347:349:27"},{"body":{"nodeType":"YulBlock","src":"23756:87:27","statements":[{"nodeType":"YulAssignment","src":"23766:11:27","value":{"name":"ptr","nodeType":"YulIdentifier","src":"23774:3:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"23766:4:27"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23794:1:27","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"23797:3:27"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23787:6:27"},"nodeType":"YulFunctionCall","src":"23787:14:27"},"nodeType":"YulExpressionStatement","src":"23787:14:27"},{"nodeType":"YulAssignment","src":"23810:26:27","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23828:1:27","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23831:4:27","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"23818:9:27"},"nodeType":"YulFunctionCall","src":"23818:18:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"23810:4:27"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"23743:3:27","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"23751:4:27","type":""}],"src":"23702:141:27"},{"body":{"nodeType":"YulBlock","src":"23893:49:27","statements":[{"nodeType":"YulAssignment","src":"23903:33:27","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23921:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"23928:2:27","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23917:3:27"},"nodeType":"YulFunctionCall","src":"23917:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"23933:2:27","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"23913:3:27"},"nodeType":"YulFunctionCall","src":"23913:23:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"23903:6:27"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23876:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"23886:6:27","type":""}],"src":"23849:93:27"},{"body":{"nodeType":"YulBlock","src":"24001:54:27","statements":[{"nodeType":"YulAssignment","src":"24011:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"24036:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"24042:5:27"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"24032:3:27"},"nodeType":"YulFunctionCall","src":"24032:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"24011:8:27"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"23976:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"23982:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"23992:8:27","type":""}],"src":"23948:107:27"},{"body":{"nodeType":"YulBlock","src":"24137:317:27","statements":[{"nodeType":"YulVariableDeclaration","src":"24147:35:27","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"24168:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"24180:1:27","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"24164:3:27"},"nodeType":"YulFunctionCall","src":"24164:18:27"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"24151:9:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"24191:109:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"24222:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"24233:66:27","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"24203:18:27"},"nodeType":"YulFunctionCall","src":"24203:97:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"24195:4:27","type":""}]},{"nodeType":"YulAssignment","src":"24309:51:27","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"24340:9:27"},{"name":"toInsert","nodeType":"YulIdentifier","src":"24351:8:27"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"24321:18:27"},"nodeType":"YulFunctionCall","src":"24321:39:27"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"24309:8:27"}]},{"nodeType":"YulAssignment","src":"24369:30:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24382:5:27"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"24393:4:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"24389:3:27"},"nodeType":"YulFunctionCall","src":"24389:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24378:3:27"},"nodeType":"YulFunctionCall","src":"24378:21:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24369:5:27"}]},{"nodeType":"YulAssignment","src":"24408:40:27","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24421:5:27"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"24432:8:27"},{"name":"mask","nodeType":"YulIdentifier","src":"24442:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"24428:3:27"},"nodeType":"YulFunctionCall","src":"24428:19:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"24418:2:27"},"nodeType":"YulFunctionCall","src":"24418:30:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"24408:6:27"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24098:5:27","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"24105:10:27","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"24117:8:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"24130:6:27","type":""}],"src":"24061:393:27"},{"body":{"nodeType":"YulBlock","src":"24492:28:27","statements":[{"nodeType":"YulAssignment","src":"24502:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"24509:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"24502:3:27"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24478:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"24488:3:27","type":""}],"src":"24460:60:27"},{"body":{"nodeType":"YulBlock","src":"24586:82:27","statements":[{"nodeType":"YulAssignment","src":"24596:66:27","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24654:5:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24636:17:27"},"nodeType":"YulFunctionCall","src":"24636:24:27"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"24627:8:27"},"nodeType":"YulFunctionCall","src":"24627:34:27"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24609:17:27"},"nodeType":"YulFunctionCall","src":"24609:53:27"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"24596:9:27"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24566:5:27","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"24576:9:27","type":""}],"src":"24526:142:27"},{"body":{"nodeType":"YulBlock","src":"24721:28:27","statements":[{"nodeType":"YulAssignment","src":"24731:12:27","value":{"name":"value","nodeType":"YulIdentifier","src":"24738:5:27"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"24731:3:27"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"24707:5:27","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"24717:3:27","type":""}],"src":"24674:75:27"},{"body":{"nodeType":"YulBlock","src":"24831:193:27","statements":[{"nodeType":"YulVariableDeclaration","src":"24841:63:27","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"24896:7:27"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"24865:30:27"},"nodeType":"YulFunctionCall","src":"24865:39:27"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"24845:16:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24920:4:27"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"24960:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"24954:5:27"},"nodeType":"YulFunctionCall","src":"24954:11:27"},{"name":"offset","nodeType":"YulIdentifier","src":"24967:6:27"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"24999:16:27"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"24975:23:27"},"nodeType":"YulFunctionCall","src":"24975:41:27"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"24926:27:27"},"nodeType":"YulFunctionCall","src":"24926:91:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"24913:6:27"},"nodeType":"YulFunctionCall","src":"24913:105:27"},"nodeType":"YulExpressionStatement","src":"24913:105:27"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"24808:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"24814:6:27","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"24822:7:27","type":""}],"src":"24755:269:27"},{"body":{"nodeType":"YulBlock","src":"25079:24:27","statements":[{"nodeType":"YulAssignment","src":"25089:8:27","value":{"kind":"number","nodeType":"YulLiteral","src":"25096:1:27","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25089:3:27"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25075:3:27","type":""}],"src":"25030:73:27"},{"body":{"nodeType":"YulBlock","src":"25162:136:27","statements":[{"nodeType":"YulVariableDeclaration","src":"25172:46:27","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"25186:30:27"},"nodeType":"YulFunctionCall","src":"25186:32:27"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"25176:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"25271:4:27"},{"name":"offset","nodeType":"YulIdentifier","src":"25277:6:27"},{"name":"zero_0","nodeType":"YulIdentifier","src":"25285:6:27"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"25227:43:27"},"nodeType":"YulFunctionCall","src":"25227:65:27"},"nodeType":"YulExpressionStatement","src":"25227:65:27"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"25148:4:27","type":""},{"name":"offset","nodeType":"YulTypedName","src":"25154:6:27","type":""}],"src":"25109:189:27"},{"body":{"nodeType":"YulBlock","src":"25354:136:27","statements":[{"body":{"nodeType":"YulBlock","src":"25421:63:27","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"25465:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"25472:1:27","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"25435:29:27"},"nodeType":"YulFunctionCall","src":"25435:39:27"},"nodeType":"YulExpressionStatement","src":"25435:39:27"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"25374:5:27"},{"name":"end","nodeType":"YulIdentifier","src":"25381:3:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25371:2:27"},"nodeType":"YulFunctionCall","src":"25371:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"25386:26:27","statements":[{"nodeType":"YulAssignment","src":"25388:22:27","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"25401:5:27"},{"kind":"number","nodeType":"YulLiteral","src":"25408:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25397:3:27"},"nodeType":"YulFunctionCall","src":"25397:13:27"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"25388:5:27"}]}]},"pre":{"nodeType":"YulBlock","src":"25368:2:27","statements":[]},"src":"25364:120:27"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"25342:5:27","type":""},{"name":"end","nodeType":"YulTypedName","src":"25349:3:27","type":""}],"src":"25304:186:27"},{"body":{"nodeType":"YulBlock","src":"25575:464:27","statements":[{"body":{"nodeType":"YulBlock","src":"25601:431:27","statements":[{"nodeType":"YulVariableDeclaration","src":"25615:54:27","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"25663:5:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"25631:31:27"},"nodeType":"YulFunctionCall","src":"25631:38:27"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"25619:8:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25682:63:27","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"25705:8:27"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"25733:10:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"25715:17:27"},"nodeType":"YulFunctionCall","src":"25715:29:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25701:3:27"},"nodeType":"YulFunctionCall","src":"25701:44:27"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"25686:11:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"25902:27:27","statements":[{"nodeType":"YulAssignment","src":"25904:23:27","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"25919:8:27"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"25904:11:27"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"25886:10:27"},{"kind":"number","nodeType":"YulLiteral","src":"25898:2:27","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25883:2:27"},"nodeType":"YulFunctionCall","src":"25883:18:27"},"nodeType":"YulIf","src":"25880:49:27"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"25971:11:27"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"25988:8:27"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"26016:3:27"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"25998:17:27"},"nodeType":"YulFunctionCall","src":"25998:22:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25984:3:27"},"nodeType":"YulFunctionCall","src":"25984:37:27"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"25942:28:27"},"nodeType":"YulFunctionCall","src":"25942:80:27"},"nodeType":"YulExpressionStatement","src":"25942:80:27"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"25592:3:27"},{"kind":"number","nodeType":"YulLiteral","src":"25597:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"25589:2:27"},"nodeType":"YulFunctionCall","src":"25589:11:27"},"nodeType":"YulIf","src":"25586:446:27"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"25551:5:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"25558:3:27","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"25563:10:27","type":""}],"src":"25496:543:27"},{"body":{"nodeType":"YulBlock","src":"26108:54:27","statements":[{"nodeType":"YulAssignment","src":"26118:37:27","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"26143:4:27"},{"name":"value","nodeType":"YulIdentifier","src":"26149:5:27"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"26139:3:27"},"nodeType":"YulFunctionCall","src":"26139:16:27"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"26118:8:27"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"26083:4:27","type":""},{"name":"value","nodeType":"YulTypedName","src":"26089:5:27","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"26099:8:27","type":""}],"src":"26045:117:27"},{"body":{"nodeType":"YulBlock","src":"26219:118:27","statements":[{"nodeType":"YulVariableDeclaration","src":"26229:68:27","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26278:1:27","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"26281:5:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"26274:3:27"},"nodeType":"YulFunctionCall","src":"26274:13:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26293:1:27","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26289:3:27"},"nodeType":"YulFunctionCall","src":"26289:6:27"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"26245:28:27"},"nodeType":"YulFunctionCall","src":"26245:51:27"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"26241:3:27"},"nodeType":"YulFunctionCall","src":"26241:56:27"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"26233:4:27","type":""}]},{"nodeType":"YulAssignment","src":"26306:25:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"26320:4:27"},{"name":"mask","nodeType":"YulIdentifier","src":"26326:4:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"26316:3:27"},"nodeType":"YulFunctionCall","src":"26316:15:27"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"26306:6:27"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"26196:4:27","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"26202:5:27","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"26212:6:27","type":""}],"src":"26168:169:27"},{"body":{"nodeType":"YulBlock","src":"26423:214:27","statements":[{"nodeType":"YulAssignment","src":"26556:37:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"26583:4:27"},{"name":"len","nodeType":"YulIdentifier","src":"26589:3:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"26564:18:27"},"nodeType":"YulFunctionCall","src":"26564:29:27"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"26556:4:27"}]},{"nodeType":"YulAssignment","src":"26602:29:27","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"26613:4:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"26623:1:27","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"26626:3:27"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"26619:3:27"},"nodeType":"YulFunctionCall","src":"26619:11:27"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"26610:2:27"},"nodeType":"YulFunctionCall","src":"26610:21:27"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"26602:4:27"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"26404:4:27","type":""},{"name":"len","nodeType":"YulTypedName","src":"26410:3:27","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"26418:4:27","type":""}],"src":"26342:295:27"},{"body":{"nodeType":"YulBlock","src":"26734:1303:27","statements":[{"nodeType":"YulVariableDeclaration","src":"26745:51:27","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"26792:3:27"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"26759:32:27"},"nodeType":"YulFunctionCall","src":"26759:37:27"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"26749:6:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"26881:22:27","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"26883:16:27"},"nodeType":"YulFunctionCall","src":"26883:18:27"},"nodeType":"YulExpressionStatement","src":"26883:18:27"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"26853:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"26861:18:27","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"26850:2:27"},"nodeType":"YulFunctionCall","src":"26850:30:27"},"nodeType":"YulIf","src":"26847:56:27"},{"nodeType":"YulVariableDeclaration","src":"26913:52:27","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"26959:4:27"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"26953:5:27"},"nodeType":"YulFunctionCall","src":"26953:11:27"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"26927:25:27"},"nodeType":"YulFunctionCall","src":"26927:38:27"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"26917:6:27","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27058:4:27"},{"name":"oldLen","nodeType":"YulIdentifier","src":"27064:6:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"27072:6:27"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"27012:45:27"},"nodeType":"YulFunctionCall","src":"27012:67:27"},"nodeType":"YulExpressionStatement","src":"27012:67:27"},{"nodeType":"YulVariableDeclaration","src":"27089:18:27","value":{"kind":"number","nodeType":"YulLiteral","src":"27106:1:27","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"27093:9:27","type":""}]},{"nodeType":"YulAssignment","src":"27117:17:27","value":{"kind":"number","nodeType":"YulLiteral","src":"27130:4:27","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"27117:9:27"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"27181:611:27","statements":[{"nodeType":"YulVariableDeclaration","src":"27195:37:27","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"27214:6:27"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"27226:4:27","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"27222:3:27"},"nodeType":"YulFunctionCall","src":"27222:9:27"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27210:3:27"},"nodeType":"YulFunctionCall","src":"27210:22:27"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"27199:7:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27246:51:27","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27292:4:27"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"27260:31:27"},"nodeType":"YulFunctionCall","src":"27260:37:27"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"27250:6:27","type":""}]},{"nodeType":"YulVariableDeclaration","src":"27310:10:27","value":{"kind":"number","nodeType":"YulLiteral","src":"27319:1:27","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"27314:1:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"27378:163:27","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"27403:6:27"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27421:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"27426:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27417:3:27"},"nodeType":"YulFunctionCall","src":"27417:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27411:5:27"},"nodeType":"YulFunctionCall","src":"27411:26:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27396:6:27"},"nodeType":"YulFunctionCall","src":"27396:42:27"},"nodeType":"YulExpressionStatement","src":"27396:42:27"},{"nodeType":"YulAssignment","src":"27455:24:27","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"27469:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"27477:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27465:3:27"},"nodeType":"YulFunctionCall","src":"27465:14:27"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"27455:6:27"}]},{"nodeType":"YulAssignment","src":"27496:31:27","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"27513:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"27524:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27509:3:27"},"nodeType":"YulFunctionCall","src":"27509:18:27"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"27496:9:27"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27344:1:27"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"27347:7:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27341:2:27"},"nodeType":"YulFunctionCall","src":"27341:14:27"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"27356:21:27","statements":[{"nodeType":"YulAssignment","src":"27358:17:27","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"27367:1:27"},{"kind":"number","nodeType":"YulLiteral","src":"27370:4:27","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27363:3:27"},"nodeType":"YulFunctionCall","src":"27363:12:27"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"27358:1:27"}]}]},"pre":{"nodeType":"YulBlock","src":"27337:3:27","statements":[]},"src":"27333:208:27"},{"body":{"nodeType":"YulBlock","src":"27577:156:27","statements":[{"nodeType":"YulVariableDeclaration","src":"27595:43:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27622:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"27627:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27618:3:27"},"nodeType":"YulFunctionCall","src":"27618:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27612:5:27"},"nodeType":"YulFunctionCall","src":"27612:26:27"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"27599:9:27","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"27662:6:27"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"27689:9:27"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"27704:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"27712:4:27","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"27700:3:27"},"nodeType":"YulFunctionCall","src":"27700:17:27"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"27670:18:27"},"nodeType":"YulFunctionCall","src":"27670:48:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27655:6:27"},"nodeType":"YulFunctionCall","src":"27655:64:27"},"nodeType":"YulExpressionStatement","src":"27655:64:27"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"27560:7:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"27569:6:27"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"27557:2:27"},"nodeType":"YulFunctionCall","src":"27557:19:27"},"nodeType":"YulIf","src":"27554:179:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27753:4:27"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"27767:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"27775:1:27","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"27763:3:27"},"nodeType":"YulFunctionCall","src":"27763:14:27"},{"kind":"number","nodeType":"YulLiteral","src":"27779:1:27","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27759:3:27"},"nodeType":"YulFunctionCall","src":"27759:22:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27746:6:27"},"nodeType":"YulFunctionCall","src":"27746:36:27"},"nodeType":"YulExpressionStatement","src":"27746:36:27"}]},"nodeType":"YulCase","src":"27174:618:27","value":{"kind":"number","nodeType":"YulLiteral","src":"27179:1:27","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"27809:222:27","statements":[{"nodeType":"YulVariableDeclaration","src":"27823:14:27","value":{"kind":"number","nodeType":"YulLiteral","src":"27836:1:27","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"27827:5:27","type":""}]},{"body":{"nodeType":"YulBlock","src":"27860:67:27","statements":[{"nodeType":"YulAssignment","src":"27878:35:27","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"27897:3:27"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"27902:9:27"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27893:3:27"},"nodeType":"YulFunctionCall","src":"27893:19:27"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"27887:5:27"},"nodeType":"YulFunctionCall","src":"27887:26:27"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"27878:5:27"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"27853:6:27"},"nodeType":"YulIf","src":"27850:77:27"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"27947:4:27"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"28006:5:27"},{"name":"newLen","nodeType":"YulIdentifier","src":"28013:6:27"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"27953:52:27"},"nodeType":"YulFunctionCall","src":"27953:67:27"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"27940:6:27"},"nodeType":"YulFunctionCall","src":"27940:81:27"},"nodeType":"YulExpressionStatement","src":"27940:81:27"}]},"nodeType":"YulCase","src":"27801:230:27","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"27154:6:27"},{"kind":"number","nodeType":"YulLiteral","src":"27162:2:27","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"27151:2:27"},"nodeType":"YulFunctionCall","src":"27151:14:27"},"nodeType":"YulSwitch","src":"27144:887:27"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"26723:4:27","type":""},{"name":"src","nodeType":"YulTypedName","src":"26729:3:27","type":""}],"src":"26642:1395:27"},{"body":{"nodeType":"YulBlock","src":"28169:206:27","statements":[{"nodeType":"YulAssignment","src":"28179:26:27","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28191:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28202:2:27","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28187:3:27"},"nodeType":"YulFunctionCall","src":"28187:18:27"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28179:4:27"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"28259:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28272:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28283:1:27","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28268:3:27"},"nodeType":"YulFunctionCall","src":"28268:17:27"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"28215:43:27"},"nodeType":"YulFunctionCall","src":"28215:71:27"},"nodeType":"YulExpressionStatement","src":"28215:71:27"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"28340:6:27"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28353:9:27"},{"kind":"number","nodeType":"YulLiteral","src":"28364:2:27","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28349:3:27"},"nodeType":"YulFunctionCall","src":"28349:18:27"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"28296:43:27"},"nodeType":"YulFunctionCall","src":"28296:72:27"},"nodeType":"YulExpressionStatement","src":"28296:72:27"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28133:9:27","type":""},{"name":"value1","nodeType":"YulTypedName","src":"28145:6:27","type":""},{"name":"value0","nodeType":"YulTypedName","src":"28153:6:27","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28164:4:27","type":""}],"src":"28043:332:27"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_Breed_$4582(value) {\n        if iszero(lt(value, 3)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_Breed_$4582(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_Breed_$4582(value)\n    }\n\n    function convert_t_enum$_Breed_$4582_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_Breed_$4582(value)\n    }\n\n    function abi_encode_t_enum$_Breed_$4582_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_Breed_$4582_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_enum$_Breed_$4582__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_Breed_$4582_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_array$_t_uint256_$3_memory_ptr(value) -> length {\n\n        length := 0x03\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_dataslot_t_array$_t_uint256_$3_memory_ptr(ptr) -> data {\n        data := ptr\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$3_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[3] -> uint256[3]\n    function abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack(value, pos)  {\n        let length := array_length_t_array$_t_uint256_$3_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$3_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$3_memory_ptr(srcPtr)\n        }\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n}\n","id":27,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1329":[{"length":32,"start":1726},{"length":32,"start":1810}],"4550":[{"length":32,"start":3513}],"4552":[{"length":32,"start":3606}],"4554":[{"length":32,"start":3573}],"4556":[{"length":32,"start":3641}],"4576":[{"length":32,"start":3079},{"length":32,"start":3423}]},"linkReferences":{},"object":"6080604052600436106101405760003560e01c806370a08231116100b6578063a22cb4651161006f578063a22cb46514610470578063a36f573b14610499578063aa152491146104d6578063b88d4fde146104f4578063c87b56dd1461051d578063e985e9c51461055a57610140565b806370a082311461034a57806373d9aa2b146103875780637a5caab3146103c4578063893d20e8146103ef5780638a8572011461041a57806395d89b411461044557610140565b806323b872dd1161010857806323b872dd1461023c5780633af25975146102655780633ccfd60b146102a257806342842e0e146102b95780636352211e146102e25780636e02007d1461031f57610140565b806301ffc9a71461014557806306fdde0314610182578063081812fc146101ad578063095ea7b3146101ea5780631fe543e314610213575b600080fd5b34801561015157600080fd5b5061016c6004803603810190610167919061227b565b610597565b60405161017991906122c3565b60405180910390f35b34801561018e57600080fd5b506101976105f8565b6040516101a4919061236e565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf91906123c6565b61068a565b6040516101e19190612434565b60405180910390f35b3480156101f657600080fd5b50610211600480360381019061020c919061247b565b6106a6565b005b34801561021f57600080fd5b5061023a60048036038101906102359190612603565b6106bc565b005b34801561024857600080fd5b50610263600480360381019061025e919061265f565b61077c565b005b34801561027157600080fd5b5061028c600480360381019061028791906123c6565b61087e565b604051610299919061236e565b60405180910390f35b3480156102ae57600080fd5b506102b761092e565b005b3480156102c557600080fd5b506102e060048036038101906102db919061265f565b610a46565b005b3480156102ee57600080fd5b50610309600480360381019061030491906123c6565b610a66565b6040516103169190612434565b60405180910390f35b34801561032b57600080fd5b50610334610a78565b60405161034191906126c1565b60405180910390f35b34801561035657600080fd5b50610371600480360381019061036c91906126dc565b610a82565b60405161037e91906126c1565b60405180910390f35b34801561039357600080fd5b506103ae60048036038101906103a991906123c6565b610b3c565b6040516103bb9190612780565b60405180910390f35b3480156103d057600080fd5b506103d9610c03565b6040516103e691906126c1565b60405180910390f35b3480156103fb57600080fd5b50610404610c2b565b6040516104119190612434565b60405180910390f35b34801561042657600080fd5b5061042f610c55565b60405161043c9190612846565b60405180910390f35b34801561045157600080fd5b5061045a610c80565b604051610467919061236e565b60405180910390f35b34801561047c57600080fd5b506104976004803603810190610492919061288d565b610d12565b005b3480156104a557600080fd5b506104c060048036038101906104bb91906123c6565b610d28565b6040516104cd9190612434565b60405180910390f35b6104de610d5b565b6040516104eb91906126c1565b60405180910390f35b34801561050057600080fd5b5061051b60048036038101906105169190612982565b610f58565b005b34801561052957600080fd5b50610544600480360381019061053f91906123c6565b610f75565b604051610551919061236e565b60405180910390f35b34801561056657600080fd5b50610581600480360381019061057c9190612a05565b611088565b60405161058e91906122c3565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f157506105f08261111c565b5b9050919050565b60606000805461060790612a74565b80601f016020809104026020016040519081016040528092919081815260200182805461063390612a74565b80156106805780601f1061065557610100808354040283529160200191610680565b820191906000526020600020905b81548152906001019060200180831161066357829003601f168201915b5050505050905090565b6000610695826111fe565b5061069f82611286565b9050919050565b6106b882826106b36112c3565b6112cb565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610765929190612aa5565b60405180910390fd5b61077882826112dd565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107ee5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016107e59190612434565b60405180910390fd5b600061080283836107fd6112c3565b61148c565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610878578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161086f93929190612ace565b60405180910390fd5b50505050565b60606009828154811061089457610893612b05565b5b9060005260206000200180546108a990612a74565b80601f01602080910402602001604051908101604052809291908181526020018280546108d590612a74565b80156109225780601f106108f757610100808354040283529160200191610922565b820191906000526020600020905b81548152906001019060200180831161090557829003601f168201915b50505050509050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661094d610c2b565b73ffffffffffffffffffffffffffffffffffffffff161461099a576040517ff65f0ddd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600047905060003373ffffffffffffffffffffffffffffffffffffffff16826040516109c590612b65565b60006040518083038185875af1925050503d8060008114610a02576040519150601f19603f3d011682016040523d82523d6000602084013e610a07565b606091505b5050905080610a42576040517f9f96a15000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610a6183838360405180602001604052806000815250610f58565b505050565b6000610a71826111fe565b9050919050565b6000600854905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610af55760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610aec9190612434565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080610b47610c55565b90506000805b6003811015610bcb57818510158015610b7c5750828160038110610b7457610b73612b05565b5b602002015185105b15610b9e57806002811115610b9457610b93612709565b5b9350505050610bfe565b828160038110610bb157610bb0612b05565b5b602002015191508080610bc390612ba9565b915050610b4d565b506040517fe9636add00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c5d6121ed565b6040518060600160405280600a8152602001601e81526020016064815250905090565b606060018054610c8f90612a74565b80601f0160208091040260200160405190810160405280929190818152602001828054610cbb90612a74565b8015610d085780601f10610cdd57610100808354040283529160200191610d08565b820191906000526020600020905b815481529060010190602001808311610ceb57829003601f168201915b5050505050905090565b610d24610d1d6112c3565b83836116a6565b5050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000341015610db7576040517f7bb4756200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610e7a959493929190612c69565b6020604051808303816000875af1158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190612cd1565b9050336007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff16817ff873236e6cc0ecc5be1a9a35c95ee5b8d1ac4cc7bfef0cc5060391d6cc98e26b60405160405180910390a390565b610f6384848461077c565b610f6f84848484611815565b50505050565b6060610f80826111fe565b506000600660008481526020019081526020016000208054610fa190612a74565b80601f0160208091040260200160405190810160405280929190818152602001828054610fcd90612a74565b801561101a5780601f10610fef5761010080835404028352916020019161101a565b820191906000526020600020905b815481529060010190602001808311610ffd57829003601f168201915b50505050509050600061102b6119cc565b90506000815103611040578192505050611083565b60008251111561107557808260405160200161105d929190612d3a565b60405160208183030381529060405292505050611083565b61107e846119e3565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806111e757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806111f757506111f682611a4c565b5b9050919050565b60008061120a83611ab6565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361127d57826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161127491906126c1565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6112d88383836001611af3565b505050565b60006007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060085490506008600081548092919061132f90612ba9565b9190505550600060648460008151811061134c5761134b612b05565b5b602002602001015161135e9190612d8d565b9050600061136b82610b3c565b90506113778484611cb8565b6114398360098360028111156113905761138f612709565b5b815481106113a1576113a0612b05565b5b9060005260206000200180546113b690612a74565b80601f01602080910402602001604051908101604052809291908181526020018280546113e290612a74565b801561142f5780601f106114045761010080835404028352916020019161142f565b820191906000526020600020905b81548152906001019060200180831161141257829003601f168201915b5050505050611cd6565b80600281111561144c5761144b612709565b5b837f826d84de86b9d47351ad75c90b9a8b7211e761e448ccd64623fc26341dd0b8dc8660405161147c9190612434565b60405180910390a3505050505050565b60008061149884611ab6565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146114da576114d9818486611d32565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461156b5761151c600085600080611af3565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146115ee576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361171757816040517f5b08ba1800000000000000000000000000000000000000000000000000000000815260040161170e9190612434565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161180891906122c3565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156119c6578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026118596112c3565b8685856040518563ffffffff1660e01b815260040161187b9493929190612e13565b6020604051808303816000875af19250505080156118b757506040513d601f19601f820116820180604052508101906118b49190612e74565b60015b61193b573d80600081146118e7576040519150601f19603f3d011682016040523d82523d6000602084013e6118ec565b606091505b50600081510361193357836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161192a9190612434565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146119c457836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016119bb9190612434565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b60606119ee826111fe565b5060006119f96119cc565b90506000815111611a195760405180602001604052806000815250611a44565b80611a2384611df6565b604051602001611a34929190612d3a565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611b2c5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611c60576000611b3c846111fe565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611ba757508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611bba5750611bb88184611088565b155b15611bfc57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611bf39190612434565b60405180910390fd5b8115611c5e57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611cd2828260405180602001604052806000815250611ec4565b5050565b80600660008481526020019081526020016000209081611cf6919061304d565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051611d2691906126c1565b60405180910390a15050565b611d3d838383611ee0565b611df157600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611db257806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611da991906126c1565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611de892919061311f565b60405180910390fd5b505050565b606060006001611e0584611fa1565b01905060008167ffffffffffffffff811115611e2457611e236124c0565b5b6040519080825280601f01601f191660200182016040528015611e565781602001600182028036833780820191505090505b509050600082602001820190505b600115611eb9578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611ead57611eac612d5e565b5b04945060008503611e64575b819350505050919050565b611ece83836120f4565b611edb6000848484611815565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f9857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611f595750611f588484611088565b5b80611f9757508273ffffffffffffffffffffffffffffffffffffffff16611f7f83611286565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611fff577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ff557611ff4612d5e565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061203c576d04ee2d6d415b85acef8100000000838161203257612031612d5e565b5b0492506020810190505b662386f26fc10000831061206b57662386f26fc10000838161206157612060612d5e565b5b0492506010810190505b6305f5e1008310612094576305f5e100838161208a57612089612d5e565b5b0492506008810190505b61271083106120b95761271083816120af576120ae612d5e565b5b0492506004810190505b606483106120dc57606483816120d2576120d1612d5e565b5b0492506002810190505b600a83106120eb576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121665760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161215d9190612434565b60405180910390fd5b60006121748383600061148c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146121e85760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016121df9190612434565b60405180910390fd5b505050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61225881612223565b811461226357600080fd5b50565b6000813590506122758161224f565b92915050565b60006020828403121561229157612290612219565b5b600061229f84828501612266565b91505092915050565b60008115159050919050565b6122bd816122a8565b82525050565b60006020820190506122d860008301846122b4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123185780820151818401526020810190506122fd565b60008484015250505050565b6000601f19601f8301169050919050565b6000612340826122de565b61234a81856122e9565b935061235a8185602086016122fa565b61236381612324565b840191505092915050565b600060208201905081810360008301526123888184612335565b905092915050565b6000819050919050565b6123a381612390565b81146123ae57600080fd5b50565b6000813590506123c08161239a565b92915050565b6000602082840312156123dc576123db612219565b5b60006123ea848285016123b1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061241e826123f3565b9050919050565b61242e81612413565b82525050565b60006020820190506124496000830184612425565b92915050565b61245881612413565b811461246357600080fd5b50565b6000813590506124758161244f565b92915050565b6000806040838503121561249257612491612219565b5b60006124a085828601612466565b92505060206124b1858286016123b1565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124f882612324565b810181811067ffffffffffffffff82111715612517576125166124c0565b5b80604052505050565b600061252a61220f565b905061253682826124ef565b919050565b600067ffffffffffffffff821115612556576125556124c0565b5b602082029050602081019050919050565b600080fd5b600061257f61257a8461253b565b612520565b905080838252602082019050602084028301858111156125a2576125a1612567565b5b835b818110156125cb57806125b788826123b1565b8452602084019350506020810190506125a4565b5050509392505050565b600082601f8301126125ea576125e96124bb565b5b81356125fa84826020860161256c565b91505092915050565b6000806040838503121561261a57612619612219565b5b6000612628858286016123b1565b925050602083013567ffffffffffffffff8111156126495761264861221e565b5b612655858286016125d5565b9150509250929050565b60008060006060848603121561267857612677612219565b5b600061268686828701612466565b935050602061269786828701612466565b92505060406126a8868287016123b1565b9150509250925092565b6126bb81612390565b82525050565b60006020820190506126d660008301846126b2565b92915050565b6000602082840312156126f2576126f1612219565b5b600061270084828501612466565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061274957612748612709565b5b50565b600081905061275a82612738565b919050565b600061276a8261274c565b9050919050565b61277a8161275f565b82525050565b60006020820190506127956000830184612771565b92915050565b600060039050919050565b600081905092915050565b6000819050919050565b6127c481612390565b82525050565b60006127d683836127bb565b60208301905092915050565b6000602082019050919050565b6127f88161279b565b61280281846127a6565b925061280d826127b1565b8060005b8381101561283e57815161282587826127ca565b9650612830836127e2565b925050600181019050612811565b505050505050565b600060608201905061285b60008301846127ef565b92915050565b61286a816122a8565b811461287557600080fd5b50565b60008135905061288781612861565b92915050565b600080604083850312156128a4576128a3612219565b5b60006128b285828601612466565b92505060206128c385828601612878565b9150509250929050565b600080fd5b600067ffffffffffffffff8211156128ed576128ec6124c0565b5b6128f682612324565b9050602081019050919050565b82818337600083830152505050565b6000612925612920846128d2565b612520565b905082815260208101848484011115612941576129406128cd565b5b61294c848285612903565b509392505050565b600082601f830112612969576129686124bb565b5b8135612979848260208601612912565b91505092915050565b6000806000806080858703121561299c5761299b612219565b5b60006129aa87828801612466565b94505060206129bb87828801612466565b93505060406129cc878288016123b1565b925050606085013567ffffffffffffffff8111156129ed576129ec61221e565b5b6129f987828801612954565b91505092959194509250565b60008060408385031215612a1c57612a1b612219565b5b6000612a2a85828601612466565b9250506020612a3b85828601612466565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a8c57607f821691505b602082108103612a9f57612a9e612a45565b5b50919050565b6000604082019050612aba6000830185612425565b612ac76020830184612425565b9392505050565b6000606082019050612ae36000830186612425565b612af060208301856126b2565b612afd6040830184612425565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081905092915050565b50565b6000612b4f600083612b34565b9150612b5a82612b3f565b600082019050919050565b6000612b7082612b42565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612bb482612390565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612be657612be5612b7a565b5b600182019050919050565b6000819050919050565b612c0481612bf1565b82525050565b600067ffffffffffffffff82169050919050565b612c2781612c0a565b82525050565b600061ffff82169050919050565b612c4481612c2d565b82525050565b600063ffffffff82169050919050565b612c6381612c4a565b82525050565b600060a082019050612c7e6000830188612bfb565b612c8b6020830187612c1e565b612c986040830186612c3b565b612ca56060830185612c5a565b612cb26080830184612c5a565b9695505050505050565b600081519050612ccb8161239a565b92915050565b600060208284031215612ce757612ce6612219565b5b6000612cf584828501612cbc565b91505092915050565b600081905092915050565b6000612d14826122de565b612d1e8185612cfe565b9350612d2e8185602086016122fa565b80840191505092915050565b6000612d468285612d09565b9150612d528284612d09565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d9882612390565b9150612da383612390565b925082612db357612db2612d5e565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000612de582612dbe565b612def8185612dc9565b9350612dff8185602086016122fa565b612e0881612324565b840191505092915050565b6000608082019050612e286000830187612425565b612e356020830186612425565b612e4260408301856126b2565b8181036060830152612e548184612dda565b905095945050505050565b600081519050612e6e8161224f565b92915050565b600060208284031215612e8a57612e89612219565b5b6000612e9884828501612e5f565b91505092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612f037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612ec6565b612f0d8683612ec6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612f4a612f45612f4084612390565b612f25565b612390565b9050919050565b6000819050919050565b612f6483612f2f565b612f78612f7082612f51565b848454612ed3565b825550505050565b600090565b612f8d612f80565b612f98818484612f5b565b505050565b5b81811015612fbc57612fb1600082612f85565b600181019050612f9e565b5050565b601f82111561300157612fd281612ea1565b612fdb84612eb6565b81016020851015612fea578190505b612ffe612ff685612eb6565b830182612f9d565b50505b505050565b600082821c905092915050565b600061302460001984600802613006565b1980831691505092915050565b600061303d8383613013565b9150826002028217905092915050565b613056826122de565b67ffffffffffffffff81111561306f5761306e6124c0565b5b6130798254612a74565b613084828285612fc0565b600060209050601f8311600181146130b757600084156130a5578287015190505b6130af8582613031565b865550613117565b601f1984166130c586612ea1565b60005b828110156130ed578489015182556001820191506020850194506020810190506130c8565b8683101561310a5784890151613106601f891682613013565b8355505b6001600288020188555050505b505050505050565b60006040820190506131346000830185612425565b61314160208301846126b2565b939250505056fea26469706673582212205ad07ec5e1d8a224271bf3a2d285b387108e050aa5c8429ed67cdcc2bd32977e64736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xA36F573B EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0xAA152491 EQ PUSH2 0x4D6 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x51D JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x55A JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x73D9AA2B EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0x7A5CAAB3 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0x893D20E8 EQ PUSH2 0x3EF JUMPI DUP1 PUSH4 0x8A857201 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x445 JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x3AF25975 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2E2 JUMPI DUP1 PUSH4 0x6E02007D EQ PUSH2 0x31F JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x213 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x227B JUMP JUMPDEST PUSH2 0x597 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x179 SWAP2 SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x197 PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A4 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1CF SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0x68A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E1 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x211 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20C SWAP2 SWAP1 PUSH2 0x247B JUMP JUMPDEST PUSH2 0x6A6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x235 SWAP2 SWAP1 PUSH2 0x2603 JUMP JUMPDEST PUSH2 0x6BC JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x263 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x265F JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x287 SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0x87E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x299 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B7 PUSH2 0x92E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2DB SWAP2 SWAP1 PUSH2 0x265F JUMP JUMPDEST PUSH2 0xA46 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x304 SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xA66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x316 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x334 PUSH2 0xA78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x341 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x356 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x371 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36C SWAP2 SWAP1 PUSH2 0x26DC JUMP JUMPDEST PUSH2 0xA82 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37E SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A9 SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xB3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0x2780 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3D9 PUSH2 0xC03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3E6 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x404 PUSH2 0xC2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x411 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x426 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x42F PUSH2 0xC55 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x43C SWAP2 SWAP1 PUSH2 0x2846 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45A PUSH2 0xC80 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x467 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x47C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x492 SWAP2 SWAP1 PUSH2 0x288D JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x4BB SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xD28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4CD SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4DE PUSH2 0xD5B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x4EB SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x51B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x516 SWAP2 SWAP1 PUSH2 0x2982 JUMP JUMPDEST PUSH2 0xF58 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x544 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x53F SWAP2 SWAP1 PUSH2 0x23C6 JUMP JUMPDEST PUSH2 0xF75 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x551 SWAP2 SWAP1 PUSH2 0x236E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x566 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x581 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x57C SWAP2 SWAP1 PUSH2 0x2A05 JUMP JUMPDEST PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58E SWAP2 SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x5F1 JUMPI POP PUSH2 0x5F0 DUP3 PUSH2 0x111C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x607 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x633 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x680 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x655 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x680 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x663 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x695 DUP3 PUSH2 0x11FE JUMP JUMPDEST POP PUSH2 0x69F DUP3 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6B8 DUP3 DUP3 PUSH2 0x6B3 PUSH2 0x12C3 JUMP JUMPDEST PUSH2 0x12CB JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76E JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x765 SWAP3 SWAP2 SWAP1 PUSH2 0x2AA5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x778 DUP3 DUP3 PUSH2 0x12DD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x7EE JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E5 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x802 DUP4 DUP4 PUSH2 0x7FD PUSH2 0x12C3 JUMP JUMPDEST PUSH2 0x148C JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x878 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x86F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2ACE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x9 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x894 JUMPI PUSH2 0x893 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x8A9 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8D5 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x922 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x8F7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x922 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x905 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x94D PUSH2 0xC2B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x99A JUMPI PUSH1 0x40 MLOAD PUSH32 0xF65F0DDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x9C5 SWAP1 PUSH2 0x2B65 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA07 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9F96A15000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA61 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xF58 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA71 DUP3 PUSH2 0x11FE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAF5 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAEC SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB47 PUSH2 0xC55 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xBCB JUMPI DUP2 DUP6 LT ISZERO DUP1 ISZERO PUSH2 0xB7C JUMPI POP DUP3 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xB74 JUMPI PUSH2 0xB73 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP6 LT JUMPDEST ISZERO PUSH2 0xB9E JUMPI DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB94 JUMPI PUSH2 0xB93 PUSH2 0x2709 JUMP JUMPDEST JUMPDEST SWAP4 POP POP POP POP PUSH2 0xBFE JUMP JUMPDEST DUP3 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xBB1 JUMPI PUSH2 0xBB0 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD SWAP2 POP DUP1 DUP1 PUSH2 0xBC3 SWAP1 PUSH2 0x2BA9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xB4D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0xE9636ADD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC5D PUSH2 0x21ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x64 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0xC8F SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xCBB SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD08 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCDD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD08 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCEB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xD24 PUSH2 0xD1D PUSH2 0x12C3 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x16A6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0xDB7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BB4756200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE7A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2C69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xE99 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEBD SWAP2 SWAP1 PUSH2 0x2CD1 JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH32 0xF873236E6CC0ECC5BE1A9A35C95EE5B8D1AC4CC7BFEF0CC5060391D6CC98E26B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP1 JUMP JUMPDEST PUSH2 0xF63 DUP5 DUP5 DUP5 PUSH2 0x77C JUMP JUMPDEST PUSH2 0xF6F DUP5 DUP5 DUP5 DUP5 PUSH2 0x1815 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF80 DUP3 PUSH2 0x11FE JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0xFA1 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFCD SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x101A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFEF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x101A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFFD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x102B PUSH2 0x19CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1040 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x1075 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x105D SWAP3 SWAP2 SWAP1 PUSH2 0x2D3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x1083 JUMP JUMPDEST PUSH2 0x107E DUP5 PUSH2 0x19E3 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x11E7 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x11F7 JUMPI POP PUSH2 0x11F6 DUP3 PUSH2 0x1A4C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x120A DUP4 PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x127D JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1274 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x12D8 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1AF3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x8 SLOAD SWAP1 POP PUSH1 0x8 PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x132F SWAP1 PUSH2 0x2BA9 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP PUSH1 0x0 PUSH1 0x64 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x134C JUMPI PUSH2 0x134B PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x135E SWAP2 SWAP1 PUSH2 0x2D8D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x136B DUP3 PUSH2 0xB3C JUMP JUMPDEST SWAP1 POP PUSH2 0x1377 DUP5 DUP5 PUSH2 0x1CB8 JUMP JUMPDEST PUSH2 0x1439 DUP4 PUSH1 0x9 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1390 JUMPI PUSH2 0x138F PUSH2 0x2709 JUMP JUMPDEST JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x13A1 JUMPI PUSH2 0x13A0 PUSH2 0x2B05 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP1 SLOAD PUSH2 0x13B6 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13E2 SWAP1 PUSH2 0x2A74 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x142F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1404 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x142F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1412 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x1CD6 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x144C JUMPI PUSH2 0x144B PUSH2 0x2709 JUMP JUMPDEST JUMPDEST DUP4 PUSH32 0x826D84DE86B9D47351AD75C90B9A8B7211E761E448CCD64623FC26341DD0B8DC DUP7 PUSH1 0x40 MLOAD PUSH2 0x147C SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1498 DUP5 PUSH2 0x1AB6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14DA JUMPI PUSH2 0x14D9 DUP2 DUP5 DUP7 PUSH2 0x1D32 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x156B JUMPI PUSH2 0x151C PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1AF3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15EE JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1717 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x170E SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1808 SWAP2 SWAP1 PUSH2 0x22C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x19C6 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1859 PUSH2 0x12C3 JUMP JUMPDEST DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x187B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2E13 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x18B7 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x18B4 SWAP2 SWAP1 PUSH2 0x2E74 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x193B JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18E7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18EC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1933 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x192A SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x19C4 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19BB SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19EE DUP3 PUSH2 0x11FE JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x19F9 PUSH2 0x19CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1A19 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A44 JUMP JUMPDEST DUP1 PUSH2 0x1A23 DUP5 PUSH2 0x1DF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A34 SWAP3 SWAP2 SWAP1 PUSH2 0x2D3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x1B2C JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1C60 JUMPI PUSH1 0x0 PUSH2 0x1B3C DUP5 PUSH2 0x11FE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1BA7 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x1BBA JUMPI POP PUSH2 0x1BB8 DUP2 DUP5 PUSH2 0x1088 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1BFC JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BF3 SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1C5E JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1CD2 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1EC4 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0x1CF6 SWAP2 SWAP1 PUSH2 0x304D JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1D26 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1D3D DUP4 DUP4 DUP4 PUSH2 0x1EE0 JUMP JUMPDEST PUSH2 0x1DF1 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1DB2 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DA9 SWAP2 SWAP1 PUSH2 0x26C1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DE8 SWAP3 SWAP2 SWAP1 PUSH2 0x311F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1E05 DUP5 PUSH2 0x1FA1 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E24 JUMPI PUSH2 0x1E23 PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E56 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1EB9 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1EAD JUMPI PUSH2 0x1EAC PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x1E64 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ECE DUP4 DUP4 PUSH2 0x20F4 JUMP JUMPDEST PUSH2 0x1EDB PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x1815 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1F98 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x1F59 JUMPI POP PUSH2 0x1F58 DUP5 DUP5 PUSH2 0x1088 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x1F97 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1F7F DUP4 PUSH2 0x1286 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1FFF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1FF5 JUMPI PUSH2 0x1FF4 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x203C JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2032 JUMPI PUSH2 0x2031 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x206B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2061 JUMPI PUSH2 0x2060 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2094 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x208A JUMPI PUSH2 0x2089 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x20B9 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x20AF JUMPI PUSH2 0x20AE PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x20DC JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x20D2 JUMPI PUSH2 0x20D1 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x20EB JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2166 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x215D SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2174 DUP4 DUP4 PUSH1 0x0 PUSH2 0x148C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x21E8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x21DF SWAP2 SWAP1 PUSH2 0x2434 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2258 DUP2 PUSH2 0x2223 JUMP JUMPDEST DUP2 EQ PUSH2 0x2263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2275 DUP2 PUSH2 0x224F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2291 JUMPI PUSH2 0x2290 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x229F DUP5 DUP3 DUP6 ADD PUSH2 0x2266 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22BD DUP2 PUSH2 0x22A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x22D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2318 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x22FD JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2340 DUP3 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x234A DUP2 DUP6 PUSH2 0x22E9 JUMP JUMPDEST SWAP4 POP PUSH2 0x235A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x22FA JUMP JUMPDEST PUSH2 0x2363 DUP2 PUSH2 0x2324 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2388 DUP2 DUP5 PUSH2 0x2335 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x23A3 DUP2 PUSH2 0x2390 JUMP JUMPDEST DUP2 EQ PUSH2 0x23AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x23C0 DUP2 PUSH2 0x239A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23DC JUMPI PUSH2 0x23DB PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23EA DUP5 DUP3 DUP6 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x241E DUP3 PUSH2 0x23F3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x242E DUP2 PUSH2 0x2413 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2449 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2425 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2458 DUP2 PUSH2 0x2413 JUMP JUMPDEST DUP2 EQ PUSH2 0x2463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2475 DUP2 PUSH2 0x244F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2492 JUMPI PUSH2 0x2491 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24A0 DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24B1 DUP6 DUP3 DUP7 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x24F8 DUP3 PUSH2 0x2324 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2517 JUMPI PUSH2 0x2516 PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x252A PUSH2 0x220F JUMP JUMPDEST SWAP1 POP PUSH2 0x2536 DUP3 DUP3 PUSH2 0x24EF JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2556 JUMPI PUSH2 0x2555 PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x257F PUSH2 0x257A DUP5 PUSH2 0x253B JUMP JUMPDEST PUSH2 0x2520 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x25A2 JUMPI PUSH2 0x25A1 PUSH2 0x2567 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x25CB JUMPI DUP1 PUSH2 0x25B7 DUP9 DUP3 PUSH2 0x23B1 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x25A4 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25EA JUMPI PUSH2 0x25E9 PUSH2 0x24BB JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x25FA DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x256C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x261A JUMPI PUSH2 0x2619 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2628 DUP6 DUP3 DUP7 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2649 JUMPI PUSH2 0x2648 PUSH2 0x221E JUMP JUMPDEST JUMPDEST PUSH2 0x2655 DUP6 DUP3 DUP7 ADD PUSH2 0x25D5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2678 JUMPI PUSH2 0x2677 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2686 DUP7 DUP3 DUP8 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2697 DUP7 DUP3 DUP8 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x26A8 DUP7 DUP3 DUP8 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x26BB DUP2 PUSH2 0x2390 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x26D6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x26B2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x26F2 JUMPI PUSH2 0x26F1 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2700 DUP5 DUP3 DUP6 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x2749 JUMPI PUSH2 0x2748 PUSH2 0x2709 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x275A DUP3 PUSH2 0x2738 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x276A DUP3 PUSH2 0x274C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x277A DUP2 PUSH2 0x275F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2795 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2771 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27C4 DUP2 PUSH2 0x2390 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27D6 DUP4 DUP4 PUSH2 0x27BB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27F8 DUP2 PUSH2 0x279B JUMP JUMPDEST PUSH2 0x2802 DUP2 DUP5 PUSH2 0x27A6 JUMP JUMPDEST SWAP3 POP PUSH2 0x280D DUP3 PUSH2 0x27B1 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x283E JUMPI DUP2 MLOAD PUSH2 0x2825 DUP8 DUP3 PUSH2 0x27CA JUMP JUMPDEST SWAP7 POP PUSH2 0x2830 DUP4 PUSH2 0x27E2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2811 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x285B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x27EF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x286A DUP2 PUSH2 0x22A8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2875 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2887 DUP2 PUSH2 0x2861 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x28A4 JUMPI PUSH2 0x28A3 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x28B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x28C3 DUP6 DUP3 DUP7 ADD PUSH2 0x2878 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x28ED JUMPI PUSH2 0x28EC PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH2 0x28F6 DUP3 PUSH2 0x2324 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2925 PUSH2 0x2920 DUP5 PUSH2 0x28D2 JUMP JUMPDEST PUSH2 0x2520 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2941 JUMPI PUSH2 0x2940 PUSH2 0x28CD JUMP JUMPDEST JUMPDEST PUSH2 0x294C DUP5 DUP3 DUP6 PUSH2 0x2903 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2969 JUMPI PUSH2 0x2968 PUSH2 0x24BB JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2979 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2912 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x299C JUMPI PUSH2 0x299B PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x29AA DUP8 DUP3 DUP9 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x29BB DUP8 DUP3 DUP9 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x29CC DUP8 DUP3 DUP9 ADD PUSH2 0x23B1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x29ED JUMPI PUSH2 0x29EC PUSH2 0x221E JUMP JUMPDEST JUMPDEST PUSH2 0x29F9 DUP8 DUP3 DUP9 ADD PUSH2 0x2954 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2A1C JUMPI PUSH2 0x2A1B PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2A2A DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2A3B DUP6 DUP3 DUP7 ADD PUSH2 0x2466 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2A8C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2A9F JUMPI PUSH2 0x2A9E PUSH2 0x2A45 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2ABA PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2AC7 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2425 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2AE3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2AF0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x26B2 JUMP JUMPDEST PUSH2 0x2AFD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2425 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B4F PUSH1 0x0 DUP4 PUSH2 0x2B34 JUMP JUMPDEST SWAP2 POP PUSH2 0x2B5A DUP3 PUSH2 0x2B3F JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B70 DUP3 PUSH2 0x2B42 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2BB4 DUP3 PUSH2 0x2390 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2BE6 JUMPI PUSH2 0x2BE5 PUSH2 0x2B7A JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C04 DUP2 PUSH2 0x2BF1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C27 DUP2 PUSH2 0x2C0A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C44 DUP2 PUSH2 0x2C2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2C63 DUP2 PUSH2 0x2C4A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2C7E PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2BFB JUMP JUMPDEST PUSH2 0x2C8B PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2C1E JUMP JUMPDEST PUSH2 0x2C98 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x2C3B JUMP JUMPDEST PUSH2 0x2CA5 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x2C5A JUMP JUMPDEST PUSH2 0x2CB2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2C5A JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2CCB DUP2 PUSH2 0x239A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CE7 JUMPI PUSH2 0x2CE6 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CF5 DUP5 DUP3 DUP6 ADD PUSH2 0x2CBC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D14 DUP3 PUSH2 0x22DE JUMP JUMPDEST PUSH2 0x2D1E DUP2 DUP6 PUSH2 0x2CFE JUMP JUMPDEST SWAP4 POP PUSH2 0x2D2E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x22FA JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D46 DUP3 DUP6 PUSH2 0x2D09 JUMP JUMPDEST SWAP2 POP PUSH2 0x2D52 DUP3 DUP5 PUSH2 0x2D09 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2D98 DUP3 PUSH2 0x2390 JUMP JUMPDEST SWAP2 POP PUSH2 0x2DA3 DUP4 PUSH2 0x2390 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2DB3 JUMPI PUSH2 0x2DB2 PUSH2 0x2D5E JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2DE5 DUP3 PUSH2 0x2DBE JUMP JUMPDEST PUSH2 0x2DEF DUP2 DUP6 PUSH2 0x2DC9 JUMP JUMPDEST SWAP4 POP PUSH2 0x2DFF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x22FA JUMP JUMPDEST PUSH2 0x2E08 DUP2 PUSH2 0x2324 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2E28 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2E35 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x2E42 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x26B2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2E54 DUP2 DUP5 PUSH2 0x2DDA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2E6E DUP2 PUSH2 0x224F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2E8A JUMPI PUSH2 0x2E89 PUSH2 0x2219 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2E98 DUP5 DUP3 DUP6 ADD PUSH2 0x2E5F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x2F03 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2EC6 JUMP JUMPDEST PUSH2 0x2F0D DUP7 DUP4 PUSH2 0x2EC6 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F4A PUSH2 0x2F45 PUSH2 0x2F40 DUP5 PUSH2 0x2390 JUMP JUMPDEST PUSH2 0x2F25 JUMP JUMPDEST PUSH2 0x2390 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2F64 DUP4 PUSH2 0x2F2F JUMP JUMPDEST PUSH2 0x2F78 PUSH2 0x2F70 DUP3 PUSH2 0x2F51 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2ED3 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F8D PUSH2 0x2F80 JUMP JUMPDEST PUSH2 0x2F98 DUP2 DUP5 DUP5 PUSH2 0x2F5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2FBC JUMPI PUSH2 0x2FB1 PUSH1 0x0 DUP3 PUSH2 0x2F85 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x2F9E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3001 JUMPI PUSH2 0x2FD2 DUP2 PUSH2 0x2EA1 JUMP JUMPDEST PUSH2 0x2FDB DUP5 PUSH2 0x2EB6 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2FEA JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x2FFE PUSH2 0x2FF6 DUP6 PUSH2 0x2EB6 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x2F9D JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3024 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x3006 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x303D DUP4 DUP4 PUSH2 0x3013 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3056 DUP3 PUSH2 0x22DE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x306F JUMPI PUSH2 0x306E PUSH2 0x24C0 JUMP JUMPDEST JUMPDEST PUSH2 0x3079 DUP3 SLOAD PUSH2 0x2A74 JUMP JUMPDEST PUSH2 0x3084 DUP3 DUP3 DUP6 PUSH2 0x2FC0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x30B7 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x30A5 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x30AF DUP6 DUP3 PUSH2 0x3031 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x3117 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x30C5 DUP7 PUSH2 0x2EA1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x30ED JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x30C8 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x310A JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x3106 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x3013 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x3134 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2425 JUMP JUMPDEST PUSH2 0x3141 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x26B2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xD0 PUSH31 0xC5E1D8A224271BF3A2D285B387108E050AA5C8429ED67CDCC2BD32977E6473 PUSH16 0x6C634300081400330000000000000000 ","sourceMap":"546:3524:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;937:207:15;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:89:12;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3497:154;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3323:113;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;6618:256:6;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4143:578:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3855:116:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3421:350;;;;;;;;;;;;;:::i;:::-;;4787:132:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2185:118;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3974:90:24;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1920:208:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2904:436:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3774:78;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3343:72;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2795:106;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2518:93:12;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3718:144;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;930:54:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1905:399;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4985:208:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1210:593:15;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3928:153:12;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;937:207:15;1039:4;760:10;753:18;;1062:35;;;:11;:35;;;;:75;;;;1101:36;1125:11;1101:23;:36::i;:::-;1062:75;1055:82;;937:207;;;:::o;2365:89:12:-;2410:13;2442:5;2435:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:89;:::o;3497:154::-;3564:7;3583:22;3597:7;3583:13;:22::i;:::-;;3623:21;3636:7;3623:12;:21::i;:::-;3616:28;;3497:154;;;:::o;3323:113::-;3394:35;3403:2;3407:7;3416:12;:10;:12::i;:::-;3394:8;:35::i;:::-;3323:113;;:::o;6618:256:6:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;4143:578:12:-;4251:1;4237:16;;:2;:16;;;4233:87;;4306:1;4276:33;;;;;;;;;;;:::i;:::-;;;;;;;;4233:87;4538:21;4562:34;4570:2;4574:7;4583:12;:10;:12::i;:::-;4562:7;:34::i;:::-;4538:58;;4627:4;4610:21;;:13;:21;;;4606:109;;4675:4;4681:7;4690:13;4654:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4606:109;4223:498;4143:578;;;:::o;3855:116:24:-;3916:13;3943:14;3958:5;3943:21;;;;;;;;:::i;:::-;;;;;;;;;3936:28;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3855:116;;;:::o;3421:350::-;3473:10;3459:24;;:10;:8;:10::i;:::-;:24;;;3455:104;;3507:40;;;;;;;;;;;;;;3455:104;3564:14;3581:21;3564:38;;3609:12;3635:10;3627:24;;3658:6;3627:42;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3608:61;;;3682:7;3677:89;;3708:51;;;;;;;;;;;;;;3677:89;3449:322;;3421:350::o;4787:132:12:-;4873:39;4890:4;4896:2;4900:7;4873:39;;;;;;;;;;;;:16;:39::i;:::-;4787:132;;;:::o;2185:118::-;2248:7;2274:22;2288:7;2274:13;:22::i;:::-;2267:29;;2185:118;;;:::o;3974:90:24:-;4023:7;4045:14;;4038:21;;3974:90;:::o;1920:208:12:-;1983:7;2023:1;2006:19;;:5;:19;;;2002:87;;2075:1;2048:30;;;;;;;;;;;:::i;:::-;;;;;;;;2002:87;2105:9;:16;2115:5;2105:16;;;;;;;;;;;;;;;;2098:23;;1920:208;;;:::o;2904:436:24:-;2974:5;2989:29;3021:17;:15;:17::i;:::-;2989:49;;3046:14;3080:9;3075:218;3099:18;3095:1;:22;3075:218;;;3150:6;3137:9;:19;;:49;;;;;3172:11;3184:1;3172:14;;;;;;;:::i;:::-;;;;;;3160:9;:26;3137:49;3133:106;;;3225:1;3219:8;;;;;;;;:::i;:::-;;3212:15;;;;;;;3133:106;3257:11;3269:1;3257:14;;;;;;;:::i;:::-;;;;;;3248:23;;3119:3;;;;;:::i;:::-;;;;3075:218;;;;3307:26;;;;;;;;;;;;;;2904:436;;;;:::o;3774:78::-;3816:7;3838:9;3831:16;;3774:78;:::o;3343:72::-;3383:7;3405:5;;;;;;;;;;;3398:12;;3343:72;:::o;2795:106::-;2843:17;;:::i;:::-;2870:26;;;;;;;;2878:2;2870:26;;;;2882:2;2870:26;;;;1044:3;2870:26;;;;;2795:106;:::o;2518:93:12:-;2565:13;2597:7;2590:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2518:93;:::o;3718:144::-;3803:52;3822:12;:10;:12::i;:::-;3836:8;3846;3803:18;:52::i;:::-;3718:144;;:::o;930:54:24:-;;;;;;;;;;;;;;;;;;;;;;:::o;1905:399::-;1951:17;1992:9;1980;:21;1976:86;;;2019:36;;;;;;;;;;;;;;1976:86;2080:18;:37;;;2118:9;2129:16;868:1;2170:18;909:1;2080:120;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2068:132;;2241:10;2207:19;:30;2227:9;2207:30;;;;;;;;;;;;:44;;;;;;;;;;;;;;;;;;2288:10;2263:36;;2277:9;2263:36;;;;;;;;;;1905:399;:::o;4985:208:12:-;5098:31;5111:4;5117:2;5121:7;5098:12;:31::i;:::-;5139:47;5162:4;5168:2;5172:7;5181:4;5139:22;:47::i;:::-;4985:208;;;;:::o;1210:593:15:-;1283:13;1308:22;1322:7;1308:13;:22::i;:::-;;1341:23;1367:10;:19;1378:7;1367:19;;;;;;;;;;;1341:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:18;1417:10;:8;:10::i;:::-;1396:31;;1522:1;1506:4;1500:18;:23;1496:70;;1546:9;1539:16;;;;;;1496:70;1691:1;1671:9;1665:23;:27;1661:95;;;1729:4;1735:9;1715:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1708:37;;;;;;1661:95;1773:23;1788:7;1773:14;:23::i;:::-;1766:30;;;;1210:593;;;;:::o;3928:153:12:-;4016:4;4039:18;:25;4058:5;4039:25;;;;;;;;;;;;;;;:35;4065:8;4039:35;;;;;;;;;;;;;;;;;;;;;;;;;4032:42;;3928:153;;;;:::o;1561:300::-;1663:4;1713:25;1698:40;;;:11;:40;;;;:104;;;;1769:33;1754:48;;;:11;:48;;;;1698:104;:156;;;;1818:36;1842:11;1818:23;:36::i;:::-;1698:156;1679:175;;1561:300;;;:::o;16138:241::-;16201:7;16220:13;16236:17;16245:7;16236:8;:17::i;:::-;16220:33;;16284:1;16267:19;;:5;:19;;;16263:88;;16332:7;16309:31;;;;;;;;;;;:::i;:::-;;;;;;;;16263:88;16367:5;16360:12;;;16138:241;;;:::o;5938:127::-;6008:7;6034:15;:24;6050:7;6034:24;;;;;;;;;;;;;;;;;;;;;6027:31;;5938:127;;;:::o;656:96:17:-;709:7;735:10;728:17;;656:96;:::o;14418:120:12:-;14498:33;14507:2;14511:7;14520:4;14526;14498:8;:33::i;:::-;14418:120;;;:::o;2307:483:24:-;2408:16;2428:19;:30;2448:9;2428:30;;;;;;;;;;;;;;;;;;;;;2408:50;;2464:18;2486:14;;2464:36;;2506:14;;:16;;;;;;;;;:::i;:::-;;;;;;2528:17;1044:3;2548:11;2560:1;2548:14;;;;;;;;:::i;:::-;;;;;;;;:26;;;;:::i;:::-;2528:46;;2580:14;2598:32;2620:9;2598:21;:32::i;:::-;2580:50;;2636:31;2646:8;2656:10;2636:9;:31::i;:::-;2673:60;2686:10;2699:14;2722:8;2714:17;;;;;;;;:::i;:::-;;2699:33;;;;;;;;:::i;:::-;;;;;;;;;2673:60;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:60::i;:::-;2766:8;2744:41;;;;;;;;:::i;:::-;;2754:10;2744:41;2776:8;2744:41;;;;;;:::i;:::-;;;;;;;;2402:388;;;;2307:483;;:::o;8838:795:12:-;8924:7;8943:12;8958:17;8967:7;8958:8;:17::i;:::-;8943:32;;9051:1;9035:18;;:4;:18;;;9031:86;;9069:37;9086:4;9092;9098:7;9069:16;:37::i;:::-;9031:86;9177:1;9161:18;;:4;:18;;;9157:256;;9277:48;9294:1;9298:7;9315:1;9319:5;9277:8;:48::i;:::-;9387:1;9368:9;:15;9378:4;9368:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;9157:256;9441:1;9427:16;;:2;:16;;;9423:107;;9504:1;9487:9;:13;9497:2;9487:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9423:107;9559:2;9540:7;:16;9548:7;9540:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9596:7;9592:2;9577:27;;9586:4;9577:27;;;;;;;;;;;;9622:4;9615:11;;;8838:795;;;;;:::o;15591:312::-;15718:1;15698:22;;:8;:22;;;15694:91;;15765:8;15743:31;;;;;;;;;;;:::i;:::-;;;;;;;;15694:91;15832:8;15794:18;:25;15813:5;15794:25;;;;;;;;;;;;;;;:35;15820:8;15794:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15877:8;15855:41;;15870:5;15855:41;;;15887:8;15855:41;;;;;;:::i;:::-;;;;;;;;15591:312;;;:::o;16918:782::-;17051:1;17034:2;:14;;;:18;17030:664;;;17088:2;17072:36;;;17109:12;:10;:12::i;:::-;17123:4;17129:7;17138:4;17072:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;17068:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17398:1;17381:6;:13;:18;17377:293;;17452:2;17430:25;;;;;;;;;;;:::i;:::-;;;;;;;;17377:293;17622:6;17616:13;17607:6;17603:2;17599:15;17592:38;17068:616;17200:41;;;17190:51;;;:6;:51;;;;17186:130;;17294:2;17272:25;;;;;;;;;;;:::i;:::-;;;;;;;;17186:130;17144:186;17030:664;16918:782;;;;:::o;3174:92::-;3225:13;3250:9;;;;;;;;;;;;;;3174:92;:::o;2677:255::-;2741:13;2766:22;2780:7;2766:13;:22::i;:::-;;2799:21;2823:10;:8;:10::i;:::-;2799:34;;2874:1;2856:7;2850:21;:25;:75;;;;;;;;;;;;;;;;;2892:7;2901:18;:7;:16;:18::i;:::-;2878:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2850:75;2843:82;;;2677:255;;;:::o;762:146:19:-;838:4;876:25;861:40;;;:11;:40;;;;854:47;;762:146;;;:::o;5707:115:12:-;5773:7;5799;:16;5807:7;5799:16;;;;;;;;;;;;;;;;;;;;;5792:23;;5707:115;;;:::o;14720:662::-;14880:9;:31;;;;14909:1;14893:18;;:4;:18;;;;14880:31;14876:460;;;14927:13;14943:22;14957:7;14943:13;:22::i;:::-;14927:38;;15109:1;15093:18;;:4;:18;;;;:35;;;;;15124:4;15115:13;;:5;:13;;;;15093:35;:69;;;;;15133:29;15150:5;15157:4;15133:16;:29::i;:::-;15132:30;15093:69;15089:142;;;15211:4;15189:27;;;;;;;;;;;:::i;:::-;;;;;;;;15089:142;15249:9;15245:81;;;15303:7;15299:2;15283:28;;15292:5;15283:28;;;;;;;;;;;;15245:81;14913:423;14876:460;15373:2;15346:15;:24;15362:7;15346:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14720:662;;;;:::o;10633:100::-;10700:26;10710:2;10714:7;10700:26;;;;;;;;;;;;:9;:26::i;:::-;10633:100;;:::o;1922:167:15:-;2035:9;2013:10;:19;2024:7;2013:19;;;;;;;;;;;:31;;;;;;:::i;:::-;;2059:23;2074:7;2059:23;;;;;;:::i;:::-;;;;;;;;1922:167;;:::o;7082:368:12:-;7194:38;7208:5;7215:7;7224;7194:13;:38::i;:::-;7189:255;;7269:1;7252:19;;:5;:19;;;7248:186;;7321:7;7298:31;;;;;;;;;;;:::i;:::-;;;;;;;;7248:186;7402:7;7411;7375:44;;;;;;;;;;;;:::i;:::-;;;;;;;;7189:255;7082:368;;;:::o;637:698:18:-;693:13;742:14;779:1;759:17;770:5;759:10;:17::i;:::-;:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;794:41;;849:11;975:6;971:2;967:15;959:6;955:28;948:35;;1010:282;1017:4;1010:282;;;1041:5;;;;;;;;1180:10;1175:2;1168:5;1164:14;1159:32;1154:3;1146:46;1236:2;1227:11;;;;;;:::i;:::-;;;;;1269:1;1260:5;:10;1010:282;1256:21;1010:282;1312:6;1305:13;;;;;637:698;;;:::o;10954:182:12:-;11048:18;11054:2;11058:7;11048:5;:18::i;:::-;11076:53;11107:1;11111:2;11115:7;11124:4;11076:22;:53::i;:::-;10954:182;;;:::o;6376:272::-;6479:4;6533:1;6514:21;;:7;:21;;;;:127;;;;;6561:7;6552:16;;:5;:16;;;:52;;;;6572:32;6589:5;6596:7;6572:16;:32::i;:::-;6552:52;:88;;;;6633:7;6608:32;;:21;6621:7;6608:12;:21::i;:::-;:32;;;6552:88;6514:127;6495:146;;6376:272;;;;;:::o;12214:916:21:-;12267:7;12286:14;12303:1;12286:18;;12351:8;12342:5;:17;12338:103;;12388:8;12379:17;;;;;;:::i;:::-;;;;;12424:2;12414:12;;;;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;;;;:::i;:::-;;;;;12540:2;12530:12;;;;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;;;;:::i;:::-;;;;;12656:2;12646:12;;;;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;;;;:::i;:::-;;;;;12770:1;12760:11;;;;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;;;;:::i;:::-;;;;;12883:1;12873:11;;;;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;;;;:::i;:::-;;;;;12996:1;12986:11;;;;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;;;;13025:66;13117:6;13110:13;;;12214:916;;;:::o;9955:327:12:-;10036:1;10022:16;;:2;:16;;;10018:87;;10091:1;10061:33;;;;;;;;;;;:::i;:::-;;;;;;;;10018:87;10114:21;10138:32;10146:2;10150:7;10167:1;10138:7;:32::i;:::-;10114:56;;10209:1;10184:27;;:13;:27;;;10180:96;;10262:1;10234:31;;;;;;;;;;;:::i;:::-;;;;;;;;10180:96;10008:274;9955:327;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:27:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:117::-;4999:1;4996;4989:12;5013:180;5061:77;5058:1;5051:88;5158:4;5155:1;5148:15;5182:4;5179:1;5172:15;5199:281;5282:27;5304:4;5282:27;:::i;:::-;5274:6;5270:40;5412:6;5400:10;5397:22;5376:18;5364:10;5361:34;5358:62;5355:88;;;5423:18;;:::i;:::-;5355:88;5463:10;5459:2;5452:22;5242:238;5199:281;;:::o;5486:129::-;5520:6;5547:20;;:::i;:::-;5537:30;;5576:33;5604:4;5596:6;5576:33;:::i;:::-;5486:129;;;:::o;5621:311::-;5698:4;5788:18;5780:6;5777:30;5774:56;;;5810:18;;:::i;:::-;5774:56;5860:4;5852:6;5848:17;5840:25;;5920:4;5914;5910:15;5902:23;;5621:311;;;:::o;5938:117::-;6047:1;6044;6037:12;6078:710;6174:5;6199:81;6215:64;6272:6;6215:64;:::i;:::-;6199:81;:::i;:::-;6190:90;;6300:5;6329:6;6322:5;6315:21;6363:4;6356:5;6352:16;6345:23;;6416:4;6408:6;6404:17;6396:6;6392:30;6445:3;6437:6;6434:15;6431:122;;;6464:79;;:::i;:::-;6431:122;6579:6;6562:220;6596:6;6591:3;6588:15;6562:220;;;6671:3;6700:37;6733:3;6721:10;6700:37;:::i;:::-;6695:3;6688:50;6767:4;6762:3;6758:14;6751:21;;6638:144;6622:4;6617:3;6613:14;6606:21;;6562:220;;;6566:21;6180:608;;6078:710;;;;;:::o;6811:370::-;6882:5;6931:3;6924:4;6916:6;6912:17;6908:27;6898:122;;6939:79;;:::i;:::-;6898:122;7056:6;7043:20;7081:94;7171:3;7163:6;7156:4;7148:6;7144:17;7081:94;:::i;:::-;7072:103;;6888:293;6811:370;;;;:::o;7187:684::-;7280:6;7288;7337:2;7325:9;7316:7;7312:23;7308:32;7305:119;;;7343:79;;:::i;:::-;7305:119;7463:1;7488:53;7533:7;7524:6;7513:9;7509:22;7488:53;:::i;:::-;7478:63;;7434:117;7618:2;7607:9;7603:18;7590:32;7649:18;7641:6;7638:30;7635:117;;;7671:79;;:::i;:::-;7635:117;7776:78;7846:7;7837:6;7826:9;7822:22;7776:78;:::i;:::-;7766:88;;7561:303;7187:684;;;;;:::o;7877:619::-;7954:6;7962;7970;8019:2;8007:9;7998:7;7994:23;7990:32;7987:119;;;8025:79;;:::i;:::-;7987:119;8145:1;8170:53;8215:7;8206:6;8195:9;8191:22;8170:53;:::i;:::-;8160:63;;8116:117;8272:2;8298:53;8343:7;8334:6;8323:9;8319:22;8298:53;:::i;:::-;8288:63;;8243:118;8400:2;8426:53;8471:7;8462:6;8451:9;8447:22;8426:53;:::i;:::-;8416:63;;8371:118;7877:619;;;;;:::o;8502:118::-;8589:24;8607:5;8589:24;:::i;:::-;8584:3;8577:37;8502:118;;:::o;8626:222::-;8719:4;8757:2;8746:9;8742:18;8734:26;;8770:71;8838:1;8827:9;8823:17;8814:6;8770:71;:::i;:::-;8626:222;;;;:::o;8854:329::-;8913:6;8962:2;8950:9;8941:7;8937:23;8933:32;8930:119;;;8968:79;;:::i;:::-;8930:119;9088:1;9113:53;9158:7;9149:6;9138:9;9134:22;9113:53;:::i;:::-;9103:63;;9059:117;8854:329;;;;:::o;9189:180::-;9237:77;9234:1;9227:88;9334:4;9331:1;9324:15;9358:4;9355:1;9348:15;9375:115;9458:1;9451:5;9448:12;9438:46;;9464:18;;:::i;:::-;9438:46;9375:115;:::o;9496:131::-;9543:7;9572:5;9561:16;;9578:43;9615:5;9578:43;:::i;:::-;9496:131;;;:::o;9633:::-;9691:9;9724:34;9752:5;9724:34;:::i;:::-;9711:47;;9633:131;;;:::o;9770:147::-;9865:45;9904:5;9865:45;:::i;:::-;9860:3;9853:58;9770:147;;:::o;9923:238::-;10024:4;10062:2;10051:9;10047:18;10039:26;;10075:79;10151:1;10140:9;10136:17;10127:6;10075:79;:::i;:::-;9923:238;;;;:::o;10167:104::-;10232:6;10260:4;10250:14;;10167:104;;;:::o;10277:143::-;10374:11;10411:3;10396:18;;10277:143;;;;:::o;10426:98::-;10491:4;10514:3;10506:11;;10426:98;;;:::o;10530:108::-;10607:24;10625:5;10607:24;:::i;:::-;10602:3;10595:37;10530:108;;:::o;10644:179::-;10713:10;10734:46;10776:3;10768:6;10734:46;:::i;:::-;10812:4;10807:3;10803:14;10789:28;;10644:179;;;;:::o;10829:111::-;10897:4;10929;10924:3;10920:14;10912:22;;10829:111;;;:::o;10978:694::-;11114:52;11160:5;11114:52;:::i;:::-;11182:84;11259:6;11254:3;11182:84;:::i;:::-;11175:91;;11290:54;11338:5;11290:54;:::i;:::-;11367:7;11398:1;11383:282;11408:6;11405:1;11402:13;11383:282;;;11484:6;11478:13;11511:63;11570:3;11555:13;11511:63;:::i;:::-;11504:70;;11597:58;11648:6;11597:58;:::i;:::-;11587:68;;11443:222;11430:1;11427;11423:9;11418:14;;11383:282;;;11387:14;11090:582;;;10978:694;;:::o;11678:314::-;11817:4;11855:2;11844:9;11840:18;11832:26;;11868:117;11982:1;11971:9;11967:17;11958:6;11868:117;:::i;:::-;11678:314;;;;:::o;11998:116::-;12068:21;12083:5;12068:21;:::i;:::-;12061:5;12058:32;12048:60;;12104:1;12101;12094:12;12048:60;11998:116;:::o;12120:133::-;12163:5;12201:6;12188:20;12179:29;;12217:30;12241:5;12217:30;:::i;:::-;12120:133;;;;:::o;12259:468::-;12324:6;12332;12381:2;12369:9;12360:7;12356:23;12352:32;12349:119;;;12387:79;;:::i;:::-;12349:119;12507:1;12532:53;12577:7;12568:6;12557:9;12553:22;12532:53;:::i;:::-;12522:63;;12478:117;12634:2;12660:50;12702:7;12693:6;12682:9;12678:22;12660:50;:::i;:::-;12650:60;;12605:115;12259:468;;;;;:::o;12733:117::-;12842:1;12839;12832:12;12856:307;12917:4;13007:18;12999:6;12996:30;12993:56;;;13029:18;;:::i;:::-;12993:56;13067:29;13089:6;13067:29;:::i;:::-;13059:37;;13151:4;13145;13141:15;13133:23;;12856:307;;;:::o;13169:146::-;13266:6;13261:3;13256;13243:30;13307:1;13298:6;13293:3;13289:16;13282:27;13169:146;;;:::o;13321:423::-;13398:5;13423:65;13439:48;13480:6;13439:48;:::i;:::-;13423:65;:::i;:::-;13414:74;;13511:6;13504:5;13497:21;13549:4;13542:5;13538:16;13587:3;13578:6;13573:3;13569:16;13566:25;13563:112;;;13594:79;;:::i;:::-;13563:112;13684:54;13731:6;13726:3;13721;13684:54;:::i;:::-;13404:340;13321:423;;;;;:::o;13763:338::-;13818:5;13867:3;13860:4;13852:6;13848:17;13844:27;13834:122;;13875:79;;:::i;:::-;13834:122;13992:6;13979:20;14017:78;14091:3;14083:6;14076:4;14068:6;14064:17;14017:78;:::i;:::-;14008:87;;13824:277;13763:338;;;;:::o;14107:943::-;14202:6;14210;14218;14226;14275:3;14263:9;14254:7;14250:23;14246:33;14243:120;;;14282:79;;:::i;:::-;14243:120;14402:1;14427:53;14472:7;14463:6;14452:9;14448:22;14427:53;:::i;:::-;14417:63;;14373:117;14529:2;14555:53;14600:7;14591:6;14580:9;14576:22;14555:53;:::i;:::-;14545:63;;14500:118;14657:2;14683:53;14728:7;14719:6;14708:9;14704:22;14683:53;:::i;:::-;14673:63;;14628:118;14813:2;14802:9;14798:18;14785:32;14844:18;14836:6;14833:30;14830:117;;;14866:79;;:::i;:::-;14830:117;14971:62;15025:7;15016:6;15005:9;15001:22;14971:62;:::i;:::-;14961:72;;14756:287;14107:943;;;;;;;:::o;15056:474::-;15124:6;15132;15181:2;15169:9;15160:7;15156:23;15152:32;15149:119;;;15187:79;;:::i;:::-;15149:119;15307:1;15332:53;15377:7;15368:6;15357:9;15353:22;15332:53;:::i;:::-;15322:63;;15278:117;15434:2;15460:53;15505:7;15496:6;15485:9;15481:22;15460:53;:::i;:::-;15450:63;;15405:118;15056:474;;;;;:::o;15536:180::-;15584:77;15581:1;15574:88;15681:4;15678:1;15671:15;15705:4;15702:1;15695:15;15722:320;15766:6;15803:1;15797:4;15793:12;15783:22;;15850:1;15844:4;15840:12;15871:18;15861:81;;15927:4;15919:6;15915:17;15905:27;;15861:81;15989:2;15981:6;15978:14;15958:18;15955:38;15952:84;;16008:18;;:::i;:::-;15952:84;15773:269;15722:320;;;:::o;16048:332::-;16169:4;16207:2;16196:9;16192:18;16184:26;;16220:71;16288:1;16277:9;16273:17;16264:6;16220:71;:::i;:::-;16301:72;16369:2;16358:9;16354:18;16345:6;16301:72;:::i;:::-;16048:332;;;;;:::o;16386:442::-;16535:4;16573:2;16562:9;16558:18;16550:26;;16586:71;16654:1;16643:9;16639:17;16630:6;16586:71;:::i;:::-;16667:72;16735:2;16724:9;16720:18;16711:6;16667:72;:::i;:::-;16749;16817:2;16806:9;16802:18;16793:6;16749:72;:::i;:::-;16386:442;;;;;;:::o;16834:180::-;16882:77;16879:1;16872:88;16979:4;16976:1;16969:15;17003:4;17000:1;16993:15;17020:147;17121:11;17158:3;17143:18;;17020:147;;;;:::o;17173:114::-;;:::o;17293:398::-;17452:3;17473:83;17554:1;17549:3;17473:83;:::i;:::-;17466:90;;17565:93;17654:3;17565:93;:::i;:::-;17683:1;17678:3;17674:11;17667:18;;17293:398;;;:::o;17697:379::-;17881:3;17903:147;18046:3;17903:147;:::i;:::-;17896:154;;18067:3;18060:10;;17697:379;;;:::o;18082:180::-;18130:77;18127:1;18120:88;18227:4;18224:1;18217:15;18251:4;18248:1;18241:15;18268:233;18307:3;18330:24;18348:5;18330:24;:::i;:::-;18321:33;;18376:66;18369:5;18366:77;18363:103;;18446:18;;:::i;:::-;18363:103;18493:1;18486:5;18482:13;18475:20;;18268:233;;;:::o;18507:77::-;18544:7;18573:5;18562:16;;18507:77;;;:::o;18590:118::-;18677:24;18695:5;18677:24;:::i;:::-;18672:3;18665:37;18590:118;;:::o;18714:101::-;18750:7;18790:18;18783:5;18779:30;18768:41;;18714:101;;;:::o;18821:115::-;18906:23;18923:5;18906:23;:::i;:::-;18901:3;18894:36;18821:115;;:::o;18942:89::-;18978:7;19018:6;19011:5;19007:18;18996:29;;18942:89;;;:::o;19037:115::-;19122:23;19139:5;19122:23;:::i;:::-;19117:3;19110:36;19037:115;;:::o;19158:93::-;19194:7;19234:10;19227:5;19223:22;19212:33;;19158:93;;;:::o;19257:115::-;19342:23;19359:5;19342:23;:::i;:::-;19337:3;19330:36;19257:115;;:::o;19378:648::-;19575:4;19613:3;19602:9;19598:19;19590:27;;19627:71;19695:1;19684:9;19680:17;19671:6;19627:71;:::i;:::-;19708:70;19774:2;19763:9;19759:18;19750:6;19708:70;:::i;:::-;19788;19854:2;19843:9;19839:18;19830:6;19788:70;:::i;:::-;19868;19934:2;19923:9;19919:18;19910:6;19868:70;:::i;:::-;19948:71;20014:3;20003:9;19999:19;19990:6;19948:71;:::i;:::-;19378:648;;;;;;;;:::o;20032:143::-;20089:5;20120:6;20114:13;20105:22;;20136:33;20163:5;20136:33;:::i;:::-;20032:143;;;;:::o;20181:351::-;20251:6;20300:2;20288:9;20279:7;20275:23;20271:32;20268:119;;;20306:79;;:::i;:::-;20268:119;20426:1;20451:64;20507:7;20498:6;20487:9;20483:22;20451:64;:::i;:::-;20441:74;;20397:128;20181:351;;;;:::o;20538:148::-;20640:11;20677:3;20662:18;;20538:148;;;;:::o;20692:390::-;20798:3;20826:39;20859:5;20826:39;:::i;:::-;20881:89;20963:6;20958:3;20881:89;:::i;:::-;20874:96;;20979:65;21037:6;21032:3;21025:4;21018:5;21014:16;20979:65;:::i;:::-;21069:6;21064:3;21060:16;21053:23;;20802:280;20692:390;;;;:::o;21088:435::-;21268:3;21290:95;21381:3;21372:6;21290:95;:::i;:::-;21283:102;;21402:95;21493:3;21484:6;21402:95;:::i;:::-;21395:102;;21514:3;21507:10;;21088:435;;;;;:::o;21529:180::-;21577:77;21574:1;21567:88;21674:4;21671:1;21664:15;21698:4;21695:1;21688:15;21715:176;21747:1;21764:20;21782:1;21764:20;:::i;:::-;21759:25;;21798:20;21816:1;21798:20;:::i;:::-;21793:25;;21837:1;21827:35;;21842:18;;:::i;:::-;21827:35;21883:1;21880;21876:9;21871:14;;21715:176;;;;:::o;21897:98::-;21948:6;21982:5;21976:12;21966:22;;21897:98;;;:::o;22001:168::-;22084:11;22118:6;22113:3;22106:19;22158:4;22153:3;22149:14;22134:29;;22001:168;;;;:::o;22175:373::-;22261:3;22289:38;22321:5;22289:38;:::i;:::-;22343:70;22406:6;22401:3;22343:70;:::i;:::-;22336:77;;22422:65;22480:6;22475:3;22468:4;22461:5;22457:16;22422:65;:::i;:::-;22512:29;22534:6;22512:29;:::i;:::-;22507:3;22503:39;22496:46;;22265:283;22175:373;;;;:::o;22554:640::-;22749:4;22787:3;22776:9;22772:19;22764:27;;22801:71;22869:1;22858:9;22854:17;22845:6;22801:71;:::i;:::-;22882:72;22950:2;22939:9;22935:18;22926:6;22882:72;:::i;:::-;22964;23032:2;23021:9;23017:18;23008:6;22964:72;:::i;:::-;23083:9;23077:4;23073:20;23068:2;23057:9;23053:18;23046:48;23111:76;23182:4;23173:6;23111:76;:::i;:::-;23103:84;;22554:640;;;;;;;:::o;23200:141::-;23256:5;23287:6;23281:13;23272:22;;23303:32;23329:5;23303:32;:::i;:::-;23200:141;;;;:::o;23347:349::-;23416:6;23465:2;23453:9;23444:7;23440:23;23436:32;23433:119;;;23471:79;;:::i;:::-;23433:119;23591:1;23616:63;23671:7;23662:6;23651:9;23647:22;23616:63;:::i;:::-;23606:73;;23562:127;23347:349;;;;:::o;23702:141::-;23751:4;23774:3;23766:11;;23797:3;23794:1;23787:14;23831:4;23828:1;23818:18;23810:26;;23702:141;;;:::o;23849:93::-;23886:6;23933:2;23928;23921:5;23917:14;23913:23;23903:33;;23849:93;;;:::o;23948:107::-;23992:8;24042:5;24036:4;24032:16;24011:37;;23948:107;;;;:::o;24061:393::-;24130:6;24180:1;24168:10;24164:18;24203:97;24233:66;24222:9;24203:97;:::i;:::-;24321:39;24351:8;24340:9;24321:39;:::i;:::-;24309:51;;24393:4;24389:9;24382:5;24378:21;24369:30;;24442:4;24432:8;24428:19;24421:5;24418:30;24408:40;;24137:317;;24061:393;;;;;:::o;24460:60::-;24488:3;24509:5;24502:12;;24460:60;;;:::o;24526:142::-;24576:9;24609:53;24627:34;24636:24;24654:5;24636:24;:::i;:::-;24627:34;:::i;:::-;24609:53;:::i;:::-;24596:66;;24526:142;;;:::o;24674:75::-;24717:3;24738:5;24731:12;;24674:75;;;:::o;24755:269::-;24865:39;24896:7;24865:39;:::i;:::-;24926:91;24975:41;24999:16;24975:41;:::i;:::-;24967:6;24960:4;24954:11;24926:91;:::i;:::-;24920:4;24913:105;24831:193;24755:269;;;:::o;25030:73::-;25075:3;25030:73;:::o;25109:189::-;25186:32;;:::i;:::-;25227:65;25285:6;25277;25271:4;25227:65;:::i;:::-;25162:136;25109:189;;:::o;25304:186::-;25364:120;25381:3;25374:5;25371:14;25364:120;;;25435:39;25472:1;25465:5;25435:39;:::i;:::-;25408:1;25401:5;25397:13;25388:22;;25364:120;;;25304:186;;:::o;25496:543::-;25597:2;25592:3;25589:11;25586:446;;;25631:38;25663:5;25631:38;:::i;:::-;25715:29;25733:10;25715:29;:::i;:::-;25705:8;25701:44;25898:2;25886:10;25883:18;25880:49;;;25919:8;25904:23;;25880:49;25942:80;25998:22;26016:3;25998:22;:::i;:::-;25988:8;25984:37;25971:11;25942:80;:::i;:::-;25601:431;;25586:446;25496:543;;;:::o;26045:117::-;26099:8;26149:5;26143:4;26139:16;26118:37;;26045:117;;;;:::o;26168:169::-;26212:6;26245:51;26293:1;26289:6;26281:5;26278:1;26274:13;26245:51;:::i;:::-;26241:56;26326:4;26320;26316:15;26306:25;;26219:118;26168:169;;;;:::o;26342:295::-;26418:4;26564:29;26589:3;26583:4;26564:29;:::i;:::-;26556:37;;26626:3;26623:1;26619:11;26613:4;26610:21;26602:29;;26342:295;;;;:::o;26642:1395::-;26759:37;26792:3;26759:37;:::i;:::-;26861:18;26853:6;26850:30;26847:56;;;26883:18;;:::i;:::-;26847:56;26927:38;26959:4;26953:11;26927:38;:::i;:::-;27012:67;27072:6;27064;27058:4;27012:67;:::i;:::-;27106:1;27130:4;27117:17;;27162:2;27154:6;27151:14;27179:1;27174:618;;;;27836:1;27853:6;27850:77;;;27902:9;27897:3;27893:19;27887:26;27878:35;;27850:77;27953:67;28013:6;28006:5;27953:67;:::i;:::-;27947:4;27940:81;27809:222;27144:887;;27174:618;27226:4;27222:9;27214:6;27210:22;27260:37;27292:4;27260:37;:::i;:::-;27319:1;27333:208;27347:7;27344:1;27341:14;27333:208;;;27426:9;27421:3;27417:19;27411:26;27403:6;27396:42;27477:1;27469:6;27465:14;27455:24;;27524:2;27513:9;27509:18;27496:31;;27370:4;27367:1;27363:12;27358:17;;27333:208;;;27569:6;27560:7;27557:19;27554:179;;;27627:9;27622:3;27618:19;27612:26;27670:48;27712:4;27704:6;27700:17;27689:9;27670:48;:::i;:::-;27662:6;27655:64;27577:156;27554:179;27779:1;27775;27767:6;27763:14;27759:22;27753:4;27746:36;27181:611;;;27144:887;;26734:1303;;;26642:1395;;:::o;28043:332::-;28164:4;28202:2;28191:9;28187:18;28179:26;;28215:71;28283:1;28272:9;28268:17;28259:6;28215:71;:::i;:::-;28296:72;28364:2;28353:9;28349:18;28340:6;28296:72;:::i;:::-;28043:332;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2534000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"infinite","getApproved(uint256)":"infinite","getBreedFromRandomNum(uint256)":"infinite","getChancesArray()":"infinite","getDogTokenUris(uint256)":"infinite","getMintFee()":"infinite","getOwner()":"2611","getTokenCounter()":"2570","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite","requestNft()":"infinite","s_requestIdToSender(uint256)":"2883","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"892","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","withdraw()":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","getBreedFromRandomNum(uint256)":"73d9aa2b","getChancesArray()":"8a857201","getDogTokenUris(uint256)":"3af25975","getMintFee()":"7a5caab3","getOwner()":"893d20e8","getTokenCounter()":"6e02007d","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","requestNft()":"aa152491","s_requestIdToSender(uint256)":"a36f573b","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"string[3]\",\"name\":\"dogTokenUris\",\"type\":\"string[3]\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfs__NOT_ENOUGH_ETH_ENTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfs__OUT_OF_RANGE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfs__OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum RandomIpfs.Breed\",\"name\":\"breed\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"NftRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moddedRng\",\"type\":\"uint256\"}],\"name\":\"getBreedFromRandomNum\",\"outputs\":[{\"internalType\":\"enum RandomIpfs.Breed\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChancesArray\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDogTokenUris\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomIpfs.sol\":\"RandomIpfs\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/RandomIpfs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//errors\\r\\nerror RandomIpfs__OUT_OF_RANGE();\\r\\nerror RandomIpfs__NOT_ENOUGH_ETH_ENTERED();\\r\\nerror RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT();\\r\\nerror RandomIpfs__OwnableUnauthorizedAccount();\\r\\n\\r\\n\\r\\ncontract RandomIpfs is VRFConsumerBaseV2, ERC721URIStorage{\\r\\n\\r\\n//vrf variables\\r\\nVRFCoordinatorV2Interface private immutable i_vrfCoordinatorV2;\\r\\nuint64 private immutable i_subscriptionId;\\r\\nbytes32 private immutable i_keyHash;\\r\\nuint32  private immutable i_callbackGasLimit;\\r\\nuint16 private constant REQUEST_CONFRIMATIONS = 3;\\r\\nuint32 private constant NUW_WORDS =  1;\\r\\n\\r\\n//vrf helpers\\r\\nmapping(uint256 => address) public s_requestIdToSender;\\r\\n\\r\\n//Nft variables\\r\\nuint256 internal constant MAX_VALUE = 100;\\r\\nuint256 private s_tokenCounter; \\r\\nstring[] internal s_dogTokenUris;\\r\\nuint256 private immutable i_mintFee;\\r\\naddress private owner;\\r\\n\\r\\n//enums\\r\\nenum Breed {Pug, Shiba_inu, St_benard }\\r\\n//events\\r\\nevent NftRequested(uint256 indexed requestId, address indexed requester);\\r\\nevent NftMinted(uint256 indexed tokenId , Breed indexed breed, address minter);\\r\\n\\r\\n\\r\\n\\r\\nconstructor (address vrfCoordinatorV2, uint64 subscriptionId, bytes32 keyHash, uint32 callBackGasLimit, string[3] memory dogTokenUris, uint256 mintFee) \\r\\nVRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\\\"RandomDogsNft\\\", \\\"DOGS\\\")  {\\r\\n    i_vrfCoordinatorV2 = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n    i_subscriptionId = subscriptionId;\\r\\n    i_keyHash = keyHash;\\r\\n    i_callbackGasLimit = callBackGasLimit;\\r\\n    s_tokenCounter = 0;\\r\\n    s_dogTokenUris = dogTokenUris;\\r\\n    i_mintFee = mintFee;\\r\\n}\\r\\n\\r\\n function requestNft() public payable returns (uint256 requestId) {\\r\\n   if (msg.value < i_mintFee) {\\r\\n      revert RandomIpfs__NOT_ENOUGH_ETH_ENTERED();\\r\\n   }\\r\\n    requestId = i_vrfCoordinatorV2.requestRandomWords(i_keyHash, i_subscriptionId, REQUEST_CONFRIMATIONS, i_callbackGasLimit,NUW_WORDS );\\r\\n    s_requestIdToSender[requestId]  = msg.sender;\\r\\n    emit NftRequested( requestId, msg.sender);\\r\\n }\\r\\n function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\r\\n   address dogOwner  = s_requestIdToSender[requestId];\\r\\n   uint256 newTokenId  = s_tokenCounter;\\r\\n   s_tokenCounter++;\\r\\n   uint256 moddedRng = randomWords[0] % MAX_VALUE;\\r\\n   Breed dogBreed =  getBreedFromRandomNum(moddedRng);\\r\\n   _safeMint(dogOwner, newTokenId);\\r\\n   _setTokenURI(newTokenId,  s_dogTokenUris[uint256(dogBreed)]);\\r\\n   emit NftMinted(newTokenId, dogBreed, dogOwner);\\r\\n }\\r\\n\\r\\n function getChancesArray() public pure returns (uint256[3] memory ) {\\r\\n    return [10, 30, MAX_VALUE];\\r\\n }\\r\\n function getBreedFromRandomNum(uint256 moddedRng) public pure returns(Breed) {\\r\\n     uint256[3] memory chanceArray = getChancesArray();\\r\\n     uint256 cumSum  = 0;\\r\\n\\r\\n     for (uint256 i = 0; i < chanceArray.length; i++) {\\r\\n      if (moddedRng >= cumSum && moddedRng < chanceArray[i] ) {\\r\\n         \\r\\n         return Breed(i);\\r\\n\\r\\n      } \\r\\n      cumSum  =chanceArray[i];\\r\\n         \\r\\n\\r\\n     }\\r\\n     revert RandomIpfs__OUT_OF_RANGE();\\r\\n\\r\\n }\\r\\n function getOwner()public view returns (address) {\\r\\n   return owner;\\r\\n }\\r\\n \\r\\n function withdraw() public  {\\r\\n   if (getOwner() != msg.sender) {\\r\\n            revert RandomIpfs__OwnableUnauthorizedAccount();\\r\\n        }\\r\\n   uint256 amount = address(this).balance;\\r\\n   (bool success, ) = payable(msg.sender).call{value:amount}(\\\"\\\");\\r\\n\\r\\n   if (!success) {\\r\\n      revert  RandomIpfs__YOU_ARE_NOT_THE_OWNER_OF_THE_CONTRACT();\\r\\n   } \\r\\n }\\r\\n function getMintFee() public view returns(uint256) {\\r\\n   return i_mintFee;\\r\\n }\\r\\n function getDogTokenUris(uint256 index)  public view returns(string memory){\\r\\n   return s_dogTokenUris[index];\\r\\n\\r\\n }\\r\\n function getTokenCounter( ) public view returns (uint256) {\\r\\n   return s_tokenCounter;\\r\\n }\\r\\n \\r\\n}\",\"keccak256\":\"0x8d956fcbc13196825330362d22de6afed986c250370c0ad7c71f6a77b853ed33\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1726,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1728,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1732,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1736,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1740,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1746,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2865,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":4566,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"s_requestIdToSender","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_address)"},{"astId":4571,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"s_tokenCounter","offset":0,"slot":"8","type":"t_uint256"},{"astId":4574,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"s_dogTokenUris","offset":0,"slot":"9","type":"t_array(t_string_storage)dyn_storage"},{"astId":4578,"contract":"contracts/RandomIpfs.sol:RandomIpfs","label":"owner","offset":0,"slot":"10","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}